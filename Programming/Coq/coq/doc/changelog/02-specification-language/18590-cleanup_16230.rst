- **Changed:**
  warnings `future-coercion-class-constructor`
  and `future-coercion-class-field` about ``:>`` in :cmd:`Class` as
  error by default. This offers a last opportunity to replace ``:>``
  with ``::`` (available since Coq 8.18) to declare typeclass instances
  before making ``:>`` consistently declare coercions in all records in
  next version.
  To adapt huge codebases, you can try
  `this script <https://gist.github.com/JasonGross/59fc3c03664f2280849abf50b531be42>`_
  or the one below. But beware that both are incomplete.

  .. code-block:: sh

     #!/bin/awk -f
     BEGIN {
       startclass = 0;
       inclass = 0;
       indefclass = 0;  # definitionalclasses (single field, without { ... })
     }
     {
       if ($0 ~ "[ ]*Class") {
         startclass = 1;
       }
       if (startclass == 1 && $0 ~ ":=") {
         inclass = 1;
         indefclass = 1;
       }
       if (startclass == 1 && $0 ~ ":=.*{") {
         indefclass = 0;
       }
       if (inclass == 1) startclass = 0;

       if (inclass == 1 && $0 ~ ":>") {
         if ($0 ~ "{ .*:>") {  # first field on a single line
           sub("{ ", "{ #[global] ");
         } else if ($0 ~ ":=.*:>") {  # definitional classes on a single line
           sub(":= ", ":= #[global] ");
         } else if ($0 ~ "^  ") {
           sub("  ", "  #[global] ");
         } else {
           $0 = "#[global] " $0;
         }
         sub(":>", "::")
       }
     print $0;

     if ($0 ~ ".*}[.]" || indefclass == 1 && $0 ~ "[.]$") inclass = 0;
   }

  (`#18590 <https://github.com/coq/coq/pull/18590>`_,
  by Pierre Roux).
