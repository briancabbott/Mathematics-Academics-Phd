
// input model

.decl Reference(from : symbol, to : symbol)
.input Reference

.decl GCRoot(val : symbol)
.input GCRoot

// output

.decl Live(val : symbol)
.output Live

/*
  liveness is detected in two steps to support thread deadlock detection:
    step 0: reachability from gc roots, to detect deadlocked threads ; partial liveness result
    step 1: mark deadlocked threads as live, because they will be woken up with an exception ; complete liveness result
*/

// traversal
.decl LiveStep0(val : symbol)

LiveStep0(ref) :- GCRoot(ref).

LiveStep0(to) :-
  LiveStep0(from),
  Reference(from, to).

// support for deadlock detection: BlockedIndefinitelyOnMVar or BlockedIndefinitelyOnSTM

.decl MaybeDeadlockingThread(threadId : symbol)
.input MaybeDeadlockingThread

.decl DeadlockingThread(threadId : symbol)
.output DeadlockingThread

DeadlockingThread(tid) :-
  MaybeDeadlockingThread(tid),
  !LiveStep0(tid).

Live(tid) :- DeadlockingThread(tid).
Live(ref) :- LiveStep0(ref).
Live(to) :-
  Live(from),
  Reference(from, to).


/*
.decl All(val : symbol)

All(from),
All(to) :-
  Reference(from, to).

All(val) :-
  GCRoot(val).

.decl Dead(val : symbol)
.output Dead

Dead(val) :-
  All(val),
  !Live(val).


// the inverse of the reference relation, but only for live values
.decl LiveReferredBy(to : symbol, from : symbol)
.output LiveReferredBy

LiveReferredBy(to, from) :-
  Reference(from, to),
  Live(from),
  Live(to).
*/

/*
// debug output
.output Reference
.output GCRoot
.output MaybeDeadlockingThread
*/