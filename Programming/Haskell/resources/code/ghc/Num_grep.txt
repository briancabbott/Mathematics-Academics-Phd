
cabal.project-reinstall:58:             any.ghc-bignum installed,


compiler/Language/Haskell/Syntax/Module/Name.hs:59:                $ Parse.munch1 (\c -> isAlphaNum c || c `elem` "_.'")
compiler/Language/Haskell/Syntax/Binds.hs:359:      -- > f :: Num a => a -> a


compiler/GHC/CoreToStg/Prep.hs:117: 9. Convert bignum literals into their core representation.
compiler/GHC/CoreToStg/Prep.hs:1972:the the following enum (check `mkNonRecFloat` for whether this is up to date):
compiler/GHC/CoreToStg/Prep.hs:2631:-- | Converts Bignum literals into their final CoreExpr
compiler/GHC/CoreToStg/Prep.hs:2646:      :: forall a. Num a => FixedPrim a -> BS.ByteString



compiler/GHC/Tc/TyCl/Utils.hs:822:     fromIntegerNum :: a
compiler/GHC/Tc/TyCl/Utils.hs:823:     fromIntegerNum = ...
compiler/GHC/Tc/TyCl/Utils.hs:998:           { field1 :: forall c. (Num a, Show c) => (Either a c, Proxy b)
compiler/GHC/Tc/TyCl/Utils.hs:1006:            T a b -> forall c. (Num a, Show c) => (Either a c, Proxy b)
compiler/GHC/Tc/TyCl/PatSyn.hs:1123:To match against this pattern we need (Eq a, Num a).  But to build
compiler/GHC/Tc/TyCl/PatSyn.hs:1124:(Just 34) we need only (Num a).  Fortunately instTcSigFromId sets
compiler/GHC/Tc/TyCl/Instance.hs:1397:   ev_ids      = mkTemplateLocalsNum 1                    dfun_theta
compiler/GHC/Tc/Utils/Env.hs:1025:    nextWrapperNum <- tcg_next_wrapper_num <$> getGblEnv
compiler/GHC/Tc/Utils/Env.hs:1026:    name <- mkWrapperName nextWrapperNum "stable" str
compiler/GHC/Tc/Utils/Env.hs:1044:         wrapperNum <- liftIO $ atomicModifyIORef' wrapperRef $ \mod_env ->
compiler/GHC/Tc/Utils/Env.hs:1045:             let num = lookupWithDefaultModuleEnv mod_env 0 thisMod
compiler/GHC/Tc/Utils/Monad.hs:271:        next_wrapper_num     <- newIORef emptyModuleEnv ;
compiler/GHC/Tc/Utils/Monad.hs:364:                tcg_next_wrapper_num = next_wrapper_num
compiler/GHC/Tc/Utils/Monad.hs:437:The Integer type is simply not available in ghc-prim and ghc-bignum packages (it
compiler/GHC/Tc/Utils/Instantiate.hs:221:       --       forall a. Num a => forall b. Ord b => ...
compiler/GHC/Tc/Utils/TcMType.hs:2247:        bar :: Num u => u
compiler/GHC/Tc/Utils/TcMType.hs:2250:* From the (\t -> t+t) we get type  {Num d} =>  d -> d
compiler/GHC/Tc/Utils/TcMType.hs:2254:        {Num (C d a)} =>  C d a -> C d a
compiler/GHC/Tc/Utils/TcMType.hs:2257:* Now abstract over the 'a', but float out the Num (C d a) constraint
compiler/GHC/Tc/Utils/TcMType.hs:2262:* So we get a dict binding for Num (C d a), which is zonked to give
compiler/GHC/Tc/Utils/TcMType.hs:2340:A literal like "3" means (fromInteger @ty (dNum :: Num ty) (3::Integer)).
compiler/GHC/Tc/Utils/Unify.hs:1420:     f :: forall {a}. a -> forall b. Num b => b -> b -> b
compiler/GHC/Tc/Utils/Unify.hs:1435:   infer plus :: forall a. Num a => a -> a -> a. However, the monomorphism
compiler/GHC/Tc/Utils/Unify.hs:3053:       | isInvisibleFunArg af  -- e.g.  Num a => blah
compiler/GHC/Tc/Deriv.hs:1568:           --      newtype A = MkA B deriving( Num )
compiler/GHC/Tc/Deriv.hs:1569:           -- We want the Num instance of B, *not* the Num instance of Int,
compiler/GHC/Tc/Deriv.hs:1570:           -- when making the Num instance of A!
compiler/GHC/Tc/Types/Constraint.hs:210:data DictCt   -- e.g.  Num ty
compiler/GHC/Tc/Types/Constraint.hs:1354:  -- For example: Num (F Int (TypeError "msg")), where F is a type family.
compiler/GHC/Tc/Types/Constraint.hs:1542:            forall a. (Show a, Num a) => ...
compiler/GHC/Tc/Types/Evidence.hs:416:            -- let $$dNum = GHC.Num.$fNumInt in ...
compiler/GHC/Tc/Types/Evidence.hs:420:            -- let $dNum = GHC.Num.$fNumInt in
compiler/GHC/Tc/Types/BasicTypes.hs:156:      h :: (Num a, _) => a -> a
compiler/GHC/Tc/TyCl.hs:5109:For instance, in the Enum class declaration:
compiler/GHC/Tc/TyCl.hs:5111:    class Enum a where
compiler/GHC/Tc/TyCl.hs:5112:      enum :: [a]
compiler/GHC/Tc/TyCl.hs:5113:      default enum :: (Generic a, GEnum (Rep a)) => [a]
compiler/GHC/Tc/TyCl.hs:5114:      enum = map to genum
compiler/GHC/Tc/TyCl.hs:5116:    class GEnum f where
compiler/GHC/Tc/TyCl.hs:5117:      genum :: [f a]
compiler/GHC/Tc/TyCl.hs:5119:The default implementation for enum only works for types that are instances of
compiler/GHC/Tc/TyCl.hs:5121:clearly enum doesn't _have_ to use this implementation, so naturally, the
compiler/GHC/Tc/TyCl.hs:5122:context for enum is allowed to be different to accommodate this. As a result,
compiler/GHC/Tc/Types.hs:658:        tcg_next_wrapper_num :: TcRef (ModuleEnv Int)
compiler/GHC/Tc/Module.hs:2664:  -- foo :: forall a f b. (Show a, Num b, Foldable f) => a -> f b -> String
compiler/GHC/Tc/Module.hs:2666:  forall f b. (Show Int, Num b, Foldable f) => Int -> f b -> String
compiler/GHC/Tc/Module.hs:2683:  -- foo :: forall a f b. (Show a, Num b, Foldable f) => a -> f b -> String
compiler/GHC/Tc/Module.hs:2690:  bar :: (Num a, Monoid a) => a -> a
compiler/GHC/Tc/Module.hs:2695:  type in the defaulting list that is both Num and Monoid. (If this list is
compiler/GHC/Tc/Module.hs:2696:  modified to include an element that is both Num and Monoid, the defaulting
compiler/GHC/Tc/Errors/Ppr.hs:323:    TcRnTagToEnumResTyNotAnEnum ty
compiler/GHC/Tc/Errors/Types.hs:864:  {-| TcRnTagToEnumResTyNotAnEnum is an error that occurs when the 'tagToEnum#'
compiler/GHC/Tc/Errors/Types.hs:873:  TcRnTagToEnumResTyNotAnEnum :: Type -> TcRnMessage
compiler/GHC/Tc/Errors/Types.hs:987:      foo :: Num a => a -> a
compiler/GHC/Tc/Errors/Types.hs:990:          g :: forall b. Num b => _ -> b
compiler/GHC/Tc/Errors/Types.hs:1170:        g :: ((Show a, Num a), Eq a) => a -> a
compiler/GHC/Tc/Errors/Types.hs:1333:      restriction the inferred type for 'bar' is 'bar :: Num p => p'. This warning tells us
compiler/GHC/Tc/Errors/Types.hs:2030:        -- We get Wanteds Show a0, Num a0, and default a0 to Integer.
compiler/GHC/Tc/Errors/Types.hs:2645:       default meth :: Num a => a
compiler/GHC/Tc/Errors/Types.hs:3078:         default m :: Num a => a
compiler/GHC/Tc/Errors/Types.hs:4591:  -- enum type or because it did have more than one constructor.
compiler/GHC/Tc/Errors/Types.hs:4719:  --    instance Num [Int] where {..}
compiler/GHC/Tc/Errors/Types.hs:5317:  pattern Pat :: (Num a, Eq a) => Show a   => a -> Maybe a
compiler/GHC/Tc/Errors/Types.hs:5326:   forall a. (Num a, Eq a) => [W] Show a
compiler/GHC/Tc/Errors/Types.hs:5329:this case the literal '4' needs (Num a, Eq a)).
compiler/GHC/Tc/Errors/Types.hs:5333:  pattern Pat :: (Num a, Eq a, Show a) => Show a => a -> Maybe a
compiler/GHC/Tc/Instance/Class.hs:292:form `EvLit (EvNum n)`.
compiler/GHC/Tc/Instance/Class.hs:325:in which case the evidence `EvLit (EvNum n)` is generated on the
compiler/GHC/Tc/Instance/Class.hs:968:      -- 'else' case: qualified types like (Num a => blah) are not typeable
compiler/GHC/Tc/Solver/Dict.hs:442:    type C a b = (Num a, M a b)
compiler/GHC/Tc/Solver/Dict.hs:447:The body of `f` requires a [W] `Num Int` instance. We could solve this
compiler/GHC/Tc/Solver/Dict.hs:449:solution for `Num Int`. This would let us produce core like the following
compiler/GHC/Tc/Solver/Dict.hs:455:          (GHC.Classes.$p1(%,%) @ (Num Int) @ (M Int b) $d(%,%))
compiler/GHC/Tc/Solver/Dict.hs:459:This is bad! We could do /much/ better if we solved [W] `Num Int` directly
compiler/GHC/Tc/Solver/Dict.hs:1218:  -- all others, e.g. so that we can handle [Eq a, Num a] vs [Num a, Eq a]
compiler/GHC/Tc/Solver/Dict.hs:1249:  [G] d1: forall a b. ( Eq a, Num b, C a b  ) => D a b
compiler/GHC/Tc/Solver/Dict.hs:1254:weaker proof obligation of `C a Int`, compared to `(Eq a, Num Int, C a Int)`
compiler/GHC/Tc/Solver/Dict.hs:1896:   class Num (RealOf t) => Normed t
compiler/GHC/Tc/Solver/Dict.hs:1907:   [W] Num fuv
compiler/GHC/Tc/Solver/Dict.hs:1909:   e := fuv, Num fuv, Normed fuv, RealOf fuv ~ fuv
compiler/GHC/Tc/Solver/InertSet.hs:2073:        -- Num constraint cannot be satisfied), it's better to
compiler/GHC/Tc/Errors.hs:2331:If we have an unsolved (Num Int), where `Int` is not the Prelude Int,
compiler/GHC/Tc/Errors.hs:2335:    No instance for (Num Int) arising from the literal ‘3’
compiler/GHC/Tc/Errors.hs:2337:      instance Num GHC.Types.Int -- Defined in ‘GHC.Num’
compiler/GHC/Tc/Validity.hs:2069:   instance (Eq a, Num a) => C (T a)
compiler/GHC/Tc/Validity.hs:2071:   type X a = (Eq a, Num a)
compiler/GHC/Tc/Validity.hs:2075:(Eq a) and (Num a). In the latter, it will see only one: (X a). But we want
compiler/GHC/Tc/Gen/Pat.hs:919:We can't discharge the Num constraint from dictionaries bound by
compiler/GHC/Tc/Gen/Default.hs:96:--    Num      :: Type -> Constraint
compiler/GHC/Tc/Gen/Sig.hs:657:   foo :: Num a => a -> b -> a
compiler/GHC/Tc/Gen/Sig.hs:661:   (forall a b. Num a => a -> b -> a)
compiler/GHC/Tc/Gen/Sig.hs:703:   RULE: forall b (d:Num b). f b d = f_spec b
compiler/GHC/Tc/Gen/Sig.hs:720:      f :: Num a => a -> F a
compiler/GHC/Tc/Gen/App.hs:383:          if isTagToEnum rn_fun
compiler/GHC/Tc/Gen/App.hs:384:          then tcTagToEnum tc_fun fun_ctxt tc_args app_res_rho
compiler/GHC/Tc/Gen/App.hs:1793:isTagToEnum :: HsExpr GhcRn -> Bool
compiler/GHC/Tc/Gen/App.hs:1794:isTagToEnum (HsVar _ (L _ fun_id)) = fun_id `hasKey` tagToEnumKey
compiler/GHC/Tc/Gen/App.hs:1795:isTagToEnum _ = False
compiler/GHC/Tc/Gen/App.hs:1797:tcTagToEnum :: HsExpr GhcTc -> AppCtxt -> [HsExprArg 'TcpTc]
compiler/GHC/Tc/Gen/App.hs:1802:tcTagToEnum tc_fun fun_ctxt tc_args res_ty
compiler/GHC/Tc/Gen/App.hs:1838:      | otherwise             = addErrTc (TcRnTagToEnumResTyNotAnEnum ty')
compiler/GHC/Tc/Gen/Bind.hs:836:             | otherwise                   -> Just nm  -- f :: Num a => a -> _
compiler/GHC/Tc/Gen/Bind.hs:884:    e.g. f :: Num a => a -> a
compiler/GHC/Tc/Gen/Bind.hs:888:          g :: Num a => a -> _
compiler/GHC/Tc/Gen/Bind.hs:889:          h :: (Num a, _) => a -> _
compiler/GHC/Tc/Gen/Bind.hs:1291:  (Eq a, Num a)
compiler/GHC/Tc/Gen/Bind.hs:1295:   f :: forall a. (Eq a, Num a) => a -> Bool -> Bool
compiler/GHC/Tc/Gen/Bind.hs:1299:   tuple :: forall a b. (Eq a, Num a) => (a -> Bool -> Bool, [b] -> Bool -> Bool)
compiler/GHC/Tc/Gen/Rule.hs:278:        fromIntegral :: (Integral a, Num b) => a -> b
compiler/GHC/Tc/Gen/Rule.hs:280:In the rule, a=b=Int, and Num Int is a superclass of Integral Int. But
compiler/GHC/Tc/Solver.hs:779:    (Num alpha, alpha ~ (forall s. GenST s) -> Int)
compiler/GHC/Tc/Solver.hs:832:               [untch=beta] forall a. 0 => Num beta
compiler/GHC/Tc/Solver.hs:960:   f :: Num a => Int -> Int
compiler/GHC/Tc/Solver.hs:962:(Num alpha) constraint to (Num Int)!  Doing so gives a defaulting
compiler/GHC/Tc/Solver.hs:2234:`Num [a]`; then if we don't have `-XFlexibleContexts` we'll get an
compiler/GHC/Tc/Solver.hs:2425:    foo :: Num a => a -> a
compiler/GHC/Tc/Solver.hs:2428:        g :: forall b. Num b => _ -> b
compiler/GHC/Tc/Solver.hs:2522:constraint inferred = (forall b. 0 => C gamma alpha b) /\ Num alpha
compiler/GHC/Tc/Solver.hs:2534:       forall g. 0 => (forall b. 0 => C g alpha b) /\ Num alpha
compiler/GHC/Tc/Solver.hs:3860:   g :: Num a => a -> a
compiler/GHC/Tc/Solver.hs:3864:dealing with the (Num a) context arising from f's definition;
compiler/GHC/Tc/Deriv/Generate.hs:256:          -- This is an enum (all constructors are nullary) - just do a simple tag check
compiler/GHC/Tc/Deriv/Generate.hs:615:        Enum instances
compiler/GHC/Tc/Deriv/Generate.hs:628:instance ... Enum (Foo ...) where
compiler/GHC/Tc/Deriv/Generate.hs:629:    succ x   = toEnum (1 + fromEnum x)
compiler/GHC/Tc/Deriv/Generate.hs:630:    pred x   = toEnum (fromEnum x - 1)
compiler/GHC/Tc/Deriv/Generate.hs:632:    toEnum i = tag2con_Foo i
compiler/GHC/Tc/Deriv/Generate.hs:665:      [ succ_enum      tag2con_RDR maxtag_RDR
compiler/GHC/Tc/Deriv/Generate.hs:666:      , pred_enum      tag2con_RDR
compiler/GHC/Tc/Deriv/Generate.hs:667:      , to_enum        tag2con_RDR maxtag_RDR
compiler/GHC/Tc/Deriv/Generate.hs:679:    succ_enum tag2con_RDR maxtag_RDR
compiler/GHC/Tc/Deriv/Generate.hs:689:    pred_enum tag2con_RDR
compiler/GHC/Tc/Deriv/Generate.hs:701:    to_enum tag2con_RDR maxtag_RDR
compiler/GHC/Tc/Deriv/Generate.hs:748:  = (listToBag [ min_bound_enum, max_bound_enum ], emptyBag)
compiler/GHC/Tc/Deriv/Generate.hs:756:    min_bound_enum = mkHsVarBind loc minBound_RDR (nlHsVar data_con_1_RDR)
compiler/GHC/Tc/Deriv/Generate.hs:757:    max_bound_enum = mkHsVarBind loc maxBound_RDR (nlHsVar data_con_N_RDR)
compiler/GHC/Tc/Deriv/Generate.hs:2777:instances, but also in derived Enum instances:
compiler/GHC/Tc/Deriv/Generate.hs:2779:  deriving instance Enum T
compiler/GHC/Tc/Deriv/Generate.hs:2783:  instance Enum T where
compiler/GHC/Tc/Deriv/Generate.hs:2784:    toEnum i = tag2con_T i
compiler/GHC/Tc/Deriv/Generate.hs:2797:  instance Enum T where
compiler/GHC/Tc/Deriv/Generate.hs:2798:    toEnum a = $tag2con_T{Uniq2} a
compiler/GHC/Tc/Deriv/Generate.hs:2846:    instance Enum T where
compiler/GHC/Tc/Deriv/Generate.hs:2847:      toEnum a = $tag2con_T{Uniq2} a
compiler/GHC/Tc/Deriv/Generate.hs:2881:  instance Enum T where
compiler/GHC/Tc/Deriv/Generate.hs:2882:    toEnum a = $tag2con_T{Uniq2} a
compiler/GHC/Tc/Deriv/Generate.hs:2947:       deriving instance Enum T
compiler/GHC/Tc/Deriv/Generate.hs:2949:   The derived Eq and Enum instances for T make use of $tag2con_T, and since
compiler/GHC/Tc/Deriv/Generate.hs:2961:     deriving instance Enum T
compiler/GHC/Tc/Deriv/Infer.hs:406:-- > (Num Int, Coercible Age Int)
compiler/GHC/Tc/Deriv/Infer.hs:544: instance Num a => Eq (T a)
compiler/GHC/Tc/Deriv/Infer.hs:546:The derived instance for (Ord (T a)) must have a (Num a) constraint!



compiler/GHC/Wasm/ControlFlow/FromCmm.hs:235:    -- Sort highest rpnum first
compiler/GHC/Wasm/ControlFlow/FromCmm.hs:237:      Tree.Node label $ sortBy (flip compare `on` (rpnum . Tree.rootLabel)) $
compiler/GHC/Wasm/ControlFlow/FromCmm.hs:242:   rpnum :: Label -> RPNum-- reverse postorder number of the labeled block
compiler/GHC/Wasm/ControlFlow/FromCmm.hs:270:   isBackward from to = rpnum to <= rpnum from -- self-edge counts as a backward edge
compiler/GHC/Wasm/ControlFlow/FromCmm.hs:312:   rpnum = gwdRPNumber gwd



compiler/GHC/Iface/Recomp/Flags.hs:46:        lang = (fmap fromEnum language,
compiler/GHC/Iface/Recomp/Flags.hs:47:                map fromEnum $ EnumSet.toList extensionFlags)
compiler/GHC/Iface/Recomp/Flags.hs:71:        prof = if sccProfilingEnabled dflags then fromEnum profAuto else 0
compiler/GHC/Iface/Recomp/Flags.hs:99:        opt_flags = map fromEnum $ filter (`EnumSet.member` optimisationFlags)
compiler/GHC/Iface/Ext/Types.hs:297:  put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Iface/Ext/Types.hs:298:  get bh = do x <- getByte bh; pure $! (toEnum (fromIntegral x))
compiler/GHC/Iface/Ext/Types.hs:609:  put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Iface/Ext/Types.hs:610:  get bh = do x <- getByte bh; pure $! (toEnum (fromIntegral x))
compiler/GHC/Iface/Ext/Types.hs:627:  put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Iface/Ext/Types.hs:628:  get bh = do x <- getByte bh; pure $! (toEnum (fromIntegral x))
compiler/GHC/Iface/Ext/Types.hs:641:  put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Iface/Ext/Types.hs:642:  get bh = do x <- getByte bh; pure $! (toEnum (fromIntegral x))
compiler/GHC/Iface/Ext/Types.hs:664:  put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Iface/Ext/Types.hs:665:  get bh = do x <- getByte bh; pure $! (toEnum (fromIntegral x))
compiler/GHC/Iface/Ext/Ast.hs:1267:      ArithSeq enum _ info ->
compiler/GHC/Iface/Type.hs:2160:-- predicate; e.g.   Num a => a -> a



compiler/GHC/Core/Utils.hs:2728:      :: Find.MyEnum -> Find.MyEnum -> GHC.Prim.Int#
compiler/GHC/Core/Utils.hs:2753:      :: Find.MyEnum -> Find.MyEnum -> GHC.Prim.Int#
compiler/GHC/Core/TyCo/Rep.hs:1599:  - Generate an evidence Id,  d7 :: Num a
compiler/GHC/Core/TyCo/Rep.hs:1600:  - Wrap it in a Wanted constraint, [W] d7 :: Num a
compiler/GHC/Core/TyCo/Rep.hs:1604:    which actually binds d7 to the (Num a) evidence
compiler/GHC/Core/PatSyn.hs:136:      pattern P1 :: (Num a, Eq a) => b -> Maybe (a,b)
compiler/GHC/Core/PatSyn.hs:139:  We require (Num a, Eq a) to match the 3; there is no provided
compiler/GHC/Core/PatSyn.hs:144:        MkT2 :: (Num a, Eq a) => a -> a -> T2
compiler/GHC/Core/PatSyn.hs:146:      pattern P2 :: () => (Num a, Eq a) => a -> T2
compiler/GHC/Core/PatSyn.hs:149:  When we match against P2 we get a Num dictionary provided.
compiler/GHC/Core/PatSyn.hs:243:        requires: (Eq t, Num t)
compiler/GHC/Core/PatSyn.hs:255:  psReqTheta   = (Eq t, Num t)
compiler/GHC/Core/PatSyn.hs:270:        $mP :: forall (r :: ?) t. (Eq t, Num t)
compiler/GHC/Core/PatSyn.hs:278:        $mP @r @t $dEq $dNum scrut cont fail
compiler/GHC/Core/PatSyn.hs:297:        $bP :: forall t b. (Eq t, Num t, Show (Maybe t), Ord b)
compiler/GHC/Core/Opt/Specialise.hs:166:        f a (d::Num a) = let p = +.sel a d
compiler/GHC/Core/Opt/Specialise.hs:194:        g a (d::Num a) (y::a) = let f b (d'::Num b) (x::b) = +.sel b d' x x
compiler/GHC/Core/Opt/Specialise.hs:200:        g a (d::Num a) (y::a) = let f@a (x::a) = +.sel a d x x
compiler/GHC/Core/Opt/Specialise.hs:211:        g a (d::Num a) (y::a) = let +.sel@a = +.sel a d
compiler/GHC/Core/Opt/Specialise.hs:262:        f a (d::Num a) = let g = ...
compiler/GHC/Core/Opt/Specialise.hs:284:                     h :: Num a => a -> a -> (a, Bool)
compiler/GHC/Core/Opt/Specialise.hs:285:                     h dh r s = let deq = eqFromNum dh
compiler/GHC/Core/Opt/Specialise.hs:292:                    h' r s = let deq = eqFromNum df
compiler/GHC/Core/Opt/Specialise.hs:1363:      f :: Num b => b -> (b, b)
compiler/GHC/Core/Opt/Specialise.hs:1370:      g :: Num a => a -> a
compiler/GHC/Core/Opt/Specialise.hs:2130:   f :: forall a b. (Num a, F a ~ F b) => blah
compiler/GHC/Core/Opt/Specialise.hs:2132:   RULE forall (d:Num Int) (g :: F Int ~ F Int).
compiler/GHC/Core/Opt/Specialise.hs:2136:   RULE forall (d:Num Int) (g :: F Int ~ F Int).
compiler/GHC/Core/Opt/Specialise.hs:2281:   class (Show a, Enum a) => MyShow a where
compiler/GHC/Core/Opt/Specialise.hs:2347:   g :: Num a => a -> a
compiler/GHC/Core/Opt/ConstantFold.hs:1880:lift_bits_op :: forall a. (Num a, FiniteBits a) => (a -> Integer) -> RuleM CoreExpr
compiler/GHC/Core/Opt/ConstantFold.hs:1886:pop_count :: forall a. (Num a, FiniteBits a) => RuleM CoreExpr
compiler/GHC/Core/Opt/ConstantFold.hs:1889:ctz :: forall a. (Num a, FiniteBits a) => RuleM CoreExpr
compiler/GHC/Core/Opt/ConstantFold.hs:1892:clz :: forall a. (Num a, FiniteBits a) => RuleM CoreExpr
compiler/GHC/Core/Opt/ConstantFold.hs:2026:    -- dataToTag (tagToEnum x)   ==>   x
compiler/GHC/Core/Opt/ConstantFold.hs:2028:      [Type _lev, Type ty1, Var tag_to_enum `App` Type ty2 `App` tag] <- getArgs
compiler/GHC/Core/Opt/ConstantFold.hs:2029:      guard $ tag_to_enum `hasKey` tagToEnumKey
compiler/GHC/Core/Opt/ConstantFold.hs:3524:   case tagToEnum x of
compiler/GHC/Core/Opt/Arity.hs:2503:        \(d::Num a). f d   -->   f
compiler/GHC/Core/Opt/simplifier.tib:583:  f :: Num a => a -> Bool
compiler/GHC/Core/Opt/CSE.hs:244:the Integer instance of Enum in GHC.Enum.)  Suppose moreover that foo's
compiler/GHC/Core/Opt/CSE.hs:608:   f,g :: Num a => a -> a
compiler/GHC/Core/Opt/SpecConstr.hs:2102:Note that $fNumInteger is a top-level binding for Num Integer.
compiler/GHC/Core/Opt/Simplify/Utils.hs:876:     case (integerSignum a b) of r -> ...
compiler/GHC/Core/Opt/Simplify/Utils.hs:882:    f (integerSigNum a b)
compiler/GHC/Core/Opt/Simplify/Utils.hs:2531:        case tagToEnum (x :: Int#) of (b::Bool)
compiler/GHC/Core/Opt/Simplify/Utils.hs:2787:  case tagToEnum (a ># b) of
compiler/GHC/Core/Opt/Simplify/Utils.hs:2791:then caseRules for TagToEnum will turn it into
compiler/GHC/Core/Opt/Simplify/Utils.hs:2792:  case tagToEnum (a ># b) of
compiler/GHC/Core/Opt/Simplify/Utils.hs:2797:  case tagToEnum (a ># b) of
compiler/GHC/Core/Opt/Simplify/Utils.hs:2804:NOT in the TagToEnum rules (see "Beware" in Note [caseRules for tagToEnum]
compiler/GHC/Core/Opt/OccurAnal.hs:1572:example (the Enum Ordering instance from GHC.Base):
compiler/GHC/Core/Opt/WorkWrap.hs:474:           f :: Num a => a -> Int -> a
compiler/GHC/Core/Opt/CprAnal.hs:963:  const0 n = signum n - 1 -- will return 0 for [1..n]
compiler/GHC/Core/Rules.hs:1277:             f (\(MkT @b (d::Num b) (x::b)) -> h @b d x) = ...
compiler/GHC/Core/TyCon.hs:1037:        is_enum :: Bool,  -- ^ Cached value: is this an enumeration type?
compiler/GHC/Core/TyCon.hs:1131:        is_enum = not (null cons) && all is_enum_con cons,
compiler/GHC/Core/TyCon.hs:1579:   deriving( Data.Data, Eq, Ord, Show, Enum )
compiler/GHC/Core/TyCon.hs:1631:  put_ bh per = putByte bh (fromIntegral (fromEnum per))
compiler/GHC/Core/TyCon.hs:1632:  get  bh = toEnum . fromIntegral <$> getByte bh
compiler/GHC/Core/TyCon.hs:2157:       DataTyCon { is_enum = res } -> res
compiler/GHC/Core/Unify.hs:929:constraint Num (Int |> (blah ; sym blah)).  We naturally want to find
compiler/GHC/Core/Unify.hs:1433:  = UM' { unUM :: UMState -> UnifyResultM (UMState, a) }
compiler/GHC/Core/Unify.hs:1454:                  do { (state', v) <- unUM m state
compiler/GHC/Core/Unify.hs:1455:                     ; unUM (k v) state' })
compiler/GHC/Core/Unify.hs:1464:  = case unUM um state of
compiler/GHC/Core/Unify.hs:1517:  case unUM um state of




compiler/GHC/JS/Make.hs:703:instance Num JStgExpr where
compiler/GHC/JS/Make.hs:709:    signum x = math_sign [x]



compiler/GHC/Driver/Flags.hs:55:  get bh = toEnum <$> get bh
compiler/GHC/Driver/Flags.hs:1006:minusWeverythingOpts = [ toEnum 0 .. ]
compiler/GHC/Driver/Main.hs:2310:hscParseModuleWithLocation hsc_env source line_num str = do
compiler/GHC/Driver/Main.hs:2313:        hscParseThingWithLocation source line_num parseModule str
compiler/GHC/Driver/Main.hs:2317:hscParseDeclsWithLocation hsc_env source line_num str = do
compiler/GHC/Driver/Main.hs:2318:  HsModule { hsmodDecls = decls } <- hscParseModuleWithLocation hsc_env source line_num str
compiler/GHC/Driver/Backpack.hs:149:-- | Tiny enum for all types of Backpack operations we may do.
compiler/GHC/Driver/Config/Core/Rules.hs:20:    -- disable bignum rules in ghc-prim and ghc-bignum itself
compiler/GHC/Driver/Session.hs:3300:    fmap PackageArg (munch1 (\c -> isAlphaNum c || c `elem` ":-_."))



compiler/GHC/Utils/Binary/Typeable.hs:90:    get bh = toEnum . fromIntegral <$> getByte bh
compiler/GHC/Utils/Binary/Typeable.hs:94:    get bh = toEnum . fromIntegral <$> getByte bh
compiler/GHC/Utils/Json.hs:48:    escapeChar c | isControl c || fromEnum c >= 0x7f  = uni_esc c
compiler/GHC/Utils/Json.hs:51:    uni_esc c = "\\u" ++ (pad 4 (showHex (fromEnum c) ""))
compiler/GHC/Utils/Misc.hs:837:  :: (Bits bv, Num bv) => bv -> Int -> Int -> String -> String -> Int
compiler/GHC/Utils/Misc.hs:850:      :: (Bits bv, Num bv) => IM.IntMap bv -> bv -> bv
compiler/GHC/Utils/Misc.hs:879:matchVectors :: (Bits bv, Num bv) => String -> IM.IntMap bv
compiler/GHC/Utils/Misc.hs:992:        go (c:cs)   = (isAlphaNum c || c == '_' || c == '\'') && go cs
compiler/GHC/Utils/Misc.hs:997:looksLikePackageName = all (all isAlphaNum <&&> not . (all isDigit)) . split '-'
compiler/GHC/Utils/Misc.hs:1113:     let frontNum = steps 16 0 front
compiler/GHC/Utils/Misc.hs:1118:             let backNum = steps 16 frontNum back
compiler/GHC/Utils/Misc.hs:1121:               p : ps | isExp p -> fmap (mk backNum . (+ exp1)) (getExp ps)
compiler/GHC/Utils/Misc.hs:1122:               _ -> return (mk backNum exp1)
compiler/GHC/Utils/Misc.hs:1179:     let frontNum = steps 16 0 front
compiler/GHC/Utils/Misc.hs:1184:             let backNum = steps 16 frontNum back
compiler/GHC/Utils/Misc.hs:1187:               p : ps | isExp p -> fmap (mk backNum . (+ exp1)) (getExp ps)
compiler/GHC/Utils/Misc.hs:1188:               _ -> return (mk backNum exp1)
compiler/GHC/Utils/Binary.hs:753:    put_ bh b = putByte bh (fromIntegral (fromEnum b))
compiler/GHC/Utils/Binary.hs:754:    get  bh   = do x <- getWord8 bh; return $! (toEnum (fromIntegral x))



compiler/GHC/Runtime/Heap/Inspect.hs:966:--     sumNumList :: Num a => [a] -> a
compiler/GHC/Runtime/Heap/Layout.hs:87:wordsToBytes :: Num a => Platform -> a -> a
compiler/GHC/Runtime/Eval.hs:249:runDeclsWithLocation source line_num input = do
compiler/GHC/Runtime/Eval.hs:251:    decls <- liftIO (hscParseDeclsWithLocation hsc_env source line_num input)



compiler/GHC/Parser/Lexer.x:523:  -- Normal integral literals (:: Num a => a, from Integer)
compiler/GHC/Parser/Lexer.x:524:  @decimal                                                      { tok_num positive 0 0 decimal }
compiler/GHC/Parser/Lexer.x:525:  @binarylit                / { ifExtension BinaryLiteralsBit } { tok_num positive 2 2 binary }
compiler/GHC/Parser/Lexer.x:526:  @octallit                                                     { tok_num positive 2 2 octal }
compiler/GHC/Parser/Lexer.x:527:  @hexadecimallit                                               { tok_num positive 2 2 hexadecimal }
compiler/GHC/Parser/Lexer.x:528:  @negative @decimal        / { negLitPred }                    { tok_num negative 1 1 decimal }
compiler/GHC/Parser/Lexer.x:530:                                ifExtension BinaryLiteralsBit } { tok_num negative 3 3 binary }
compiler/GHC/Parser/Lexer.x:531:  @negative @octallit       / { negLitPred }                    { tok_num negative 3 3 octal }
compiler/GHC/Parser/Lexer.x:532:  @negative @hexadecimallit / { negLitPred }                    { tok_num negative 3 3 hexadecimal }
compiler/GHC/Parser/Lexer.x:1293:        (c, _) -> isAlphaNum c
compiler/GHC/Parser/Lexer.x:1307:    c -> isAlphaNum c
compiler/GHC/Parser/Lexer.x:1918:tok_num :: (Integer -> Integer)
compiler/GHC/Parser/Lexer.x:1921:tok_num = tok_integral $ \case
compiler/GHC/Parser/Lexer.x:2100:      linenum = parseUnsignedInteger buf linenumLen 10 octDecDigit
compiler/GHC/Parser/Lexer.x:2116:  setSrcLoc (mkRealSrcLoc file (fromIntegral linenum - 1) (srcSpanEndCol span))
compiler/GHC/Parser/Lexer.x:2367:        'x'   -> readNum is_hexdigit 16 hexDigit
compiler/GHC/Parser/Lexer.x:2368:        'o'   -> readNum is_octdigit  8 octDecDigit
compiler/GHC/Parser/Lexer.x:2390:readNum :: (Char -> Bool) -> Int -> (Char -> Int) -> P Char
compiler/GHC/Parser/Lexer.x:2391:readNum is_digit base conv = do
compiler/GHC/Parser/Lexer.x:2999:xtest ext xmap = testBit xmap (fromEnum ext)
compiler/GHC/Parser/Lexer.x:3002:xset ext xmap = setBit xmap (fromEnum ext)
compiler/GHC/Parser/Lexer.x:3005:xunset ext xmap = clearBit xmap (fromEnum ext)
compiler/GHC/Parser/Lexer.x:3767:          pragmaNameChar c = isAlphaNum c || c == '_'
compiler/GHC/Parser/CharClass.hs:11:        , is_alphanum   -- Char# -> Bool
compiler/GHC/Parser/CharClass.hs:42:    is_alphanum :: Char -> Bool
compiler/GHC/Parser/CharClass.hs:50:is_alphanum = is_ctype (cLower+cUpper+cDigit)
compiler/GHC/Parser/PostProcess/Haddock.hs:964:      -- (Eq a, Num a) => t
compiler/GHC/Parser/PostProcess.hs:2851:   id_char       c = isAlphaNum c || c == '_'




compiler/GHC/HsToCore/Match/Literal.hs:218:        !num   = mkIntegerExpr platform (numerator val)
compiler/GHC/HsToCore/Match/Literal.hs:387:        check :: forall a. (Integral a, Num a) => DsM ()
compiler/GHC/HsToCore/Match/Literal.hs:393:            wrap :: forall a. (Integral a, Num a) => Integer -> Integer
compiler/GHC/HsToCore/Monad.hs:265:             -- re-use existing next_wrapper_num to ensure uniqueness
compiler/GHC/HsToCore/Monad.hs:266:             next_wrapper_num_var = tcg_next_wrapper_num tcg_env
compiler/GHC/HsToCore/Monad.hs:292:       ; next_wrapper_num <- newIORef emptyModuleEnv
compiler/GHC/HsToCore/Monad.hs:308:                              next_wrapper_num complete_matches
compiler/GHC/HsToCore/Monad.hs:351:         next_wrapper_num complete_matches
compiler/GHC/HsToCore/Monad.hs:371:                           , ds_next_wrapper_num = next_wrapper_num
compiler/GHC/HsToCore/Foreign/C.hs:275:               do nextWrapperNum <- ds_next_wrapper_num <$> getGblEnv
compiler/GHC/HsToCore/Foreign/C.hs:276:                  wrapperName <- mkWrapperName nextWrapperNum "ghc_wrapper" (unpackFS cName)
compiler/GHC/HsToCore/Foreign/Wasm.hs:370:  cfun_num <- ds_next_wrapper_num <$> getGblEnv
compiler/GHC/HsToCore/Foreign/Wasm.hs:371:  mkWrapperName cfun_num "ghc_wasm_jsffi" ""
compiler/GHC/HsToCore/Types.hs:66:  , ds_next_wrapper_num :: IORef (ModuleEnv Int)
compiler/GHC/HsToCore/Errors/Types.hs:43:            let enum = [5 .. 3]
compiler/GHC/HsToCore/Errors/Types.hs:171:newtype DsArgNum = DsArgNum Int
compiler/GHC/HsToCore/Pmc/Solver/Types.hs:537:  instance Num Bool where
compiler/GHC/HsToCore/Binds.hs:485:       tup a (d:Num a) = let fm = ...gm...
compiler/GHC/HsToCore/Binds.hs:1109:   forall f (d1::Num Int) (d2 :: Num Int).




compiler/GHC/Cmm/LayoutStack.hs:1195:       [id] [baseExpr platform, mkIntExpr platform (fromEnum intrbl)]
compiler/GHC/Cmm/Dominators.hs:70:newtype RPNum = RPNum Int
compiler/GHC/Cmm/Dominators.hs:74:instance Show RPNum where
compiler/GHC/Cmm/Dominators.hs:75:  show (RPNum i) = "RP" ++ show i
compiler/GHC/Cmm/Dominators.hs:77:instance Outputable RPNum where
compiler/GHC/Cmm/Dominators.hs:78:  ppr (RPNum i) = hcat [text "RP", int i]
compiler/GHC/Cmm/Dominators.hs:143:              where kvpair block i = (entryLabel block, RPNum i)
compiler/GHC/Cmm/Reducibility.hs:67:        goodEdge from to = rpnum to > rpnum from || to `dominates` from
compiler/GHC/Cmm/Reducibility.hs:68:        rpnum = gwdRPNumber gwd
compiler/GHC/Cmm/ProcPoint.hs:374:  let add_block_num (i, map) block =
compiler/GHC/Cmm/ProcPoint.hs:377:          foldl' add_block_num (0::Int, mapEmpty :: LabelMap Int)
compiler/GHC/Cmm/CLabel.hs:518:  | ClosureTable        -- ^ Table of closures for Enum tycons




compiler/GHC/StgToJS/Prim.hs:1017:------------------------------ Tag to enum stuff --------------------------------
compiler/GHC/StgToJS/Closure.hs:88:        to_type_list = concatMap (\x -> replicate (varSize x) (fromEnum x))
compiler/GHC/StgToJS/Types.hs:377:ctNum :: ClosureType -> Int
compiler/GHC/StgToJS/Types.hs:378:ctNum Fun        = 1
compiler/GHC/StgToJS/Types.hs:379:ctNum Con        = 2
compiler/GHC/StgToJS/Types.hs:380:ctNum Thunk      = 0
compiler/GHC/StgToJS/Types.hs:381:ctNum Pap        = 3
compiler/GHC/StgToJS/Types.hs:382:ctNum Blackhole  = 5
compiler/GHC/StgToJS/Types.hs:383:ctNum StackFrame = -1
compiler/GHC/StgToJS/Types.hs:396:  toJExpr e = toJExpr (ctNum e)
compiler/GHC/StgToJS/Types.hs:408:threadStatusNum :: ThreadStatus -> Int
compiler/GHC/StgToJS/Types.hs:409:threadStatusNum = \case
compiler/GHC/StgToJS/Sinker.hs:71:  StgRhsCon _ccs dc cnum _ticks as@[StgLitArg l] _typ
compiler/GHC/StgToJS/Sinker.hs:75:    -> [(b,StgConApp dc cnum as [])]
compiler/GHC/StgToJS/Sinker.hs:91:      StgRhsCon _ccs dc cnum _ticks args _typ -> Just (StgConApp dc cnum args [])
compiler/GHC/StgToJS/Sinker.hs:174:    collectDeps (StgNonRec b (StgRhsCon _cc _dc _cnum _ticks args _typ)) =
compiler/GHC/StgToJS/Linker/Utils.hs:105:        mk_closure_def t = mk_int_def (ctJsName t) (ctNum t)
compiler/GHC/StgToJS/Linker/Utils.hs:108:        mk_thread_def t  = mk_int_def (threadStatusJsName t) (threadStatusNum t)
compiler/GHC/StgToJS/Object.hs:412:putEnum :: Enum a => WriteBinHandle -> a -> IO ()
compiler/GHC/StgToJS/Object.hs:413:putEnum bh x | n > 65535 = error ("putEnum: out of range: " ++ show n)
compiler/GHC/StgToJS/Object.hs:415:  where n = fromIntegral $ fromEnum x :: Word16
compiler/GHC/StgToJS/Object.hs:417:getEnum :: Enum a => ReadBinHandle -> IO a
compiler/GHC/StgToJS/Object.hs:418:getEnum bh = toEnum . fromIntegral <$> (get bh :: IO Word16)
compiler/GHC/StgToJS/Object.hs:454:    put_ bh span >> put_ bh pat >> putEnum bh safety >> putEnum bh cconv >> put_ bh arg_tys >> put_ bh res_ty
compiler/GHC/StgToJS/Object.hs:455:  get bh = ForeignJSRef <$> get bh <*> get bh <*> getEnum bh <*> getEnum bh <*> get bh <*> get bh
compiler/GHC/StgToJS/Object.hs:549:  put_ bh = putEnum bh
compiler/GHC/StgToJS/Object.hs:550:  get bh = getEnum bh
compiler/GHC/StgToJS/Object.hs:553:  put_ bh = putEnum bh
compiler/GHC/StgToJS/Object.hs:554:  get bh = getEnum bh
compiler/GHC/StgToJS/Object.hs:565:  put_ bh = putEnum bh
compiler/GHC/StgToJS/Object.hs:566:  get bh = getEnum bh
compiler/GHC/StgToJS/Object.hs:569:  put_ bh = putEnum bh
compiler/GHC/StgToJS/Object.hs:570:  get bh = getEnum bh
compiler/GHC/StgToJS/Object.hs:573:  put_ bh = putEnum bh
compiler/GHC/StgToJS/Object.hs:574:  get bh = getEnum bh
compiler/GHC/StgToJS/Regs.hs:100:intToJSReg r = toEnum (r - 1)
compiler/GHC/StgToJS/Regs.hs:136:      | fromEnum r < 32 = var . mkFastString . ("h$"++) . map toLower . show $ r
compiler/GHC/StgToJS/Regs.hs:138:                            (toJExpr ((fromEnum r) - 32))
compiler/GHC/StgToJS/Ids.hs:103:makeIdentForId i num id_type current_module = global ident
compiler/GHC/StgToJS/Ids.hs:121:      , case num of



compiler/GHC/Types/SafeHaskell.hs:58:trustInfoToNum :: IfaceTrustInfo -> Word8
compiler/GHC/Types/SafeHaskell.hs:59:trustInfoToNum it
compiler/GHC/Types/SafeHaskell.hs:85:    put_ bh iftrust = putByte bh $ trustInfoToNum iftrust
compiler/GHC/Types/Unique/Supply.hs:284:  = do { uqNum <- genSym
compiler/GHC/Types/Unique/Supply.hs:285:       ; return $! mkUnique tag uqNum }
compiler/GHC/Types/Name/Occurrence.hs:972:     '$':c:_ | isAlphaNum c -> True   -- E.g.  $wfoo
compiler/GHC/Types/Name/Occurrence.hs:973:     c:':':_ | isAlphaNum c -> True   -- E.g.  N:blah   newtype coercions
compiler/GHC/Types/Id/Make.hs:560:    arg_ids        = mkTemplateLocalsNum 2 (map scaledThing arg_tys)
compiler/GHC/Types/Literal.hs:166:  = LitNumBigNat  -- ^ @Bignat@ (see Note [BigNum literals])
compiler/GHC/Types/Literal.hs:210:   put_ bh numTyp = putByte bh (fromIntegral (fromEnum numTyp))
compiler/GHC/Types/Literal.hs:213:      return (toEnum (fromIntegral h))
compiler/GHC/Types/Literal.hs:216:Note [BigNum literals]
compiler/GHC/Types/Literal.hs:358:    wrap :: forall a. (Integral a, Num a) => Literal
compiler/GHC/Types/Id.hs:396:mkTemplateLocals = mkTemplateLocalsNum 1
compiler/GHC/Types/Id.hs:399:mkTemplateLocalsNum :: Int -> [Type] -> [Id]
compiler/GHC/Types/Id.hs:400:mkTemplateLocalsNum n tys = zipWith mkTemplateLocal [n..] tys
compiler/GHC/Types/CostCentre.hs:362:        let !flav_index = fromEnum flav
compiler/GHC/Types/CostCentre.hs:370:                IndexedCC <$> (toEnum <$> get bh) <*> get bh
compiler/GHC/Types/Basic.hs:236:    forall a.   (Num a)        => a            has arity <= 1
compiler/GHC/Types/Basic.hs:237:    forall a.   (Num a)        => a -> a       has arity <= 2
compiler/GHC/Types/Basic.hs:238:    forall a b. (Num a, Ord b) => a -> b -> a  has arity <= 4
compiler/GHC/Types/Basic.hs:265:    forall a. Num a => a -> a   -- vis-arity == 1   (1 funarg)
compiler/GHC/Types/Basic.hs:266:    forall a -> Num a => a      -- vis-arity == 1   (1 req tyarg, 0 funargs)
compiler/GHC/Types/Basic.hs:1432:type PhaseNum = Int  -- Compilation phase
compiler/GHC/Types/Basic.hs:1438:  | Phase PhaseNum  -- User-specificable phases
compiler/GHC/Types/Basic.hs:1450:  | ActiveBefore SourceText PhaseNum  -- Active only *strictly before* this phase
compiler/GHC/Types/Basic.hs:1451:  | ActiveAfter  SourceText PhaseNum  -- Active in this phase and later
compiler/GHC/Types/Basic.hs:1509:activeInPhase :: PhaseNum -> Activation -> Bool
compiler/GHC/Types/Basic.hs:2054:instance Num IntWithInf where
compiler/GHC/Types/Basic.hs:2061:  signum Infinity = Int 1
compiler/GHC/Types/Basic.hs:2062:  signum (Int n)  = Int (signum n)
compiler/GHC/Types/ForeignCall.hs:74:  deriving ( Eq, Show, Data, Enum )
compiler/GHC/Types/ForeignCall.hs:203:    ok c = isAlphaNum c || c == '_' || c == '.'




compiler/GHC/Unit/Parser.hs:34:   s <- Parse.munch1 (\c -> isAlphaNum c || c `elem` "-_.+")
compiler/GHC/Unit/Module/Warnings.hs:152:    is_allowed c = isAlphaNum c || c == '\'' || c == '-'



compiler/GHC/CmmToAsm/CFG/Dominators.hs:302:  let (g,rnmap) = renum 1 g0
compiler/GHC/CmmToAsm/CFG/Dominators.hs:521:-- | renum n g: Rename all nodes
compiler/GHC/CmmToAsm/CFG/Dominators.hs:526:renum :: Int -> Graph -> (CGraph, NodeMap CNode)
compiler/GHC/CmmToAsm/CFG/Dominators.hs:527:renum from = (\(_,m,g)->(g,m))
compiler/GHC/CmmToAsm/PPC/CodeGen.hs:1607:-- TODO: replace 'Int' by an enum such as 'PPC_64ABI'
compiler/GHC/CmmToAsm/Reg/Graph/Base.hs:62:         $ fromEnum c * 1000 + i
compiler/GHC/CmmToAsm/Reg/Graph/Base.hs:66:         $ fromEnum s * 10000 + fromEnum c * 1000 + i
compiler/GHC/StgToCmm/Lit.hs:77:      num_rep_lit other     = pprPanic "num_rep_lit: Not a num lit" (ppr other)
compiler/GHC/StgToCmm/Prim.hs:1641:    --         intToTg :: Enum a => Int -> a ; intToTg (I# x#) = tagToEnum# x#
compiler/GHC/StgToCmm/Prim.hs:1881:                            -> FCode [CmmExpr]) -- just for TagToEnum for now
compiler/GHC/Rename/Names.hs:1912:       -- Num is not itself mentioned.  Hence the two cases in add_unused_with.
compiler/GHC/Hs/Pat.hs:206:      higherRank :: (forall a. (Num a, Bounded a) => a -> a) -> (Int8, Int16)
compiler/GHC/Hs/Utils.hs:968:       f :: Num a => (# a, a #)
compiler/GHC/Hs/Utils.hs:969:       g :: Num a => a -> a
compiler/GHC/Hs/Utils.hs:973:    The top-level bindings for f,g are not unlifted (because of the Num a =>),
compiler/GHC/Hs/Utils.hs:975:      t = /\a \(d:Num a).
compiler/GHC/Hs/Utils.hs:1021:    -- binding might not be: e.g. forall a. Num a => (# a, a #)
compiler/GHC/Hs/Utils.hs:1362:           C :: Num a => a -> Int -> T a
compiler/GHC/Hs/Utils.hs:1366:   Here, the pattern (C (n+1)) binds a hidden dictionary (d::Num a),
compiler/GHC/Hs/Binds.hs:362:  x :: Num a => (# a, a #)
compiler/GHC/Hs/Binds.hs:367:  x = /\a. \ ($dNum :: Num a) ->
compiler/GHC/Hs/Binds.hs:368:      letrec xm = (# fromInteger $dNum 3, fromInteger $dNum 4 #) in
compiler/GHC/Hs/Binds.hs:374:  x = /\ a. \ ($dNum :: Num a) ->
compiler/GHC/Hs/Binds.hs:375:     (# fromInteger $dNum 3, fromInteger $dNum 4 #)
compiler/GHC/StgToByteCode.hs:350:collect (StgRhsCon _cc dc cnum _ticks args _typ) = ([], StgConApp dc cnum args [])
compiler/GHC/StgToByteCode.hs:579:                      (StgNonRec x (StgRhsCon _cc data_con _cnum _ticks args _typ))
compiler/GHC/StgToByteCode.hs:1705:-- Detect and extract relevant info for the tagToEnum kludge.



compiler/GHC/CmmToLlvm/Base.hs:215:            | fpr_num c1 == fpr_num c2
compiler/GHC/CmmToLlvm/Base.hs:222:            | fpr_num c == f = go cs f                    -- already covered by a real register
compiler/GHC/CmmToLlvm/Base.hs:233:    fpr_num :: GlobalReg -> Int
compiler/GHC/CmmToLlvm/Base.hs:234:    fpr_num (FloatReg i)  = i
compiler/GHC/CmmToLlvm/Base.hs:235:    fpr_num (DoubleReg i) = i
compiler/GHC/CmmToLlvm/Base.hs:236:    fpr_num (XmmReg i)    = i
compiler/GHC/CmmToLlvm/Base.hs:237:    fpr_num (YmmReg i)    = i
compiler/GHC/CmmToLlvm/Base.hs:238:    fpr_num (ZmmReg i)    = i
compiler/GHC/CmmToLlvm/Base.hs:239:    fpr_num _ = error "fpr_num expected only FPR regs"



compiler/GHC/CoreToStg.hs:387:-- No bignum literal should be left by the time this is called.
compiler/GHC/Data/Graph/Ops.hs:649:        -> UniqFM Int (Int, Int)    -- ^ (conflict neighbours, num nodes with that many conflicts)



compiler/GHC/Data/EnumSet.hs:23:member :: Enum a => a -> EnumSet a -> Bool
compiler/GHC/Data/EnumSet.hs:24:member x (EnumSet s) = IntSet.member (fromEnum x) s
compiler/GHC/Data/EnumSet.hs:26:insert :: Enum a => a -> EnumSet a -> EnumSet a
compiler/GHC/Data/EnumSet.hs:27:insert x (EnumSet s) = EnumSet $ IntSet.insert (fromEnum x) s
compiler/GHC/Data/EnumSet.hs:29:delete :: Enum a => a -> EnumSet a -> EnumSet a
compiler/GHC/Data/EnumSet.hs:30:delete x (EnumSet s) = EnumSet $ IntSet.delete (fromEnum x) s
compiler/GHC/Data/EnumSet.hs:32:toList :: Enum a => EnumSet a -> [a]
compiler/GHC/Data/EnumSet.hs:33:toList (EnumSet s) = map toEnum $ IntSet.toList s
compiler/GHC/Data/EnumSet.hs:35:fromList :: Enum a => [a] -> EnumSet a
compiler/GHC/Data/Bool.hs:18:    , Enum    -- ^ @since 9.4.1



compiler/GHC/Builtin/Names.hs:8:the big-num package or (for plugins) the ghc package.
compiler/GHC/Builtin/Names.hs:299:        -- Enum stuff
compiler/GHC/Builtin/Names.hs:597:gHC_INTERNAL_ENUM                   = mkGhcInternalModule (fsLit "GHC.Internal.Enum")
compiler/GHC/Builtin/Names.hs:602:gHC_INTERNAL_NUM                    = mkGhcInternalModule (fsLit "GHC.Internal.Num")
compiler/GHC/Builtin/Names.hs:762:fromEnum_RDR            = varQual_RDR gHC_INTERNAL_ENUM (fsLit "fromEnum")
compiler/GHC/Builtin/Names.hs:763:toEnum_RDR              = varQual_RDR gHC_INTERNAL_ENUM (fsLit "toEnum")
compiler/GHC/Builtin/Names.hs:772:times_RDR               = varQual_RDR  gHC_INTERNAL_NUM (fsLit "*")
compiler/GHC/Builtin/Names.hs:773:plus_RDR                = varQual_RDR gHC_INTERNAL_NUM (fsLit "+")
compiler/GHC/Builtin/Names.hs:784:succ_RDR                = varQual_RDR gHC_INTERNAL_ENUM (fsLit "succ")
compiler/GHC/Builtin/Names.hs:785:pred_RDR                = varQual_RDR gHC_INTERNAL_ENUM (fsLit "pred")
compiler/GHC/Builtin/Names.hs:786:minBound_RDR            = varQual_RDR gHC_INTERNAL_ENUM (fsLit "minBound")
compiler/GHC/Builtin/Names.hs:787:maxBound_RDR            = varQual_RDR gHC_INTERNAL_ENUM (fsLit "maxBound")
compiler/GHC/Builtin/Names.hs:1140:numClassName      = clsQual gHC_INTERNAL_NUM (fsLit "Num")         numClassKey
compiler/GHC/Builtin/Names.hs:1141:fromIntegerName   = varQual gHC_INTERNAL_NUM (fsLit "fromInteger") fromIntegerClassOpKey
compiler/GHC/Builtin/Names.hs:1142:minusName         = varQual gHC_INTERNAL_NUM (fsLit "-")           minusClassOpKey
compiler/GHC/Builtin/Names.hs:1143:negateName        = varQual gHC_INTERNAL_NUM (fsLit "negate")      negateClassOpKey
compiler/GHC/Builtin/Names.hs:1483:-- Enum module (Enum, Bounded)
compiler/GHC/Builtin/Names.hs:1486:enumClassName      = clsQual gHC_INTERNAL_ENUM (fsLit "Enum")           enumClassKey
compiler/GHC/Builtin/Names.hs:1487:enumFromName       = varQual gHC_INTERNAL_ENUM (fsLit "enumFrom")       enumFromClassOpKey
compiler/GHC/Builtin/Names.hs:1488:enumFromToName     = varQual gHC_INTERNAL_ENUM (fsLit "enumFromTo")     enumFromToClassOpKey
compiler/GHC/Builtin/Names.hs:1489:enumFromThenName   = varQual gHC_INTERNAL_ENUM (fsLit "enumFromThen")   enumFromThenClassOpKey
compiler/GHC/Builtin/Names.hs:1490:enumFromThenToName = varQual gHC_INTERNAL_ENUM (fsLit "enumFromThenTo") enumFromThenToClassOpKey
compiler/GHC/Builtin/Names.hs:1491:boundedClassName   = clsQual gHC_INTERNAL_ENUM (fsLit "Bounded")        boundedClassKey
compiler/GHC/Builtin/Names.hs:2587:-- ghc-bignum uses 600-699 uniques
compiler/GHC/Builtin/Names.hs:2784:-- defaulting. Does not include Num or IsString, which have special



compiler/GHC/Builtin/Types/Literals.hs:441:              \x y -> Just $ num (x + y)
compiler/GHC/Builtin/Types/Literals.hs:444:              \x y -> Just $ num (x * y)
compiler/GHC/Builtin/Types/Literals.hs:447:              \x y -> Just $ num (x ^ y)
compiler/GHC/Builtin/Types/Literals.hs:486:    \c -> Just $ num (charToInteger c)
compiler/GHC/Builtin/Types/Literals.hs:493:              \x y -> fmap num (minus x y)
compiler/GHC/Builtin/Types/Literals.hs:497:                         return (num (div x y))
compiler/GHC/Builtin/Types/Literals.hs:501:                         return (num (mod x y))
compiler/GHC/Builtin/Types/Literals.hs:505:                       return (num a)
compiler/GHC/Builtin/Types/Literals.hs:507:axAdd0L     = mkAxiom1 "Add0L"    $ \(Pair s t) -> (num 0 .+. s) === t
compiler/GHC/Builtin/Types/Literals.hs:508:axAdd0R     = mkAxiom1 "Add0R"    $ \(Pair s t) -> (s .+. num 0) === t
compiler/GHC/Builtin/Types/Literals.hs:509:axSub0R     = mkAxiom1 "Sub0R"    $ \(Pair s t) -> (s .-. num 0) === t
compiler/GHC/Builtin/Types/Literals.hs:510:axMul0L     = mkAxiom1 "Mul0L"    $ \(Pair s _) -> (num 0 .*. s) === num 0
compiler/GHC/Builtin/Types/Literals.hs:511:axMul0R     = mkAxiom1 "Mul0R"    $ \(Pair s _) -> (s .*. num 0) === num 0
compiler/GHC/Builtin/Types/Literals.hs:512:axMul1L     = mkAxiom1 "Mul1L"    $ \(Pair s t) -> (num 1 .*. s) === t
compiler/GHC/Builtin/Types/Literals.hs:513:axMul1R     = mkAxiom1 "Mul1R"    $ \(Pair s t) -> (s .*. num 1) === t
compiler/GHC/Builtin/Types/Literals.hs:514:axDiv1      = mkAxiom1 "Div1"     $ \(Pair s t) -> (tDiv s (num 1) === t)
compiler/GHC/Builtin/Types/Literals.hs:515:axMod1      = mkAxiom1 "Mod1"     $ \(Pair s _) -> (tMod s (num 1) === num 0)
compiler/GHC/Builtin/Types/Literals.hs:517:axExp1L     = mkAxiom1 "Exp1L"    $ \(Pair s _) -> (num 1 .^. s) === num 1
compiler/GHC/Builtin/Types/Literals.hs:518:axExp0R     = mkAxiom1 "Exp0R"    $ \(Pair s _) -> (s .^. num 0) === num 1
compiler/GHC/Builtin/Types/Literals.hs:519:axExp1R     = mkAxiom1 "Exp1R"    $ \(Pair s t) -> (s .^. num 1) === t
compiler/GHC/Builtin/Types/Literals.hs:604:num :: Integer -> Type
compiler/GHC/Builtin/Types/Literals.hs:605:num = mkNumLitTy
compiler/GHC/Builtin/Types/Literals.hs:688:    Just (axAddDef, [s,t], num (x + y))
compiler/GHC/Builtin/Types/Literals.hs:697:    Just (axSubDef, [s,t], num z)
compiler/GHC/Builtin/Types/Literals.hs:704:  | Just 0 <- mbX = Just (axMul0L, [t], num 0)
compiler/GHC/Builtin/Types/Literals.hs:705:  | Just 0 <- mbY = Just (axMul0R, [s], num 0)
compiler/GHC/Builtin/Types/Literals.hs:709:    Just (axMulDef, [s,t], num (x * y))
compiler/GHC/Builtin/Types/Literals.hs:717:  | Just x <- mbX, Just y <- mbY, y /= 0 = Just (axDivDef, [s,t], num (div x y))
compiler/GHC/Builtin/Types/Literals.hs:724:  | Just 1 <- mbY = Just (axMod1, [s], num 0)
compiler/GHC/Builtin/Types/Literals.hs:725:  | Just x <- mbX, Just y <- mbY, y /= 0 = Just (axModDef, [s,t], num (mod x y))
compiler/GHC/Builtin/Types/Literals.hs:732:  | Just 0 <- mbY = Just (axExp0R, [s], num 1)
compiler/GHC/Builtin/Types/Literals.hs:733:  | Just 1 <- mbX = Just (axExp1L, [t], num 1)
compiler/GHC/Builtin/Types/Literals.hs:736:    Just (axExpDef, [s,t], num (x ^ y))
compiler/GHC/Builtin/Types/Literals.hs:743:  | Just x <- mbX, Just (n,_) <- genLog x 2 = Just (axLogDef, [s], num n)
compiler/GHC/Builtin/Types/Literals.hs:828:  | Just 0 <- mbZ = [ s === num 0, t === num 0 ]                          -- (s + t ~ 0) => (s ~ 0, t ~ 0)
compiler/GHC/Builtin/Types/Literals.hs:829:  | Just x <- mbX, Just z <- mbZ, Just y <- minus z x = [t === num y]     -- (5 + t ~ 8) => (t ~ 3)
compiler/GHC/Builtin/Types/Literals.hs:830:  | Just y <- mbY, Just z <- mbZ, Just x <- minus z y = [s === num x]     -- (s + 5 ~ 8) => (s ~ 3)
compiler/GHC/Builtin/Types/Literals.hs:870:  | Just z <- mbZ = [ s === (num z .+. t) ]         -- (s - t ~ 5) => (5 + t ~ s)
compiler/GHC/Builtin/Types/Literals.hs:881:  | Just 1 <- mbZ = [ s === num 1, t === num 1 ]                        -- (s * t ~ 1)  => (s ~ 1, t ~ 1)
compiler/GHC/Builtin/Types/Literals.hs:882:  | Just x <- mbX, Just z <- mbZ, Just y <- divide z x = [t === num y]  -- (3 * t ~ 15) => (t ~ 5)
compiler/GHC/Builtin/Types/Literals.hs:883:  | Just y <- mbY, Just z <- mbZ, Just x <- divide z y = [s === num x]  -- (s * 3 ~ 15) => (s ~ 5)
compiler/GHC/Builtin/Types/Literals.hs:898:  | Just 0 <- mbZ = [ s === num 0 ]                                       -- (s ^ t ~ 0) => (s ~ 0)
compiler/GHC/Builtin/Types/Literals.hs:899:  | Just x <- mbX, Just z <- mbZ, Just y <- logExact  z x = [t === num y] -- (2 ^ t ~ 8) => (t ~ 3)
compiler/GHC/Builtin/Types/Literals.hs:900:  | Just y <- mbY, Just z <- mbZ, Just x <- rootExact z y = [s === num x] -- (s ^ 2 ~ 9) => (s ~ 3)
compiler/GHC/Builtin/Types.hs:912:      , num >= 2 && num <= 64
compiler/GHC/Builtin/primops.txt.pp:3696:section "Tag to enum stuff"





compiler/GHC/SysTools/Process.hs:341:                    let srcLoc = mkSrcLoc (mkFastString file) lineNum colNum
compiler/GHC/SysTools/Ar.hs:119:-- extended names. Those are referred to as /<num>, where num is the
compiler/GHC/SysTools/Ar.hs:258:  where go status = ( fromEnum $ POSIX.modificationTime status
config.sub:383:			magnum | m3230)
docs/opt-coercion/lipics.cls:43:  \ifnum \@enumdepth >\thr@@\@toodeep\else
docs/opt-coercion/lipics.cls:64:  \ifnum \@itemdepth >\thr@@\@toodeep\else
docs/opt-coercion/lipics.cls:85:  \ifnum #2>\c@secnumdepth
docs/opt-coercion/lipics.cls:96:          \ifnum #2=1
docs/opt-coercion/lipics.cls:105:      \ifnum #2>\c@secnumdepth \else
docs/opt-coercion/lipics.cls:115:        \ifnum #2>\c@secnumdepth \else
docs/opt-coercion/lipics.cls:267:      \ifnum \col@number=\@ne
docs/opt-coercion/lipics.cls:531:   \gdef\@Eds{Editor}\ifnum #2>1 \gdef\@Eds{Editors}\fi
docs/opt-coercion/prooftree.sty:125:\ifnum  \lastpenalty=1
docs/users_guide/exts/pattern_synonyms.rst:284:      data MyNum = MkNum Int
docs/users_guide/exts/pattern_synonyms.rst:287:      pattern Zero = MkNum 0
docs/users_guide/exts/pattern_synonyms.rst:358:    f1 :: (Num a, Eq a) => T a -> String
docs/users_guide/exts/pattern_synonyms.rst:361:    pattern ExNumPat :: (Num a, Eq a) => (Show b) => b -> T a
docs/users_guide/exts/pattern_synonyms.rst:364:    f2 :: (Eq a, Num a) => T a -> String
docs/users_guide/exts/pattern_synonyms.rst:369:``(Num a, Eq a)``, so they appear in ``f1``'s type. The call to ``show``
docs/users_guide/exts/pattern_synonyms.rst:376:``ExNumPat`` *requires* the constraints ``(Num a, Eq a)``, and
docs/users_guide/exts/pattern_synonyms.rst:435:         ExNumPat :: (Num a, Eq a, Show b) => b -> T t
docs/users_guide/exts/default_signatures.rst:16:      class Enum a where
docs/users_guide/exts/default_signatures.rst:17:        enum :: [a]
docs/users_guide/exts/default_signatures.rst:18:        enum = []
docs/users_guide/exts/default_signatures.rst:30:      class Enum a where
docs/users_guide/exts/default_signatures.rst:31:        enum :: [a]
docs/users_guide/exts/default_signatures.rst:32:        default enum :: (Generic a, GEnum (Rep a)) => [a]
docs/users_guide/exts/default_signatures.rst:33:        enum = map to genum
docs/users_guide/exts/default_signatures.rst:40:``(Generic a, GEnum (Rep a)) => [a]``.
docs/users_guide/exts/let_generalisation.rst:59:``f1`` has free variable ``(+)``, but it is imported and hence closed.  So ``f1``'s binding is generalised. As a result, its type ``f1 :: forall a. Num a => a -> a`` has no free type variables, so ``f1`` is closed.  Hence ``f2``'s binding is generalised (since its free variables, ``f1`` and ``(*)`` are both closed).
docs/users_guide/exts/partial_type_signatures.rst:237:    --   forall a. (Enum a, Eq a, Show a) => a -> String
docs/users_guide/exts/partial_type_signatures.rst:240:        Found constraint wildcard ‘_’ standing for ‘(Show a, Eq a, Enum a)’
docs/users_guide/exts/partial_type_signatures.rst:251:    arbitCs' :: (Enum a, _) => a -> String
docs/users_guide/exts/partial_type_signatures.rst:254:    --   forall a. (Enum a, Show a, Eq a) => a -> String
docs/users_guide/exts/partial_type_signatures.rst:260:          arbitCs' :: (Enum a, _) => a -> String
docs/users_guide/exts/rewrite_rules.rst:259:        {-# RULES forall (x :: forall a. Num a => a -> a).  f x = blah #-}
docs/users_guide/exts/num_decimals.rst:18:``Num``, and have values like ``1.2e6 :: Num a => a`` and ``5e10 :: Num a => a``
docs/users_guide/exts/num_decimals.rst:21:however ``1.23e2 :: Num a => a`` as ``1.23e2 == 123``.
docs/users_guide/exts/num_decimals.rst:28:desugared via ``fromInteger`` and assigned type ``Num a => a`` if they
docs/users_guide/exts/num_decimals.rst:29:represent an integral value. For example ``1.0 :: Num a => a``, but
docs/users_guide/exts/deriving_via.rst:53:derive ``Num Unicode`` with GND (``deriving newtype Num``) it must
docs/users_guide/exts/deriving_via.rst:54:reuse the ``Num Int`` instance. With ``DerivingVia``, we can explicitly
docs/users_guide/exts/pragmas.rst:740:         foo :: Num a => a -> a
docs/users_guide/exts/typed_holes.rst:421:                forall a. Num a => t a -> a
docs/users_guide/exts/typed_holes.rst:425:            forall a. Num a => t a -> a
docs/users_guide/exts/scoped_type_variables.rst:298:      instance Num a => D [a] where
docs/users_guide/exts/rebindable_syntax.rst:83:    fromInteger :: Num a => a -> Integer
docs/users_guide/exts/newtype_deriving.rst:27:      instance Num Dollars where
docs/users_guide/exts/newtype_deriving.rst:53:      instance Num Int => Num Dollars
docs/users_guide/exts/newtype_deriving.rst:55:and then attempt to simplify the ``Num Int`` context as much as possible.
docs/users_guide/exts/newtype_deriving.rst:56:GHC knows that there is a ``Num Int`` instance in scope, so it is able to
docs/users_guide/exts/newtype_deriving.rst:57:discharge the ``Num Int`` constraint, leaving the code that GHC actually
docs/users_guide/exts/newtype_deriving.rst:60:      instance Num Dollars
docs/users_guide/exts/newtype_deriving.rst:63:``Num Int`` instance, but with ``Dollars`` and ``getDollars`` added wherever
docs/users_guide/exts/defer_type_errors.rst:131:        No instance for (Num Char) arising from the literal `1'
docs/users_guide/exts/defer_type_errors.rst:132:        Possible fix: add an instance declaration for (Num Char)
docs/users_guide/exts/defer_type_errors.rst:149:        No instance for (Num Char) arising from the literal `1'
docs/users_guide/exts/defer_type_errors.rst:150:        Possible fix: add an instance declaration for (Num Char)
docs/users_guide/exts/gadt.rst:117:             Succ   :: { num  :: Term Int } -> Term Int
docs/users_guide/exts/gadt.rst:118:             Pred   :: { num  :: Term Int } -> Term Int
docs/users_guide/exts/gadt.rst:137:         num :: Term Int -> Term Int
docs/users_guide/exts/ffi.rst:679:        RtsOptsEnabledEnum rts_opts_enabled;
docs/users_guide/exts/ffi.rst:685:    typedef enum {
docs/users_guide/exts/gadt_syntax.rst:70:         MkNumInst :: Num a => NumInst a
docs/users_guide/exts/gadt_syntax.rst:79:``(Num a)`` dictionary.
docs/users_guide/exts/gadt_syntax.rst:86:          = Num a => MkNumInst (NumInst a)
docs/users_guide/exts/gadt_syntax.rst:95:        = forall b. (Num a, Eq b) => MkT1 a b
docs/users_guide/exts/gadt_syntax.rst:97:        MkT2 :: (Num a, Eq b) => a -> b -> T2 a
docs/users_guide/exts/type_abstractions.rst:39:      Foo :: forall a. (Show a, Num a) => Foo
docs/users_guide/exts/type_abstractions.rst:57:    foo :: (Num a) => Maybe [a] -> String
docs/users_guide/exts/type_abstractions.rst:89:    foo :: Num a => Maybe a -> a
docs/users_guide/exts/type_abstractions.rst:152:    higherRank :: (forall a. (Num a, Bounded a) => a -> a) -> (Int8, Int16)
docs/users_guide/extending_ghc.rst:1376:            sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
docs/users_guide/extending_ghc.rst:1377:            product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
docs/users_guide/extending_ghc.rst:1412:            product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
docs/users_guide/extending_ghc.rst:1413:            sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
docs/users_guide/bugs.rst:360:    -  Whenever you give a function, instance or class a ``Num t``
docs/users_guide/bugs.rst:374:       constraint, also give it a ``Num t`` constraint, and
docs/users_guide/using-optimisation.rst:1255:      type C a b = (Num a, M a b)
docs/users_guide/using-optimisation.rst:1260:    The body of `f` requires a `Num Int` instance. We could solve this
docs/users_guide/using-optimisation.rst:1263:    solution for `Num Int`. However, we can often produce much better code
docs/users_guide/using-optimisation.rst:1264:    by directly solving for an available `Num Int` dictionary we might have at
docs/users_guide/separate_compilation.rst:1120:  a polymorphic function ``double :: Num a => a -> a``.
docs/users_guide/ghci.rst:659:    instance Enum T -- Defined at <interactive>:2:45
docs/users_guide/ghci.rst:1106:    instance Num ()
docs/users_guide/ghci.rst:1108:    def :: (Num a, Enum a) => a
docs/users_guide/ghci.rst:1109:    def = toEnum 0
docs/users_guide/ghci.rst:1149:each ``ti``, ``Num ti`` must hold. This is relaxed to say that for each
docs/users_guide/ghci.rst:2573:        instance Enum Bool -- Defined in ‘GHC.Enum’
docs/users_guide/utils.rst:231:``#enum ⟨type⟩, ⟨constructor⟩, ⟨value⟩, ⟨value⟩, ...``
docs/coding-style.html:420:Try to use ANSI C's enum feature when defining lists of constants of
docs/coding-style.html:423:with enum types and gdb will let you use the name in expressions you
docs/coding-style.html:429:    typedef enum { /* N.B. Used as indexes into arrays */
docs/coding-style.html:451:    typedef enum {
ghc/GHCi/UI.hs:1169:          fst_line_num <- line_number <$> getGHCiState
ghc/GHCi/UI.hs:1176:                runStmtWithLineNum fst_line_num ml_stmt GHC.RunToCompletion
ghc/GHCi/UI.hs:1180:          last_line_num <- line_number <$> getGHCiState
ghc/GHCi/UI.hs:1181:          -- reconstruct first line num from last line num and stmt
ghc/GHCi/UI.hs:1182:          let fst_line_num | stmt_nl_cnt > 0 = last_line_num - (stmt_nl_cnt2 + 1)
ghc/GHCi/UI.hs:1183:                           | otherwise = last_line_num -- single line input
ghc/GHCi/UI.hs:1188:            runStmtWithLineNum fst_line_num stmt' GHC.RunToCompletion
ghc/GHCi/UI.hs:1192:    runStmtWithLineNum :: Int -> String -> SingleStep
ghc/GHCi/UI.hs:1194:    runStmtWithLineNum lnum stmt step = do
ghc/GHCi/UI.hs:1196:        setGHCiState st0 { line_number = lnum }
ghc/GHCi/UI.hs:4002:  history num = do
ghc/GHCi/UI.hs:4008:            (took,rest) = splitAt num hist
ghc/GHCi/UI.hs:4065:  back num = withSandboxOnly ":back" $ do
ghc/GHCi/UI.hs:4079:  forward num = withSandboxOnly ":forward" $ do
hadrian/README.md:104:* `--bignum={native,gmp,check-gmp,ffi}`: choose which bignum implementation to use. The default is `gmp`.
hadrian/src/Way/Type.hs:64:wayToUnits (Way set) = map toEnum . Set.elems $ set
hadrian/src/Way/Type.hs:68:wayUnit unit (Way set) = fromEnum unit `Set.member` set
hadrian/src/Way/Type.hs:72:addWayUnit unit (Way set) = Way . Set.insert (fromEnum unit) $ set
hadrian/src/Way/Type.hs:76:removeWayUnit unit (Way set) = Way . Set.delete (fromEnum unit) $ set
hadrian/src/Packages.hs:87:ghcBignum           = lib  "ghc-bignum"
hadrian/src/Flavour/Type.hs:22:    -- | Bignum backend: 'native', 'gmp', 'ffi', etc.
hadrian/src/Flavour/Type.hs:24:    -- | Check selected bignum backend against native backend
hadrian/src/Flavour.hs:290:useNativeBignum :: Flavour -> Flavour
hadrian/src/Flavour.hs:291:useNativeBignum flavour =
hadrian/src/Rules/Register.hs:169:        bignum <- interpretInContext context getBignumBackend
hadrian/src/Rules/Register.hs:170:        when (bignum == "gmp") $
hadrian/src/Rules/Register.hs:213:        bignum <- interpretInContext context getBignumBackend
hadrian/src/Rules/Register.hs:214:        when (bignum == "gmp") $
hadrian/src/Rules/Register.hs:278:        component = CabalCharParsing.munch1 (\c ->  Char.isAlphaNum c || c == '.')
hadrian/src/Rules/SourceDist.hs:147:      , pkgPath ghcBignum -/- "configure"
hadrian/src/Rules/Gmp.hs:56:      gmpBase = pkgPath ghcBignum -/- "gmp"
hadrian/src/Rules/Gmp.hs:87:          -- context from it for ghc-bignum package.
hadrian/src/Rules/Library.hs:207:    | package context == ghcBignum = do
hadrian/src/Target.hs:30:    match_str_num []     rs     = all isDigit rs
hadrian/src/Target.hs:31:    match_str_num (x:xs) (r:rs) = x == r && match_str_num xs rs
hadrian/src/Target.hs:32:    match_str_num (_:_)  []     = False
hadrian/src/Target.hs:34:    threadArg s = match_str_num "-j" s || match_str_num "MAKEFLAGS=-j" s || match_str_num "THREADS=" s
hadrian/src/Target.hs:35:    verbosityArg s = match_str_num "-v" s
hadrian/src/CommandLine.hs:31:    , bignum         :: Maybe String
hadrian/src/CommandLine.hs:51:    , bignum         = Nothing
hadrian/src/CommandLine.hs:124:readBignum :: Maybe String -> Either String (CommandLineArgs -> CommandLineArgs)
hadrian/src/CommandLine.hs:125:readBignum Nothing   = Right id
hadrian/src/CommandLine.hs:126:readBignum (Just ms) = Right $ \flags -> case break (== '-') (lower ms) of
hadrian/src/CommandLine.hs:127:   (backend,"")          -> flags { bignum = Just backend }
hadrian/src/CommandLine.hs:128:   ("check",'-':backend) -> flags { bignum = Just backend, bignumCheck = True }
hadrian/src/CommandLine.hs:129:   _                     -> flags { bignum = Just (lower ms) }
hadrian/src/CommandLine.hs:280:    , Option [] ["bignum"] (OptArg readBignum "BACKEND")
hadrian/src/CommandLine.hs:281:      "Select ghc-bignum backend: native, gmp (default), check-gmp, ffi."
hadrian/src/CommandLine.hs:392:cmdBignum :: Action (Maybe String)
hadrian/src/CommandLine.hs:393:cmdBignum = bignum <$> cmdLineArgs
hadrian/src/Settings/Parser.hs:86:  Parsec.sepBy1 (starOr $ liftA2 (:) Parsec.alphaNum $
hadrian/src/Settings/Parser.hs:87:                  Parsec.many (Parsec.alphaNum <|> Parsec.char '-')
hadrian/src/Settings/Default.hs:12:    -- * Default build flavour and BigNum backend
hadrian/src/Settings/Default.hs:60:-- | Default bignum backend.
hadrian/src/Settings/Packages.hs:220:        ------------------------------ ghc-bignum ------------------------------
hadrian/src/Settings/Packages.hs:242:ghcBignumArgs = package ghcBignum ? do
hadrian/src/Settings/Packages.hs:251:          [ -- select BigNum backend
hadrian/src/Settings/Packages.hs:274:                       -- Ensure that the ghc-bignum package registration includes
hadrian/src/Settings.hs:47:getBignumBackend = expr $ cmdBignum >>= \case
hadrian/src/Settings.hs:52:getBignumCheck = expr $ cmdBignum >>= \case
hadrian/bootstrap/bootstrap.py:16:from enum import Enum
hadrian/doc/user-settings.md:26:    -- | Bignum backend: 'native', 'gmp', 'ffi', etc.
hadrian/doc/user-settings.md:28:    -- | Check selected bignum backend against native backend
hadrian/doc/user-settings.md:278:You can choose which Bignum backend to use when buidling GHC using the
libraries/mtl/Control/Monad/State/Lazy.hs:90:-- >        =  do num <- numberNode x
libraries/mtl/Control/Monad/State/Lazy.hs:93:-- >              return (Node num nt1 nt2)
libraries/mtl/Control/Monad/State/Lazy.hs:124:-- > sumTree :: (Num a) => Tree a -> a
libraries/mtl/Control/Monad/State/Strict.hs:90:-- >        =  do num <- numberNode x
libraries/mtl/Control/Monad/State/Strict.hs:93:-- >              return (Node num nt1 nt2)
libraries/mtl/Control/Monad/State/Strict.hs:124:-- > sumTree :: (Num a) => Tree a -> a
libraries/os-string/tests/bytestring-tests/Properties/Common.hs:101:deriving instance Num PosixChar
libraries/os-string/tests/bytestring-tests/Properties/Common.hs:124:deriving instance Num WindowsChar
libraries/os-string/tests/bytestring-tests/Properties/Common.hs:179:deriving instance Num OsChar
libraries/os-string/tests/encoding/EncodingSpec.hs:39:      let str = [toEnum 55296, toEnum 55297]
libraries/os-string/tests/encoding/EncodingSpec.hs:49:      let str = [toEnum 55296, toEnum 55297]
libraries/os-string/tests/encoding/EncodingSpec.hs:69:      let str = [toEnum 0xDFF0, toEnum 0xDFF2]
libraries/os-string/tests/TestUtil.hs:27:    let testNum = case args of
libraries/os-string/tests/TestUtil.hs:29:                      | let num = read i
libraries/os-string/tests/TestUtil.hs:30:                      , num < 0    -> drop (negate num) tests
libraries/os-string/tests/TestUtil.hs:31:                      | let num = read i
libraries/os-string/tests/TestUtil.hs:32:                      , num > 0    -> take num          tests
libraries/os-string/System/OsString/Common.hs:780:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/os-string/System/OsString/Common.hs:781:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/os-string/System/OsString/Common.hs:782:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/os-string/System/OsString/Common.hs:799:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/os-string/System/OsString/Internal.hs:548:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/os-string/System/OsString/Internal.hs:549:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/os-string/System/OsString/Internal.hs:550:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/os-string/System/OsString/Internal.hs:567:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/os-string/System/OsString/Data/ByteString/Short/Word16.hs:617:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/os-string/System/OsString/Data/ByteString/Short/Word16.hs:618:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/os-string/System/OsString/Data/ByteString/Short/Word16.hs:619:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/os-string/System/OsString/Data/ByteString/Short/Word16.hs:637:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/ghc-heap/tests/stack_misc_closures.hs:429:minBigBitmapBits :: Num a => a
libraries/ghc-heap/tests/stack_misc_closures.hs:432:maxSmallBitmapBits :: Num a => a
libraries/ghc-heap/tests/heap_all.hs:31:    , tipe = toEnum 0
libraries/ghc-heap/GHC/Exts/Heap/ClosureTypes.hs:16:-- Enum representing closure types
libraries/ghc-heap/GHC/Exts/Heap/InfoTable.hsc:46:    , tipe   = toEnum (fromIntegral (tipe' :: HalfWord))
libraries/ghc-heap/GHC/Exts/Heap/InfoTable.hsc:58:  (#poke StgInfoTable, type) a0 (toHalfWord (fromEnum (tipe itbl)))
libraries/ghc-heap/GHC/Exts/Heap/InfoTableProf.hsc:43:    , tipe   = toEnum (fromIntegral (tipe' :: HalfWord))
libraries/ghc-heap/GHC/Exts/Heap/InfoTableProf.hsc:55:  (#poke StgInfoTable, type) a0 (fromEnum (tipe itbl))
libraries/ghc-boot/GHC/Serialized.hs:79:serializeFixedWidthNum :: forall a. (Integral a, FiniteBits a) => a -> [Word8] -> [Word8]
libraries/ghc-boot/GHC/Serialized.hs:80:serializeFixedWidthNum what = go (finiteBitSize what) what
libraries/ghc-boot/GHC/Serialized.hs:87:deserializeFixedWidthNum :: forall a b. (Integral a, FiniteBits a) => [Word8] -> (a -> [Word8] -> b) -> b
libraries/ghc-boot/GHC/Serialized.hs:88:deserializeFixedWidthNum bytes k = go (finiteBitSize (undefined :: a)) bytes k
libraries/ghc-boot/GHC/Serialized.hs:98:serializeEnum :: (Enum a) => a -> [Word8] -> [Word8]
libraries/ghc-boot/GHC/Serialized.hs:99:serializeEnum = serializeInt . fromEnum
libraries/ghc-boot/GHC/Serialized.hs:101:deserializeEnum :: Enum a => [Word8] -> (a -> [Word8] -> b) -> b
libraries/ghc-boot/GHC/Serialized.hs:102:deserializeEnum bytes k = deserializeInt bytes (k . toEnum)
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:193:  forall a. (Bounded a, Enum a, Show a) =>
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:207:               <> show (fromEnum def)
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:221:* @fromEnum minBound >= 0x00@
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:222:* @fromEnum maxBound <= 0xff@
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:225:  forall a. (Bounded a, Enum a, Show a) =>
libraries/ghc-internal/tools/ucd2haskell/exe/Parser/Text.hs:239:    toWord8 a = let w = fromEnum a in if 0 <= w && w <= 0xff
libraries/ghc-internal/src/GHC/Internal/Numeric.hs:82:readInt :: Num a
libraries/ghc-internal/src/GHC/Internal/Numeric.hs:93:readBin :: (Eq a, Num a) => ReadS a
libraries/ghc-internal/src/GHC/Internal/Numeric.hs:100:readOct :: (Eq a, Num a) => ReadS a
libraries/ghc-internal/src/GHC/Internal/Numeric.hs:107:readDec :: (Eq a, Num a) => ReadS a
libraries/ghc-internal/src/GHC/Internal/Numeric.hs:115:readHex :: (Eq a, Num a) => ReadS a
libraries/ghc-internal/src/GHC/Internal/Unicode.hs:36:import GHC.Internal.Enum ( Enum (..), Bounded (..) )
libraries/ghc-internal/src/GHC/Internal/Unicode.hs:146:                 , Enum     -- ^ @since base-2.01
libraries/ghc-internal/src/GHC/Internal/Unicode.hs:177:generalCategory = toEnum . GC.generalCategory
libraries/ghc-internal/src/GHC/Internal/Unicode.hs:358:isAlphaNum              :: Char -> Bool
libraries/ghc-internal/src/GHC/Internal/Unicode.hs:359:isAlphaNum c = case generalCategory c of
libraries/ghc-internal/src/GHC/Internal/List.hs:48:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/List.hs:57:-- >>> import Prelude (Num (..), Ord (..), Int, Double, odd, not, undefined)
libraries/ghc-internal/src/GHC/Internal/List.hs:492:sum                     :: (Num a) => [a] -> a
libraries/ghc-internal/src/GHC/Internal/List.hs:508:product                 :: (Num a) => [a] -> a
libraries/ghc-internal/src/GHC/Internal/Float.hs:400:instance Num Float where
libraries/ghc-internal/src/GHC/Internal/Float.hs:406:    signum x | x > 0     = 1
libraries/ghc-internal/src/GHC/Internal/Float.hs:654:instance  Num Double  where
libraries/ghc-internal/src/GHC/Internal/Float.hs:660:    signum x | x > 0     = 1
libraries/ghc-internal/src/GHC/Internal/Float.hs:935:-- Enum instances
libraries/ghc-internal/src/GHC/Internal/Float.hs:949:1.2 default methods (back in the days when Enum had Ord as a superclass)
libraries/ghc-internal/src/GHC/Internal/Float.hs:962:instance  Enum Float  where
libraries/ghc-internal/src/GHC/Internal/Float.hs:965:    toEnum         = int2Float
libraries/ghc-internal/src/GHC/Internal/Float.hs:966:    fromEnum       = fromInteger . truncate   -- may overflow
libraries/ghc-internal/src/GHC/Internal/Float.hs:981:instance  Enum Double  where
libraries/ghc-internal/src/GHC/Internal/Float.hs:984:    toEnum         =  int2Double
libraries/ghc-internal/src/GHC/Internal/Float.hs:985:    fromEnum       =  fromInteger . truncate   -- may overflow
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:91:instance Enum GiveGCStats where
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:92:    fromEnum NoGCStats      = #{const NO_GC_STATS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:93:    fromEnum CollectGCStats = #{const COLLECT_GC_STATS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:94:    fromEnum OneLineGCStats = #{const ONELINE_GC_STATS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:95:    fromEnum SummaryGCStats = #{const SUMMARY_GC_STATS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:96:    fromEnum VerboseGCStats = #{const VERBOSE_GC_STATS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:98:    toEnum #{const NO_GC_STATS}      = NoGCStats
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:99:    toEnum #{const COLLECT_GC_STATS} = CollectGCStats
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:100:    toEnum #{const ONELINE_GC_STATS} = OneLineGCStats
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:101:    toEnum #{const SUMMARY_GC_STATS} = SummaryGCStats
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:102:    toEnum #{const VERBOSE_GC_STATS} = VerboseGCStats
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:103:    toEnum e = errorWithoutStackTrace ("invalid enum for GiveGCStats: " ++ show e)
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:220:instance Enum DoCostCentres where
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:221:    fromEnum CostCentresNone    = #{const COST_CENTRES_NONE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:222:    fromEnum CostCentresSummary = #{const COST_CENTRES_SUMMARY}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:223:    fromEnum CostCentresVerbose = #{const COST_CENTRES_VERBOSE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:224:    fromEnum CostCentresAll     = #{const COST_CENTRES_ALL}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:225:    fromEnum CostCentresJSON    = #{const COST_CENTRES_JSON}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:227:    toEnum #{const COST_CENTRES_NONE}    = CostCentresNone
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:228:    toEnum #{const COST_CENTRES_SUMMARY} = CostCentresSummary
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:229:    toEnum #{const COST_CENTRES_VERBOSE} = CostCentresVerbose
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:230:    toEnum #{const COST_CENTRES_ALL}     = CostCentresAll
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:231:    toEnum #{const COST_CENTRES_JSON}    = CostCentresJSON
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:232:    toEnum e = errorWithoutStackTrace ("invalid enum for DoCostCentres: " ++ show e)
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:264:instance Enum DoHeapProfile where
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:265:    fromEnum NoHeapProfiling   = #{const NO_HEAP_PROFILING}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:266:    fromEnum HeapByCCS         = #{const HEAP_BY_CCS}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:267:    fromEnum HeapByMod         = #{const HEAP_BY_MOD}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:268:    fromEnum HeapByDescr       = #{const HEAP_BY_DESCR}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:269:    fromEnum HeapByType        = #{const HEAP_BY_TYPE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:270:    fromEnum HeapByRetainer    = #{const HEAP_BY_RETAINER}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:271:    fromEnum HeapByLDV         = #{const HEAP_BY_LDV}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:272:    fromEnum HeapByClosureType = #{const HEAP_BY_CLOSURE_TYPE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:273:    fromEnum HeapByInfoTable   = #{const HEAP_BY_INFO_TABLE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:274:    fromEnum HeapByEra         = #{const HEAP_BY_ERA}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:276:    toEnum #{const NO_HEAP_PROFILING}    = NoHeapProfiling
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:277:    toEnum #{const HEAP_BY_CCS}          = HeapByCCS
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:278:    toEnum #{const HEAP_BY_MOD}          = HeapByMod
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:279:    toEnum #{const HEAP_BY_DESCR}        = HeapByDescr
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:280:    toEnum #{const HEAP_BY_TYPE}         = HeapByType
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:281:    toEnum #{const HEAP_BY_RETAINER}     = HeapByRetainer
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:282:    toEnum #{const HEAP_BY_LDV}          = HeapByLDV
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:283:    toEnum #{const HEAP_BY_CLOSURE_TYPE} = HeapByClosureType
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:284:    toEnum #{const HEAP_BY_INFO_TABLE}   = HeapByInfoTable
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:285:    toEnum #{const HEAP_BY_ERA}          = HeapByEra
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:286:    toEnum e = errorWithoutStackTrace ("invalid enum for DoHeapProfile: " ++ show e)
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:325:instance Enum DoTrace where
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:326:    fromEnum TraceNone     = #{const TRACE_NONE}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:327:    fromEnum TraceEventLog = #{const TRACE_EVENTLOG}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:328:    fromEnum TraceStderr   = #{const TRACE_STDERR}
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:330:    toEnum #{const TRACE_NONE}     = TraceNone
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:331:    toEnum #{const TRACE_EVENTLOG} = TraceEventLog
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:332:    toEnum #{const TRACE_STDERR}   = TraceStderr
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:333:    toEnum e = errorWithoutStackTrace ("invalid enum for DoTrace: " ++ show e)
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:440:          <*> (toEnum . fromIntegral <$>
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:531:            <*> (toEnum . fromIntegral
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:575:  CCFlags <$> (toEnum . fromIntegral
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:583:  ProfFlags <$> (toEnum <$> #{peek PROFILING_FLAGS, doHeapProfile} ptr)
libraries/ghc-internal/src/GHC/Internal/RTS/Flags.hsc:608:  TraceFlags <$> (toEnum . fromIntegral
libraries/ghc-internal/src/GHC/Internal/Unicode/Bits.hs:34:import GHC.Internal.Num ((-))
libraries/ghc-internal/src/GHC/Internal/Enum.hs:81:-- >        bound | fromEnum y >= fromEnum x = maxBound
libraries/ghc-internal/src/GHC/Internal/Enum.hs:84:class  Enum a   where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:90:    toEnum              :: Int -> a
libraries/ghc-internal/src/GHC/Internal/Enum.hs:94:    fromEnum            :: a -> Int
libraries/ghc-internal/src/GHC/Internal/Enum.hs:105:    --   @worker s v = v : worker s (s v)@, @x = fromEnum n' - fromEnum n@ and
libraries/ghc-internal/src/GHC/Internal/Enum.hs:134:    --   @x = fromEnum n' - fromEnum n@, @c x = bool (>=) (<=) (x > 0)@
libraries/ghc-internal/src/GHC/Internal/Enum.hs:156:    succ = toEnum . (+ 1) . fromEnum
libraries/ghc-internal/src/GHC/Internal/Enum.hs:158:    pred = toEnum . (subtract 1) . fromEnum
libraries/ghc-internal/src/GHC/Internal/Enum.hs:162:    enumFrom x = map toEnum [fromEnum x ..]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:166:    enumFromThen x y = map toEnum [fromEnum x, fromEnum y ..]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:170:    enumFromTo x y = map toEnum [fromEnum x .. fromEnum y]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:174:    enumFromThenTo x1 x2 y = map toEnum [fromEnum x1, fromEnum x2 .. fromEnum y]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:176:-- See Note [Inline Enum method helpers]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:179:boundedEnumFrom :: (Enum a, Bounded a) => a -> [a]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:180:boundedEnumFrom n = map toEnum [fromEnum n .. fromEnum (maxBound `asTypeOf` n)]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:182:-- See Note [Inline Enum method helpers]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:184:boundedEnumFromThen :: (Enum a, Bounded a) => a -> a -> [a]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:186:  | i_n2 >= i_n1  = map toEnum [i_n1, i_n2 .. fromEnum (maxBound `asTypeOf` n1)]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:187:  | otherwise     = map toEnum [i_n1, i_n2 .. fromEnum (minBound `asTypeOf` n1)]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:189:    i_n1 = fromEnum n1
libraries/ghc-internal/src/GHC/Internal/Enum.hs:190:    i_n2 = fromEnum n2
libraries/ghc-internal/src/GHC/Internal/Enum.hs:199:Note [Inline Enum method helpers]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:207:  instance  Enum Double  where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:213:  boundedEnumFrom :: (Enum a, Bounded a) => a -> [a]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:214:  boundedEnumFrom n = map toEnum [fromEnum n .. fromEnum (maxBound `asTypeOf` n)]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:216:  instance Enum Word8 where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:281:instance Enum () where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:285:    toEnum x | x == 0    = ()
libraries/ghc-internal/src/GHC/Internal/Enum.hs:288:    fromEnum () = 0
libraries/ghc-internal/src/GHC/Internal/Enum.hs:294:instance Enum a => Enum (Solo a) where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:298:    toEnum x = MkSolo (toEnum x)
libraries/ghc-internal/src/GHC/Internal/Enum.hs:300:    fromEnum (MkSolo x) = fromEnum x
libraries/ghc-internal/src/GHC/Internal/Enum.hs:376:instance Enum Bool where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:383:  toEnum n | n == 0    = False
libraries/ghc-internal/src/GHC/Internal/Enum.hs:387:  fromEnum False = 0
libraries/ghc-internal/src/GHC/Internal/Enum.hs:388:  fromEnum True  = 1
libraries/ghc-internal/src/GHC/Internal/Enum.hs:401:instance Enum Ordering where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:410:  toEnum n | n == 0 = LT
libraries/ghc-internal/src/GHC/Internal/Enum.hs:413:  toEnum _ = errorWithoutStackTrace "Prelude.Enum.Ordering.toEnum: bad argument"
libraries/ghc-internal/src/GHC/Internal/Enum.hs:415:  fromEnum LT = 0
libraries/ghc-internal/src/GHC/Internal/Enum.hs:416:  fromEnum EQ = 1
libraries/ghc-internal/src/GHC/Internal/Enum.hs:417:  fromEnum GT = 2
libraries/ghc-internal/src/GHC/Internal/Enum.hs:433:instance  Enum Char  where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:441:    toEnum   = chr
libraries/ghc-internal/src/GHC/Internal/Enum.hs:442:    fromEnum = ord
libraries/ghc-internal/src/GHC/Internal/Enum.hs:461:-- See Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:566:instance  Enum Int  where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:574:    toEnum   x = x
libraries/ghc-internal/src/GHC/Internal/Enum.hs:575:    fromEnum x = x
libraries/ghc-internal/src/GHC/Internal/Enum.hs:606:{- Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:641:-- See Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:749:instance Enum Word where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:756:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Enum.hs:759:    fromEnum x@(W# x#)
libraries/ghc-internal/src/GHC/Internal/Enum.hs:791:-- The Enum rules for Word work much the same way that they do for Int.
libraries/ghc-internal/src/GHC/Internal/Enum.hs:792:-- See Note [How the Enum rules work].
libraries/ghc-internal/src/GHC/Internal/Enum.hs:822:-- See Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:915:instance  Enum Integer  where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:918:    toEnum (I# n)        = IS n
libraries/ghc-internal/src/GHC/Internal/Enum.hs:919:    fromEnum n           = integerToInt n
libraries/ghc-internal/src/GHC/Internal/Enum.hs:937:-- See Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:950:{- Note [Enum Integer rules for literal 1]
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1037:instance Enum Natural where
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1040:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1044:    fromEnum (NS w) | i >= 0 = i
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1047:    fromEnum _ = errorWithoutStackTrace "fromEnum: out of Int range"
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1069:-- Helpers for 'Enum Natural'; TODO: optimise & make fusion work
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1097:deriving instance Enum Levity
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1102:deriving instance Enum VecCount
libraries/ghc-internal/src/GHC/Internal/Enum.hs:1107:deriving instance Enum VecElem
libraries/ghc-internal/src/GHC/Internal/Generics.hs:747:import GHC.Internal.Enum    ( Bounded, Enum )
libraries/ghc-internal/src/GHC/Internal/Generics.hs:1221:           , Enum     -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Generics.hs:1247:           , Enum    -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Generics.hs:1271:           , Enum    -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Generics.hs:1306:           , Enum    -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/System/Environment/Blank.hsc:152:        c_setenv keyP valueP (fromIntegral (fromEnum True))
libraries/ghc-internal/src/GHC/Internal/Word.hs:108:instance Num Word8 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:114:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Word.hs:115:    signum _               = 1
libraries/ghc-internal/src/GHC/Internal/Word.hs:123:instance Enum Word8 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:130:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:134:    fromEnum (W8# x#)   = I# (word2Int# (word8ToWord# x#))
libraries/ghc-internal/src/GHC/Internal/Word.hs:298:instance Num Word16 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:304:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Word.hs:305:    signum _               = 1
libraries/ghc-internal/src/GHC/Internal/Word.hs:313:instance Enum Word16 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:320:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:324:    fromEnum (W16# x#)  = I# (word2Int# (word16ToWord# x#))
libraries/ghc-internal/src/GHC/Internal/Word.hs:526:instance Num Word32 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:532:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Word.hs:533:    signum _               = 1
libraries/ghc-internal/src/GHC/Internal/Word.hs:537:instance Enum Word32 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:544:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:552:    fromEnum x@(W32# x#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:561:    fromEnum (W32# x#)  = I# (word2Int# (word32ToWord# x#))
libraries/ghc-internal/src/GHC/Internal/Word.hs:714:instance Num Word64 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:720:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Word.hs:721:    signum _               = 1
libraries/ghc-internal/src/GHC/Internal/Word.hs:725:instance Enum Word64 where
libraries/ghc-internal/src/GHC/Internal/Word.hs:732:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:735:    fromEnum x@(W64# x#)
libraries/ghc-internal/src/GHC/Internal/Word.hs:769:-- The Enum rules for Word64 work much the same way that they do for Int.
libraries/ghc-internal/src/GHC/Internal/Word.hs:770:-- See Note [How the Enum rules work].
libraries/ghc-internal/src/GHC/Internal/Word.hs:800:-- See Note [How the Enum rules work]
libraries/ghc-internal/src/GHC/Internal/ClosureTypes.hs:15:-- |  Enum representing closure types
libraries/ghc-internal/src/GHC/Internal/Read.hs:557:readNumber :: Num a => (L.Lexeme -> ReadPrec a) -> ReadPrec a
libraries/ghc-internal/src/GHC/Internal/Read.hs:571:convertInt :: Num a => L.Lexeme -> ReadPrec a
libraries/ghc-internal/src/GHC/Internal/Ix.hs:183:    unsafeIndex (m,_n) i = fromEnum i - fromEnum m
libraries/ghc-internal/src/GHC/Internal/Ix.hs:249:    unsafeIndex (l,_) i = fromEnum i - fromEnum l
libraries/ghc-internal/src/GHC/Internal/Ix.hs:256:    inRange (l,u) i = fromEnum i >= fromEnum l && fromEnum i <= fromEnum u
libraries/ghc-internal/src/GHC/Internal/Ix.hs:265:    unsafeIndex (l,_) i = fromEnum i - fromEnum l
libraries/ghc-internal/src/GHC/Internal/Ix.hs:272:    inRange (l,u) i = fromEnum i >= fromEnum l && fromEnum i <= fromEnum u
libraries/ghc-internal/src/GHC/Internal/Foreign/Marshal/Pool.hs:54:import GHC.Internal.Num               ( Num(..) )
libraries/ghc-internal/src/GHC/Internal/Foreign/Marshal/Utils.hs:100:fromBool       :: Num a => Bool -> a
libraries/ghc-internal/src/GHC/Internal/Foreign/Marshal/Utils.hs:106:toBool :: (Eq a, Num a) => a -> Bool
libraries/ghc-internal/src/GHC/Internal/Foreign/Marshal/Error.hs:61:throwIfNeg :: (Ord a, Num a) => (a -> String) -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/Foreign/Marshal/Error.hs:66:throwIfNeg_ :: (Ord a, Num a) => (a -> String) -> IO a -> IO ()
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:372:throwErrnoIfMinus1 :: (Eq a, Num a) => String -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:377:throwErrnoIfMinus1_ :: (Eq a, Num a) => String -> IO a -> IO ()
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:384:throwErrnoIfMinus1Retry :: (Eq a, Num a) => String -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:389:throwErrnoIfMinus1Retry_ :: (Eq a, Num a) => String -> IO a -> IO ()
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:394:throwErrnoIfMinus1RetryMayBlock :: (Eq a, Num a)
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:400:throwErrnoIfMinus1RetryMayBlock_ :: (Eq a, Num a)
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:454:throwErrnoPathIfMinus1 :: (Eq a, Num a) => String -> FilePath -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:460:throwErrnoPathIfMinus1_ :: (Eq a, Num a) => String -> FilePath -> IO a -> IO ()
libraries/ghc-internal/src/GHC/Internal/Foreign/C/Error.hs:485:    len :: Num a => a
libraries/ghc-internal/src/GHC/Internal/Real.hs-boot:11:import {-# SOURCE #-} GHC.Internal.Num (Num)
libraries/ghc-internal/src/GHC/Internal/Real.hs-boot:12:import {-# SOURCE #-} GHC.Internal.Enum (Enum)
libraries/ghc-internal/src/GHC/Internal/Real.hs-boot:17:class (Num a, Ord a) => Real a where
libraries/ghc-internal/src/GHC/Internal/Real.hs-boot:20:class (Real a, Enum a) => Integral a where
libraries/ghc-internal/src/GHC/Internal/Real.hs-boot:34:    divMod n d          =  if signum r == negate (signum d) then (q-1, r+d) else qr
libraries/ghc-internal/src/GHC/Internal/Arr.hs:363:-- > hist :: (Ix a, Num b) => (a,a) -> [a] -> Array a b
libraries/ghc-internal/src/GHC/Internal/Base.hs:26:GHC.Internal.Enum        Class: Enum,  plus instances for GHC.Base/GHC.Tup types
libraries/ghc-internal/src/GHC/Internal/Base.hs:32:GHC.Internal.Num         Class: Num, plus instances for Int
libraries/ghc-internal/src/GHC/Internal/Base.hs:332:import {-# SOURCE #-} GHC.Internal.Num (Num (..))
libraries/ghc-internal/src/GHC/Internal/Base.hs:474:* We use Integral methods (quot, rem) and Num methods (-) in stimes definitions
libraries/ghc-internal/src/GHC/Internal/Base.hs:475:  in this module. Num is a superclass of Integral.
libraries/ghc-internal/src/GHC/Internal/Base.hs:476:* Num is defined in GHC.Internal.Num, which imports GHC.Internal.Base.
libraries/ghc-internal/src/GHC/Internal/Base.hs:477:* Enum is defined in GHC.Internal.Enum, which imports
libraries/ghc-internal/src/GHC/Internal/Base.hs:478:  GHC.Internal.Base and GHC.Internal.Num. Enum is a superclass of
libraries/ghc-internal/src/GHC/Internal/Base.hs:479:  Integral. We don't use any Enum methods here, but it is relevant
libraries/ghc-internal/src/GHC/Internal/Base.hs:488:So we put the full class decls for Num and Integral in Num.hs-boot and
libraries/ghc-internal/src/GHC/Internal/Clock.hsc:13:import GHC.Internal.Float () -- for Num Double instance
libraries/ghc-internal/src/GHC/Internal/Num.hs-boot:3:module GHC.Internal.Num (Num (..)) where
libraries/ghc-internal/src/GHC/Internal/Num.hs-boot:13:class Num a where
libraries/ghc-internal/src/GHC/Internal/Num.hs-boot:19:    signum              :: a -> a
libraries/ghc-internal/src/GHC/Internal/Control/Monad.hs:86:import GHC.Internal.Num  ( (-) )
libraries/ghc-internal/src/GHC/Internal/Float/RealFracMethods.hs:65:import GHC.Internal.Num () -- instance Num Integer
libraries/ghc-internal/src/GHC/Internal/Bits.hs:379:bitDefault :: (Bits a, Num a) => Int -> a
libraries/ghc-internal/src/GHC/Internal/Bits.hs:388:testBitDefault ::  (Bits a, Num a) => a -> Int -> Bool
libraries/ghc-internal/src/GHC/Internal/Bits.hs:398:popCountDefault :: (Bits a, Num a) => a -> Int
libraries/ghc-internal/src/GHC/Internal/Num.hs:67:class  Num a  where
libraries/ghc-internal/src/GHC/Internal/Num.hs:78:    -- > abs x * signum x == x
libraries/ghc-internal/src/GHC/Internal/Num.hs:82:    signum              :: a -> a
libraries/ghc-internal/src/GHC/Internal/Num.hs:100:subtract :: (Num a) => a -> a -> a
libraries/ghc-internal/src/GHC/Internal/Num.hs:104:instance Num Int where
libraries/ghc-internal/src/GHC/Internal/Num.hs:111:    signum n | n `ltInt` 0 = negate 1
libraries/ghc-internal/src/GHC/Internal/Num.hs:118:instance Num Word where
libraries/ghc-internal/src/GHC/Internal/Num.hs:124:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Num.hs:125:    signum _               = 1
libraries/ghc-internal/src/GHC/Internal/Num.hs:129:instance Num Integer where
libraries/ghc-internal/src/GHC/Internal/Num.hs:137:    signum = integerSignum
libraries/ghc-internal/src/GHC/Internal/Num.hs:143:instance Num Natural where
libraries/ghc-internal/src/GHC/Internal/Num.hs:150:    signum      = naturalSignum
libraries/ghc-internal/src/GHC/Internal/Integer.hs:10:-- | Compatibility module for pre ghc-bignum code.
libraries/ghc-internal/src/GHC/Internal/Integer.hs:170:-- >>> signum 5
libraries/ghc-internal/src/GHC/Internal/Real.hs:194:x % y                   =  reduce (x * signum y) (abs y)
libraries/ghc-internal/src/GHC/Internal/Real.hs:214:class  (Num a, Ord a) => Real a  where
libraries/ghc-internal/src/GHC/Internal/Real.hs:235:class  (Real a, Enum a) => Integral a  where
libraries/ghc-internal/src/GHC/Internal/Real.hs:282:    divMod n d          =  if signum r == negate (signum d) then (q-1, r+d) else qr
libraries/ghc-internal/src/GHC/Internal/Real.hs:299:class  (Num a) => Fractional a  where
libraries/ghc-internal/src/GHC/Internal/Real.hs:345:                           in case signum (abs r - 0.5) of
libraries/ghc-internal/src/GHC/Internal/Real.hs:360:{-# INLINE numericEnumFrom #-}  -- See Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:368:{-# INLINE numericEnumFromThen #-}  -- See Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:377:{-# INLINE numericEnumFromTo #-}  -- See Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:381:{-# INLINE numericEnumFromThenTo #-}  -- See Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:621:instance  (Integral a)  => Num (Ratio a)  where
libraries/ghc-internal/src/GHC/Internal/Real.hs:622:    {-# SPECIALIZE instance Num Rational #-}
libraries/ghc-internal/src/GHC/Internal/Real.hs:628:    signum (x:%_)       =  signum x :% 1
libraries/ghc-internal/src/GHC/Internal/Real.hs:676:instance  (Integral a)  => Enum (Ratio a)  where
libraries/ghc-internal/src/GHC/Internal/Real.hs:677:    {-# SPECIALIZE instance Enum Rational #-}
libraries/ghc-internal/src/GHC/Internal/Real.hs:681:    toEnum n            =  fromIntegral n :% 1
libraries/ghc-internal/src/GHC/Internal/Real.hs:682:    fromEnum            =  fromInteger . truncate
libraries/ghc-internal/src/GHC/Internal/Real.hs:701:fromIntegral :: (Integral a, Num b) => a -> b
libraries/ghc-internal/src/GHC/Internal/Real.hs:744:(^) :: (Num a, Integral b) => a -> b -> a
libraries/ghc-internal/src/GHC/Internal/Real.hs:754:powImpl :: (Num a, Integral b) => a -> b -> a
libraries/ghc-internal/src/GHC/Internal/Real.hs:765:powImplAcc :: (Num a, Integral b) => a -> b -> a -> a
libraries/ghc-internal/src/GHC/Internal/Real.hs:953:-- INLINE pragma: see Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:958:-- INLINE pragma: see Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:968:-- INLINE pragma: see Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Real.hs:973:-- INLINE pragma: see Note [Inline Enum method helpers] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Conc/POSIX.hs:59:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Enum.hs-boot:6:module GHC.Internal.Enum (Enum) where
libraries/ghc-internal/src/GHC/Internal/Enum.hs-boot:11:class Enum a
libraries/ghc-internal/src/GHC/Internal/Int.hs:99:instance Num Int8 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:106:    signum x | x > 0       = 1
libraries/ghc-internal/src/GHC/Internal/Int.hs:107:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Int.hs:108:    signum _               = -1
libraries/ghc-internal/src/GHC/Internal/Int.hs:116:instance Enum Int8 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:123:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:127:    fromEnum (I8# x#)   = I# (int8ToInt# x#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:310:instance Num Int16 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:317:    signum x | x > 0       = 1
libraries/ghc-internal/src/GHC/Internal/Int.hs:318:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Int.hs:319:    signum _               = -1
libraries/ghc-internal/src/GHC/Internal/Int.hs:327:instance Enum Int16 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:334:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:338:    fromEnum (I16# x#)  = I# (int16ToInt# x#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:518:instance Num Int32 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:525:    signum x | x > 0       = 1
libraries/ghc-internal/src/GHC/Internal/Int.hs:526:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Int.hs:527:    signum _               = -1
libraries/ghc-internal/src/GHC/Internal/Int.hs:531:instance Enum Int32 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:539:    toEnum (I# i#)      = I32# (intToInt32# i#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:541:    toEnum i@(I# i#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:546:    fromEnum (I32# x#)  = I# (int32ToInt# x#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:731:instance Num Int64 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:738:    signum x | x > 0       = 1
libraries/ghc-internal/src/GHC/Internal/Int.hs:739:    signum 0               = 0
libraries/ghc-internal/src/GHC/Internal/Int.hs:740:    signum _               = -1
libraries/ghc-internal/src/GHC/Internal/Int.hs:744:instance Enum Int64 where
libraries/ghc-internal/src/GHC/Internal/Int.hs:751:    toEnum (I# i#)      = I64# (intToInt64# i#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:752:    fromEnum x@(I64# x#)
libraries/ghc-internal/src/GHC/Internal/Int.hs:781:-- See Note [How the Enum rules work] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Int.hs:815:-- See Note [How the Enum rules work] in GHC.Internal.Enum
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:42:import GHC.Internal.Enum (toEnum)
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:43:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:178:#{enum FFlag, FFlag
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:190:             , Num        -- ^ @since base-4.7.0.0
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:195:#{enum Flag, Flag
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:207:             , Num      -- ^ @since base-4.4.0.0
libraries/ghc-internal/src/GHC/Internal/Event/KQueue.hsc:280:fromTimeout (Timeout s) = TimeSpec (toEnum sec') (toEnum nanosec')
libraries/ghc-internal/src/GHC/Internal/Event/Manager.hs:75:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Thread.hs:54:import GHC.Internal.Num ((-), (+))
libraries/ghc-internal/src/GHC/Internal/Event/Windows/FFI.hsc:77:import GHC.Internal.Num ((*))
libraries/ghc-internal/src/GHC/Internal/Event/Windows/ConsoleEvent.hsc:28:import GHC.Internal.Enum (Enum)
libraries/ghc-internal/src/GHC/Internal/Event/Windows/ConsoleEvent.hsc:31:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Windows/ConsoleEvent.hsc:47:             , Enum -- ^ @since base-4.3.0.0
libraries/ghc-internal/src/GHC/Internal/Event/Windows/ConsoleEvent.hsc:60:toWin32ConsoleEvent :: (Eq a, Num a) => a -> Maybe ConsoleEvent
libraries/ghc-internal/src/GHC/Internal/Event/Windows/ManagedThreadPool.hs:33:import GHC.Internal.Num ((-), (+))
libraries/ghc-internal/src/GHC/Internal/Event/IntTable.hs:24:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Unique.hs:24:             , Num -- ^ @since base-4.4.0.0
libraries/ghc-internal/src/GHC/Internal/Event/TimerManager.hs:55:import GHC.Internal.Enum (maxBound)
libraries/ghc-internal/src/GHC/Internal/Event/TimerManager.hs:56:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Windows.hsc:118:import GHC.Internal.Enum (maxBound)
libraries/ghc-internal/src/GHC/Internal/Event/Windows.hsc:1012:    -- non-zero  | non-NULL   | non-zero   | "num bytes" of data have been
libraries/ghc-internal/src/GHC/Internal/Event/Poll.hsc:35:import GHC.Internal.Enum (maxBound)
libraries/ghc-internal/src/GHC/Internal/Event/Poll.hsc:36:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Poll.hsc:147:    divRoundUp num denom = (num + denom - 1) `div` denom
libraries/ghc-internal/src/GHC/Internal/Event/Poll.hsc:158:             , Num        -- ^ @since base-4.4.0.0
libraries/ghc-internal/src/GHC/Internal/Event/Poll.hsc:164:#{enum Event, Event
libraries/ghc-internal/src/GHC/Internal/Event/PSQ.hs:46:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Internal.hs:26:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/Internal.hs:97:throwErrnoIfMinus1NoRetry :: (Eq a, Num a) => String -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/Event/Array.hs:37:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/EPoll.hsc:49:import GHC.Internal.Num (Num(..))
libraries/ghc-internal/src/GHC/Internal/Event/EPoll.hsc:154:#{enum ControlOp, ControlOp
libraries/ghc-internal/src/GHC/Internal/Event/EPoll.hsc:164:               , Num        -- ^ @since base-4.4.0.0
libraries/ghc-internal/src/GHC/Internal/Event/EPoll.hsc:169:#{enum EventType, EventType
libraries/ghc-internal/src/GHC/Internal/Event/EPoll.hsc:231:    divRoundUp num denom = (num + denom - 1) `div` denom
libraries/ghc-internal/src/GHC/Internal/Natural.hs:10:-- | Compatibility module for pre ghc-bignum code.
libraries/ghc-internal/src/GHC/Internal/ByteOrder.hs:41:             , Enum    -- ^ @since base-4.11.0.0
libraries/ghc-internal/src/GHC/Internal/Integer/Logarithms.hs:4:-- | Compatibility module for pre ghc-bignum code.
libraries/ghc-internal/src/GHC/Internal/Data/Proxy.hs:81:instance Enum (Proxy s) where
libraries/ghc-internal/src/GHC/Internal/Data/Proxy.hs:84:    fromEnum _           = 0
libraries/ghc-internal/src/GHC/Internal/Data/Proxy.hs:85:    toEnum 0             = Proxy
libraries/ghc-internal/src/GHC/Internal/Data/Proxy.hs:86:    toEnum _             = errorWithoutStackTrace "Proxy.toEnum: 0 expected"
libraries/ghc-internal/src/GHC/Internal/Data/Typeable/Internal.hs:96:import GHC.Internal.Num ((-), (+), (*))
libraries/ghc-internal/src/GHC/Internal/Data/Ord.hs:31:import GHC.Internal.Enum (Bounded(..), Enum(..))
libraries/ghc-internal/src/GHC/Internal/Data/Ord.hs:104:      , Num       -- ^ @since base-4.11.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Ord.hs:154:instance (Enum a, Bounded a, Eq a) => Enum (Down a) where
libraries/ghc-internal/src/GHC/Internal/Data/Ord.hs:160:    fromEnum = complement . fromEnum . getDown
libraries/ghc-internal/src/GHC/Internal/Data/Ord.hs:161:    toEnum = Down . toEnum . complement
libraries/ghc-internal/src/GHC/Internal/Data/Version.hs:48:import GHC.Internal.Unicode          ( isDigit, isAlphaNum )
libraries/ghc-internal/src/GHC/Internal/Data/Monoid.hs:221:                 , Enum        -- ^ @since base-4.12.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Monoid.hs:274:instance (Applicative f, Num a) => Num (Ap f a) where
libraries/ghc-internal/src/GHC/Internal/Data/Monoid.hs:280:  signum      = fmap signum
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:266:                 , Num      -- ^ @since base-4.7.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:270:instance Num a => Semigroup (Sum a) where
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:275:instance Num a => Monoid (Sum a) where
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:314:                 , Num      -- ^ @since base-4.7.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:318:instance Num a => Semigroup (Product a) where
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:324:instance Num a => Monoid (Product a) where
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:364:           , Num         -- ^ @since base-4.8.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Semigroup/Internal.hs:365:           , Enum        -- ^ @since base-4.8.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Identity.hs:45:import GHC.Internal.Enum (Bounded, Enum)
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Identity.hs:48:import GHC.Internal.Num (Num)
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Identity.hs:76:             , Enum       -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Identity.hs:87:             , Num        -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Const.hs:30:import GHC.Internal.Enum (Bounded, Enum)
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Const.hs:33:import GHC.Internal.Num (Num)
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Const.hs:55:             , Enum       -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Functor/Const.hs:66:             , Num        -- ^ @since base-4.9.0.0
libraries/ghc-internal/src/GHC/Internal/Data/Foldable.hs:70:import GHC.Internal.Num  ( Num(..) )
libraries/ghc-internal/src/GHC/Internal/Data/Foldable.hs:636:    sum :: Num a => t a -> a
libraries/ghc-internal/src/GHC/Internal/Data/Foldable.hs:663:    product :: Num a => t a -> a
libraries/ghc-internal/src/GHC/Internal/Data/OldList.hs:1025:genericLength           :: (Num i) => [a] -> i
libraries/ghc-internal/src/GHC/Internal/Data/OldList.hs:1038:strictGenericLength     :: (Num i) => [b] -> i
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:112:instance a ~ b => Enum (a :~: b) where
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:113:  toEnum 0 = Refl
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:114:  toEnum _ = errorWithoutStackTrace "GHC.Internal.Data.Type.Equality.toEnum: bad argument"
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:116:  fromEnum Refl = 0
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:140:instance a ~~ b => Enum (a :~~: b) where
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:141:  toEnum 0 = HRefl
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:142:  toEnum _ = errorWithoutStackTrace "GHC.Internal.Data.Type.Equality.toEnum: bad argument"
libraries/ghc-internal/src/GHC/Internal/Data/Type/Equality.hs:144:  fromEnum HRefl = 0
libraries/ghc-internal/src/GHC/Internal/Data/Type/Coercion.hs:91:instance Coercible a b => Enum (Coercion a b) where
libraries/ghc-internal/src/GHC/Internal/Data/Type/Coercion.hs:92:  toEnum 0 = Coercion
libraries/ghc-internal/src/GHC/Internal/Data/Type/Coercion.hs:93:  toEnum _ = errorWithoutStackTrace "GHC.Internal.Data.Type.Coercion.toEnum: bad argument"
libraries/ghc-internal/src/GHC/Internal/Data/Type/Coercion.hs:95:  fromEnum Coercion = 0
libraries/ghc-internal/src/GHC/Internal/IO/Windows/Handle.hsc:256:#{enum StdHandleId,
libraries/ghc-internal/src/GHC/Internal/IO/Windows/Handle.hsc:723:  return (toEnum (fromIntegral r))
libraries/ghc-internal/src/GHC/Internal/IO/IOMode.hs:32:                             , Enum -- ^ @since base-4.2.0.0
libraries/ghc-internal/src/GHC/Internal/IO/Encoding/CodePage.hs:168:    i = fromEnum x
libraries/ghc-internal/src/GHC/Internal/IO/Device.hs:181:             , Enum -- ^ @since base-4.2.0.0
libraries/ghc-internal/src/GHC/Internal/IO/Handle/Internals.hs:82:import GHC.Internal.Num          ( Num(..) )
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:355:                fdIsNonBlocking = fromEnum (is_nonblock && fd_type /= RegularFile && fd_type /= RawDevice)
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:357:                fdIsSocket_ = fromEnum is_socket
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:487:  return fd{ fdIsNonBlocking = fromEnum is_nonblock }
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:493:          fdReady (fdFD fd) (fromIntegral $ fromEnum $ write)
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:496:                          (fromIntegral $ fromEnum $ fdIsSocket fd)
libraries/ghc-internal/src/GHC/Internal/IO/FD.hs:500:  return (toEnum (fromIntegral r))
libraries/ghc-internal/src/GHC/Internal/Windows.hs:92:import GHC.Internal.Enum (maxBound)
libraries/ghc-internal/src/GHC/Internal/Windows.hs:189:failIfZero :: (Eq a, Num a) => String -> IO a -> IO a
libraries/ghc-internal/src/GHC/Internal/InfoProv/Types.hsc:97:      ipDesc = maybe INVALID_OBJECT toEnum . readMaybe @Int $ desc,
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:46:  ( GeneralCategory(..), generalCategory, isSpace, isAlpha, isAlphaNum )
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:245:    isIdfChar c = isAlphaNum c || c `elem` "_'"
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:494:val :: Num a => a -> Digits -> a
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:501:-- The following algorithm is only linear for types whose Num operations
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:503:valSimple :: (Num a, Integral d) => a -> [d] -> a
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:554:valDig :: (Eq a, Num a) => a -> Char -> Maybe Int
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:581:readIntP :: Num a => a -> (Char -> Bool) -> (Char -> Int) -> ReadP a
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:588:readIntP' :: (Eq a, Num a) => a -> ReadP a
libraries/ghc-internal/src/GHC/Internal/Text/Read/Lex.hs:595:readBinP, readOctP, readDecP, readHexP :: (Eq a, Num a) => ReadP a
libraries/ghc-internal/cbits/IOutils.c:17:/* Enum of Handle type.  */
libraries/ghc-internal/cbits/IOutils.c:19:enum HandleType
libraries/ghc-internal/codepages/MakeTable.hs:52:        return (codePageNum f, m)
libraries/ghc-internal/codepages/MakeTable.hs:55:codePageNum :: FilePath -> Int
libraries/ghc-internal/codepages/MakeTable.hs:56:codePageNum = read . drop 2 . takeBaseName
libraries/ghc-internal/codepages/MakeTable.hs:58:readMap :: (Ord a, Enum a) => FilePath -> IO (Map.Map a Char)
libraries/ghc-internal/codepages/MakeTable.hs:65:parseLine :: Enum a => String -> Maybe (a,Char)
libraries/ghc-internal/codepages/MakeTable.hs:68:    bs:"#DBCS":_        -> Just (readHex' bs, toEnum 0xDC00)
libraries/ghc-internal/codepages/MakeTable.hs:69:    bs:"#UNDEFINED":_   -> Just (readHex' bs, toEnum 0)
libraries/ghc-internal/codepages/MakeTable.hs:73:readHex' :: Enum a => String -> a
libraries/ghc-internal/codepages/MakeTable.hs:75:    [(n,"")] -> toEnum n -- explicitly call toEnum to catch overflow errors.
libraries/ghc-internal/codepages/MakeTable.hs:80:readCharHex s = if c > fromEnum (maxBound :: Word16)
libraries/ghc-internal/codepages/MakeTable.hs:82:                    else toEnum c
libraries/ghc-internal/codepages/MakeTable.hs:115:swapMap :: (Ord a, Ord b, Enum a, Enum b) => Map.Map a b -> Map.Map b a
libraries/ghc-internal/codepages/MakeTable.hs:116:swapMap = Map.insert (toEnum 0) (toEnum 0) . Map.fromList . map swap . Map.toList
libraries/ghc-internal/codepages/MakeTable.hs:180:compress :: (Bounded a, Enum a, Ord a, Bounded b, Ord b) => Int -> Map.Map a b
libraries/ghc-internal/codepages/MakeTable.hs:237:class (Ord a, Enum a, Bounded a, Show a) => Embed a where
libraries/ghc-internal/codepages/MakeTable.hs:260:repDualByte :: Enum c => c -> String
libraries/ghc-internal/codepages/MakeTable.hs:267:    n = fromEnum c
libraries/ghc-internal/ghc-internal.cabal:91:        ghc-bignum >= 1.0 && < 2.0
libraries/time/lib/Data/Time/Calendar/Week.hs:43:instance Enum DayOfWeek where
libraries/time/lib/Data/Time/Calendar/Week.hs:44:    toEnum i = case mod i 7 of
libraries/time/lib/Data/Time/Calendar/Week.hs:52:    fromEnum Monday = 1
libraries/time/lib/Data/Time/Calendar/Week.hs:53:    fromEnum Tuesday = 2
libraries/time/lib/Data/Time/Calendar/Week.hs:54:    fromEnum Wednesday = 3
libraries/time/lib/Data/Time/Calendar/Week.hs:55:    fromEnum Thursday = 4
libraries/time/lib/Data/Time/Calendar/Week.hs:56:    fromEnum Friday = 5
libraries/time/lib/Data/Time/Calendar/Week.hs:57:    fromEnum Saturday = 6
libraries/time/lib/Data/Time/Calendar/Week.hs:58:    fromEnum Sunday = 7
libraries/time/lib/Data/Time/Calendar/Week.hs:64:    enumFromThenTo wd1 wd2 wd3 = wd1 : enumFromThenTo wd2 (toEnum $ (2 * fromEnum wd2) - (fromEnum wd1)) wd3
libraries/time/lib/Data/Time/Calendar/Week.hs:67:dayOfWeek (ModifiedJulianDay d) = toEnum $ fromInteger $ d + 3
libraries/time/lib/Data/Time/Calendar/Week.hs:72:dayOfWeekDiff a b = mod' (fromEnum a - fromEnum b) 7
libraries/time/lib/Data/Time/Calendar/Private.hs:17:class (Num t, Ord t, Show t) => ShowPadded t where
libraries/time/lib/Data/Time/Calendar/Private.hs:18:    showPaddedNum :: PadOption -> t -> String
libraries/time/lib/Data/Time/Calendar/Private.hs:21:    showPaddedNum NoPad i = show i
libraries/time/lib/Data/Time/Calendar/Private.hs:22:    showPaddedNum pad i
libraries/time/lib/Data/Time/Calendar/Private.hs:23:        | i < 0 = '-' : (showPaddedNum pad (negate i))
libraries/time/lib/Data/Time/Calendar/Private.hs:24:    showPaddedNum pad i = showPadded pad $ show i
libraries/time/lib/Data/Time/Calendar/Private.hs:27:    showPaddedNum NoPad i = show i
libraries/time/lib/Data/Time/Calendar/Private.hs:28:    showPaddedNum _pad i
libraries/time/lib/Data/Time/Calendar/Private.hs:30:    showPaddedNum pad i
libraries/time/lib/Data/Time/Calendar/Private.hs:31:        | i < 0 = '-' : (showPaddedNum pad (negate i))
libraries/time/lib/Data/Time/Calendar/Private.hs:32:    showPaddedNum pad i = showPadded pad $ show i
libraries/time/lib/Data/Time/Calendar/Private.hs:40:show2 = showPaddedNum $ Pad 2 '0'
libraries/time/lib/Data/Time/Calendar/Private.hs:43:show3 = showPaddedNum $ Pad 3 '0'
libraries/time/lib/Data/Time/Calendar/Private.hs:46:show4 = showPaddedNum $ Pad 4 '0'
libraries/time/lib/Data/Time/Calendar/Days.hs:33:instance Enum Day where
libraries/time/lib/Data/Time/Calendar/Days.hs:36:    toEnum = ModifiedJulianDay . toEnum
libraries/time/lib/Data/Time/Calendar/Days.hs:37:    fromEnum (ModifiedJulianDay a) = fromEnum a
libraries/time/lib/Data/Time/Calendar/Month.hs:33:instance Enum Month where
libraries/time/lib/Data/Time/Calendar/Month.hs:36:    toEnum = MkMonth . toEnum
libraries/time/lib/Data/Time/Calendar/Month.hs:37:    fromEnum (MkMonth a) = fromEnum a
libraries/time/lib/Data/Time/Calendar/Quarter.hs:34:instance Enum QuarterOfYear where
libraries/time/lib/Data/Time/Calendar/Quarter.hs:35:    toEnum i =
libraries/time/lib/Data/Time/Calendar/Quarter.hs:41:    fromEnum Q1 = 1
libraries/time/lib/Data/Time/Calendar/Quarter.hs:42:    fromEnum Q2 = 2
libraries/time/lib/Data/Time/Calendar/Quarter.hs:43:    fromEnum Q3 = 3
libraries/time/lib/Data/Time/Calendar/Quarter.hs:44:    fromEnum Q4 = 4
libraries/time/lib/Data/Time/Calendar/Quarter.hs:63:instance Enum Quarter where
libraries/time/lib/Data/Time/Calendar/Quarter.hs:66:    toEnum = MkQuarter . toEnum
libraries/time/lib/Data/Time/Calendar/Quarter.hs:67:    fromEnum (MkQuarter a) = fromEnum a
libraries/time/lib/Data/Time/Calendar/Quarter.hs:116:    MkQuarter ((\q -> divMod' q 4) -> (y, toEnum . succ . fromInteger -> qy))
libraries/time/lib/Data/Time/Calendar/Quarter.hs:118:        YearQuarter y qy = MkQuarter $ (y * 4) + toInteger (pred $ fromEnum qy)
libraries/time/lib/Data/Time/Calendar/WeekDate.hs:116:        (y, wy, fromEnum dw)
libraries/time/lib/Data/Time/Calendar/WeekDate.hs:121:fromWeekDate y wy dw = fromWeekCalendar FirstMostWeek Monday y wy (toEnum $ clip 1 7 dw)
libraries/time/lib/Data/Time/Calendar/WeekDate.hs:127:    (toWeekDate -> (y, wy, toEnum -> dw))
libraries/time/lib/Data/Time/Calendar/WeekDate.hs:129:        YearWeekDay y wy dw = fromWeekDate y wy (fromEnum dw)
libraries/time/lib/Data/Time/Calendar/WeekDate.hs:138:    fromWeekCalendarValid FirstMostWeek Monday y wy (toEnum dw)
libraries/time/lib/Data/Time/Clock/Internal/NominalDiffTime.hs:56:instance Enum NominalDiffTime where
libraries/time/lib/Data/Time/Clock/Internal/NominalDiffTime.hs:59:    toEnum = MkNominalDiffTime . toEnum
libraries/time/lib/Data/Time/Clock/Internal/NominalDiffTime.hs:60:    fromEnum (MkNominalDiffTime a) = fromEnum a
libraries/time/lib/Data/Time/Clock/Internal/NominalDiffTime.hs:76:instance Num NominalDiffTime where
libraries/time/lib/Data/Time/Clock/Internal/NominalDiffTime.hs:82:    signum (MkNominalDiffTime a) = MkNominalDiffTime (signum a)
libraries/time/lib/Data/Time/Clock/Internal/DiffTime.hs:34:instance Enum DiffTime where
libraries/time/lib/Data/Time/Clock/Internal/DiffTime.hs:37:    toEnum = MkDiffTime . toEnum
libraries/time/lib/Data/Time/Clock/Internal/DiffTime.hs:38:    fromEnum (MkDiffTime a) = fromEnum a
libraries/time/lib/Data/Time/Clock/Internal/DiffTime.hs:53:instance Num DiffTime where
libraries/time/lib/Data/Time/Clock/Internal/DiffTime.hs:59:    signum (MkDiffTime a) = MkDiffTime (signum a)
libraries/time/lib/Data/Time/Format/ISO8601.hs:295:                (signum mm, Right (h, m))
libraries/time/lib/Data/Time/Format/ISO8601.hs:329:intDesignator :: (Eq t, Show t, Read t, Num t) => Char -> Format t
libraries/time/lib/Data/Time/Format/ISO8601.hs:332:decDesignator :: (Eq t, Show t, Read t, Num t) => Char -> Format t
libraries/time/lib/Data/Time/Format/Format/Instances.hs:108:    formatCharacter _ 'w' = Just $ formatNumber True 1 '0' $ \wd -> (mod (fromEnum wd) 7)
libraries/time/lib/Data/Time/Format/Format/Instances.hs:109:    formatCharacter _ 'a' = Just $ formatString $ \locale wd -> snd $ (wDays locale) !! (mod (fromEnum wd) 7)
libraries/time/lib/Data/Time/Format/Format/Instances.hs:110:    formatCharacter _ 'A' = Just $ formatString $ \locale wd -> fst $ (wDays locale) !! (mod (fromEnum wd) 7)
libraries/time/lib/Data/Time/Format/Format/Instances.hs:144:    formatCharacter _ 'u' = Just $ formatNumber True 1 '0' $ \(YearWeekDay _ _ dw) -> fromEnum dw
libraries/time/lib/Data/Time/Format/Format/Class.hs:76:formatNumber fdef idef cdef ff = formatGeneral False fdef idef cdef $ \_ pado -> showPaddedNum pado . ff
libraries/time/lib/Data/Time/Format/Format/Class.hs:86:        ns = showPaddedNum padn $ (floor x :: Integer)
libraries/time/lib/Data/Time/Format/Parse/Instances.hs:328:enumDiff :: Enum a => a -> a -> Int
libraries/time/lib/Data/Time/Format/Parse/Instances.hs:329:enumDiff a b = (fromEnum a) - (fromEnum b)
libraries/time/lib/Data/Time/LocalTime/Internal/TimeZone.hs:51:showT False opt t = showPaddedNum opt ((div t 60) * 100 + (mod t 60))
libraries/time/lib/Data/Time/LocalTime/Internal/TimeZone.hs:58:        showPaddedNum opt' (div t 60) ++ ":" ++ show2 (mod t 60)
libraries/time/lib/Data/Format.hs:36:enumMap :: (IsoVariant f, Enum a) => f Int -> f a
libraries/time/lib/Data/Format.hs:37:enumMap = isoMap toEnum fromEnum
libraries/time/lib/Data/Format.hs:192:optionalSignFormat :: (Eq t, Num t) => Format t
libraries/time/lib/Data/Format.hs:195:mandatorySignFormat :: (Eq t, Num t) => Format t
libraries/time/lib/Data/Format.hs:203:readSign :: Num t => SignOption -> ReadP (t -> t)
libraries/time/lib/Data/Format.hs:208:readNumber :: (Num t, Read t) => SignOption -> Maybe Int -> Bool -> ReadP t
libraries/time/lib/Data/Format.hs:256:integerFormat :: (Show t, Read t, Num t) => SignOption -> Maybe Int -> Format t
libraries/time/lib/Data/Format.hs:259:decimalFormat :: (Show t, Read t, Num t) => SignOption -> Maybe Int -> Format t
libraries/time/test/main/Test/Arbitrary.hs:17:    arbitrary = fmap toEnum $ choose (1, 7)
libraries/time/test/main/Test/Arbitrary.hs:33:    arbitrary = liftM toEnum $ choose (1, 4)
libraries/time/test/main/Test/Arbitrary.hs:80:    coarbitrary t = coarbitrary (fromEnum t)
libraries/time/test/main/Test/Arbitrary.hs:95:    coarbitrary t = coarbitrary (fromEnum t)
libraries/time/test/main/Test/Calendar/Week.hs:29:testSucc = testAllDays "succ" $ \wd -> assertEqual "" (toEnum $ succ $ fromEnum wd) $ succ wd
libraries/time/test/main/Test/Calendar/Week.hs:32:testPred = testAllDays "pred" $ \wd -> assertEqual "" (toEnum $ pred $ fromEnum wd) $ pred wd
libraries/time/test/main/Test/Types.hs:18:class (Typeable t, Data t, NFData t, Eq t, Ord t, Ix t, Enum t) => CheckEnumInstances t
libraries/time/test/main/Test/Types.hs:20:class (Typeable t, Data t, NFData t, Eq t, Ord t, Ix t, Enum t, Bounded t) => CheckBoundedInstances t
libraries/time/test/main/Test/Format/ParseTime.hs:330:enumAdd :: Enum a => Int -> a -> a
libraries/time/test/main/Test/Format/ParseTime.hs:331:enumAdd i a = toEnum (i + fromEnum a)
libraries/text/tests/Tests/Properties/Folds.hs:180:unf n c | fromEnum c * 100 > n = Nothing
libraries/text/benchmarks/haskell/Benchmarks/ReadNumbers.hs:65:text :: (Ord a, Num a) => (t -> Either String (a,t)) -> [t] -> a
libraries/text/src/Data/Text.hs:1454:-- >>> T.spanM (\c -> state $ \i -> (fromEnum c == i, i+1)) "abcefg" `runState` 97
libraries/text/src/Data/Text.hs:1480:-- >>> T.spanEndM (\c -> state $ \i -> (fromEnum c == i, i-1)) "tuvxyz" `runState` 122
libraries/text/src/Data/Text/Lazy.hs:1363:-- >>> T.spanM (\c -> state $ \i -> (fromEnum c == i, i+1)) "abcefg" `runState` 97
libraries/text/src/Data/Text/Lazy.hs:1388:-- >>> T.spanEndM (\c -> state $ \i -> (fromEnum c == i, i-1)) "tuvxyz" `runState` 122
libraries/text/src/Data/Text/Internal/Fusion/Size.hs:102:instance Num Size where
libraries/text/src/Data/Text/Read.hs:117:signed :: Num a => Reader a -> Reader a
libraries/text/src/Data/Text/Read.hs:163:signa :: Num a => Parser a -> Parser a
libraries/text/src/Data/Text/Lazy/Builder/Int.hs:176:    | otherwise = singleton $! toEnum (fromIntegral n + 87)
libraries/text/src/Data/Text/Lazy/Read.hs:111:signed :: Num a => Reader a -> Reader a
libraries/text/src/Data/Text/Lazy/Read.hs:157:signa :: Num a => Parser a -> Parser a
libraries/text/src/Data/Text/Encoding/Error.hs:87:    = "Cannot encode character '\\x" ++ showHex (fromEnum c) ("': " ++ desc)
libraries/text/simdutf/simdutf.h:367:enum encoding_type {
libraries/text/simdutf/simdutf.h:417:enum {
libraries/text/simdutf/simdutf.h:506:enum instruction_set {
libraries/text/simdutf/simdutf.cpp:118:/* result might be undefined when input_num is zero */
libraries/text/simdutf/simdutf.cpp:3330:/* result might be undefined when input_num is zero */
libraries/containers/containers/src/Utils/Containers/Internal/BitQueue.hs:82:  BQB hi lo -> BQB (hi .|. (fromIntegral (fromEnum b) `shiftLL` (wordSize - 1))) lo
libraries/containers/containers/src/Data/Containers/ListUtils.hs:57:-- @ nubIntOn fromEnum xs @
libraries/containers/containers/src/Data/Graph.hs:778:    dnum = preArr (bounds g) forest
libraries/containers/containers/src/Data/Graph.hs:794:        dv = dnum UA.! v
libraries/containers/containers/src/Data/Graph.hs:803:        !lowv0 = F.foldl' min dv [dnum UA.! w | w <- g!v]
libraries/containers/containers-tests/tests/bitqueue-properties.hs:18:main = defaultMain $ testGroup "bitqueue-properties" $ map testNum [0..(wordSize - 2)]
libraries/containers/containers-tests/tests/bitqueue-properties.hs:20:testNum :: Int -> TestTree
libraries/containers/containers-tests/tests/bitqueue-properties.hs:21:testNum n = testProperty ("Size "++show n) (prop_n n)
libraries/containers/containers-tests/tests/map-properties.hs:262:-- Earlier versions used an Enum constraint, but this is confusing because
libraries/containers/containers-tests/tests/map-properties.hs:263:-- not all Enum instances will work properly for the Arbitrary instance here.
libraries/containers/containers-tests/tests/intmap-properties.hs:961:    isSubmapOfBy (==) (fromList [(fromEnum 'a',1)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= True
libraries/containers/containers-tests/tests/intmap-properties.hs:962:    isSubmapOfBy (<=) (fromList [(fromEnum 'a',1)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= True
libraries/containers/containers-tests/tests/intmap-properties.hs:963:    isSubmapOfBy (==) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= True
libraries/containers/containers-tests/tests/intmap-properties.hs:964:    isSubmapOfBy (==) (fromList [(fromEnum 'a',2)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= False
libraries/containers/containers-tests/tests/intmap-properties.hs:965:    isSubmapOfBy (<)  (fromList [(fromEnum 'a',1)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= False
libraries/containers/containers-tests/tests/intmap-properties.hs:966:    isSubmapOfBy (==) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) (fromList [(fromEnum 'a',1)]) @?= False
libraries/containers/containers-tests/tests/intmap-properties.hs:978:    isSubmapOf (fromList [(fromEnum 'a',1)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= True
libraries/containers/containers-tests/tests/intmap-properties.hs:979:    isSubmapOf (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= True
libraries/containers/containers-tests/tests/intmap-properties.hs:980:    isSubmapOf (fromList [(fromEnum 'a',2)]) (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) @?= False
libraries/containers/containers-tests/tests/intmap-properties.hs:981:    isSubmapOf (fromList [(fromEnum 'a',1),(fromEnum 'b',2)]) (fromList [(fromEnum 'a',1)]) @?= False
libraries/containers/containers-tests/tests/set-properties.hs:187:-- Earlier versions used an Enum constraint, but this is confusing because
libraries/containers/containers-tests/tests/set-properties.hs:188:-- not all Enum instances will work properly for the Arbitrary instance here.
libraries/containers/containers-tests/benchmarks/Sequence.hs:235:  return $ toEnum old
libraries/array/Data/Array/Base.hs:320:> hist :: (Ix a, Num b) => (a,a) -> [a] -> Array a b
libraries/Win32/Graphics/Win32/Dialogue.hsc:309:#{enum WindowStyle,
libraries/Win32/Graphics/Win32/Dialogue.hsc:326:#{enum WindowMessage,
libraries/Win32/Graphics/Win32/Misc.hsc:69:#{enum Cursor, castUINTPtrToPtr
libraries/Win32/Graphics/Win32/Misc.hsc:81:#{enum Icon, castUINTPtrToPtr
libraries/Win32/Graphics/Win32/Misc.hsc:95:#{enum MBStyle,
libraries/Win32/Graphics/Win32/Misc.hsc:119:#{enum MBStatus,
libraries/Win32/Graphics/Win32/Misc.hsc:145:#{enum StdHandleId,
libraries/Win32/Graphics/Win32/Misc.hsc:217:#{enum ExitOption,
libraries/Win32/Graphics/Win32/GDI/Pen.hsc:35:#{enum StockPen,
libraries/Win32/Graphics/Win32/GDI/Pen.hsc:59:#{enum PenStyle,
libraries/Win32/Graphics/Win32/GDI/Pen.hsc:72:#{enum PenStyle,
libraries/Win32/Graphics/Win32/GDI/Pen.hsc:79:#{enum PenStyle,
libraries/Win32/Graphics/Win32/GDI/Pen.hsc:90:#{enum PenStyle,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:67:#{enum CharSet,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:77:#{enum PitchAndFamily,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:93:#{enum OutPrecision,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:104:#{enum ClipPrecision,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:114:#{enum FontQuality,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:120:#{enum FontWeight,
libraries/Win32/Graphics/Win32/GDI/Font.hsc:195:#{enum StockFont,
libraries/Win32/Graphics/Win32/GDI/Bitmap.hsc:154:#{enum RasterOp3,
libraries/Win32/Graphics/Win32/GDI/Bitmap.hsc:282:#{enum BitmapCompression,
libraries/Win32/Graphics/Win32/GDI/Bitmap.hsc:291:#{enum ColorFormat,
libraries/Win32/Graphics/Win32/GDI/Bitmap.hsc:397:#{enum DWORD,
libraries/Win32/Graphics/Win32/GDI/Brush.hsc:61:#{enum StockBrush,
libraries/Win32/Graphics/Win32/GDI/Clip.hsc:40:#{enum ClipboardFormat,
libraries/Win32/Graphics/Win32/GDI/Palette.hsc:34:#{enum StockPalette,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:216:#{enum HWND, castUINTPtrToPtr
libraries/Win32/Graphics/Win32/GDI/Types.hsc:265:#{enum PolyFillMode,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:274:#{enum ArcDirection,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:283:#{enum GraphicsMode,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:291:#{enum BackgroundMode,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:299:#{enum HatchStyle,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:311:#{enum StretchBltMode,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:324:#{enum TextAlignment,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:338:#{enum ClippingMode,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:349:#{enum RegionType,
libraries/Win32/Graphics/Win32/GDI/Types.hsc:356:gDI_ERROR  :: Num a => a
libraries/Win32/Graphics/Win32/GDI/Types.hsc:364:#{enum UINT,
libraries/Win32/Graphics/Win32/Window.hsc:65:#{enum ClassStyle,
libraries/Win32/Graphics/Win32/Window.hsc:131:#{enum WindowStyle,
libraries/Win32/Graphics/Win32/Window.hsc:163:#{enum WindowStyleEx,
libraries/Win32/Graphics/Win32/Window.hsc:460:#{enum ShowWindowControl,
libraries/Win32/Graphics/Win32/Window.hsc:632:#{enum SetWindowPosFlags,
libraries/Win32/Graphics/Win32/Window.hsc:654:#{enum GetDCExFlags,
libraries/Win32/Graphics/Win32/Window.hsc:721:    c_CreateCaret wnd bm (maybeNum mb_w) (maybeNum mb_h)
libraries/Win32/Graphics/Win32/LayeredWindow.hsc:52:#{enum DWORD,
libraries/Win32/Graphics/Win32/Key.hsc:41:#{enum VKey,
libraries/Win32/Graphics/Win32/Key.hsc:267:#{enum KeyLayoutFlags,
libraries/Win32/Graphics/Win32/Menu.hsc:124:#{enum GMDIFlag,
libraries/Win32/Graphics/Win32/Menu.hsc:129:#{enum MenuFlag,
libraries/Win32/Graphics/Win32/Menu.hsc:137:#{enum MenuItem,
libraries/Win32/Graphics/Win32/Menu.hsc:151:#{enum MenuFlag,
libraries/Win32/Graphics/Win32/Menu.hsc:164:#{enum MenuState,
libraries/Win32/Graphics/Win32/Menu.hsc:177:#{enum TrackMenuFlag,
libraries/Win32/Graphics/Win32/Menu.hsc:194:#{enum SystemMenuCommand,
libraries/Win32/Graphics/Win32/Menu.hsc:329:#{enum MenuItemMask,
libraries/Win32/Graphics/Win32/Message.hsc:30:#{enum WindowMessage,
libraries/Win32/Graphics/Win32/Message.hsc:171:#{enum WPARAM,
libraries/Win32/Graphics/Win32/Control.hsc:37:#{enum ButtonStyle,
libraries/Win32/Graphics/Win32/Control.hsc:69:#{enum ButtonState,
libraries/Win32/Graphics/Win32/Control.hsc:99:#{enum ComboBoxStyle,
libraries/Win32/Graphics/Win32/Control.hsc:138:#{enum EditStyle,
libraries/Win32/Graphics/Win32/Control.hsc:179:#{enum ListBoxStyle,
libraries/Win32/Graphics/Win32/Control.hsc:220:#{enum ScrollbarStyle,
libraries/Win32/Graphics/Win32/Control.hsc:257:#{enum StaticControlStyle,
libraries/Win32/Graphics/Win32/Control.hsc:296:#{enum CommonControl,
libraries/Win32/Graphics/Win32/Control.hsc:334:#{enum WindowMessage,
libraries/Win32/Graphics/Win32/Window/HotKey.hsc:29:#{enum FsModifier,
libraries/Win32/Graphics/Win32/Window/PostMessage.hsc:43:#{enum HWND, castUINTPtrToPtr
libraries/Win32/Graphics/Win32/Window/IMM.hsc:67:#{enum DWORD,
libraries/Win32/Graphics/Win32/Window/IMM.hsc:82:#{enum DWORD,
libraries/Win32/Graphics/Win32/Window/AnimateWindow.hsc:23:#{enum AnimateWindowType,
libraries/Win32/Graphics/Win32/Resource.hsc:43:#{enum ResourceImageType,
libraries/Win32/Graphics/Win32/Resource.hsc:63:#{enum ResourceType, castUINTPtrToPtr
libraries/Win32/Graphics/Win32/Resource.hsc:105:#{enum LoadImageFlags,
libraries/Win32/System/Win32/Shell.hsc:58:#{enum CSIDL,
libraries/Win32/System/Win32/Shell.hsc:71:#{enum SHGetFolderPathFlags,
libraries/Win32/System/Win32/Security.hsc:70:#{enum SECURITY_DESCRIPTOR_CONTROL,
libraries/Win32/System/Win32/Security.hsc:182:#{enum SECURITY_INFORMATION,
libraries/Win32/System/Win32/HardLink.hs:65:   alloca $ \serialNum ->
libraries/Win32/System/Win32/HardLink.hs:71:                                serialNum maxLen fsFlags
libraries/Win32/System/Win32/WindowsString/Types.hsc:153:failIfNeg :: (Num a, Ord a) => String -> IO a -> IO a
libraries/Win32/System/Win32/WindowsString/Types.hsc:159:failIfZero :: (Eq a, Num a) => String -> IO a -> IO a
libraries/Win32/System/Win32/Mem.hsc:186:#{enum GlobalAllocFlags,
libraries/Win32/System/Win32/Mem.hsc:256:#{enum HeapAllocFlags,
libraries/Win32/System/Win32/Mem.hsc:321:#{enum VirtualAllocFlags,
libraries/Win32/System/Win32/Mem.hsc:330:#{enum ProtectFlags,
libraries/Win32/System/Win32/Mem.hsc:343:#{enum FreeFlags,
libraries/Win32/System/Win32/Automation/Input/Mouse.hsc:53:#{enum DWORD,
libraries/Win32/System/Win32/Automation/Input/Mouse.hsc:58:#{enum DWORD,
libraries/Win32/System/Win32/Automation/Input/Key.hsc:50:#{enum DWORD,
libraries/Win32/System/Win32/SymbolicLink/Internal.hsc:19:#{enum SymbolicLinkFlags,
libraries/Win32/System/Win32/Registry.hsc:142:#{enum HKEY, (unsafePerformIO . newForeignHANDLE . castUINTPtrToPtr)
libraries/Win32/System/Win32/Registry.hsc:187:#{enum RegCreateOptions,
libraries/Win32/System/Win32/Registry.hsc:194:#{enum REGSAM,
libraries/Win32/System/Win32/Registry.hsc:297:  return (str, fromEnum no_more)
libraries/Win32/System/Win32/Registry.hsc:311:  return (reg_ty, str, fromEnum no_more)
libraries/Win32/System/Win32/Registry.hsc:343:#{enum RegNotifyOptions,
libraries/Win32/System/Win32/Registry.hsc:517:#{enum RegRestoreFlags,
libraries/Win32/System/Win32/Registry.hsc:559:#{enum RegTypeRestriction,
libraries/Win32/System/Win32/Registry.hsc:589:#{enum RegValueType,
libraries/Win32/System/Win32/NamedPipes.hsc:78:#{enum OpenMode,
libraries/Win32/System/Win32/NamedPipes.hsc:112:#{enum PipeMode,
libraries/Win32/System/Win32/NamedPipes.hsc:194:#{enum TimeOut,
libraries/Win32/System/Win32/Process.hsc:88:#{enum ProcessAccessRights,
libraries/Win32/System/Win32/Process.hsc:141:#{enum Th32SnapFlags,
libraries/Win32/System/Win32/FileMapping/Internal.hsc:41:#{enum ProtectSectionFlags,
libraries/Win32/System/Win32/FileMapping/Internal.hsc:48:#{enum FileMapAccess,
libraries/Win32/System/Win32/DLL/Internal.hsc:48:#{enum LoadLibraryFlags,
libraries/Win32/System/Win32/Event.hsc:67:#{enum DuplicateOption,
libraries/Win32/System/Win32/Event.hsc:72:#{enum AccessMode,
libraries/Win32/System/Win32/Event.hsc:78:#{enum WaitResult,
libraries/Win32/System/Win32/Types.hsc:168:maybeNum :: Num a => Maybe a -> a
libraries/Win32/System/Win32/Types.hsc:169:maybeNum = fromMaybe 0
libraries/Win32/System/Win32/Types.hsc:171:numToMaybe :: (Eq a, Num a) => a -> Maybe a
libraries/Win32/System/Win32/Types.hsc:426:failIfNeg :: (Num a, Ord a) => String -> IO a -> IO a
libraries/Win32/System/Win32/Types.hsc:432:failIfZero :: (Eq a, Num a) => String -> IO a -> IO a
libraries/Win32/System/Win32/MinTTY.hsc:159:mAX_PATH :: Num a => a
libraries/Win32/System/Win32/NLS.hsc:68:#{enum LCID,
libraries/Win32/System/Win32/NLS.hsc:77:-- TODO: various enum functions.
libraries/Win32/System/Win32/NLS.hsc:83:#{enum CodePage,
libraries/Win32/System/Win32/NLS.hsc:122:#{enum LCTYPE,
libraries/Win32/System/Win32/NLS.hsc:337:#{enum LCMapFlags,
libraries/Win32/System/Win32/NLS.hsc:497:#{enum LocaleTestFlags,
libraries/Win32/System/Win32/NLS.hsc:517:#{enum EnumLocalesFlag,
libraries/Win32/System/Win32/NLS.hsc:586:#{enum CInt,
libraries/Win32/System/Win32/NLS.hsc:622:#{enum PrimaryLANGID,
libraries/Win32/System/Win32/NLS.hsc:695:#{enum SortID,
libraries/Win32/System/Win32/NLS.hsc:705:#{enum SubLANGID,
libraries/Win32/System/Win32/Console/Internal.hsc:55:#{enum CtrlEvent,
libraries/Win32/System/Win32/Time/Internal.hsc:226:#{enum GetTimeFormatFlags,
libraries/Win32/System/Win32/Semaphore.hsc:51:#{enum AccessMode,
libraries/Win32/System/Win32/File/Internal.hsc:41:#{enum AccessMode,
libraries/Win32/System/Win32/File/Internal.hsc:83:#{enum ShareMode,
libraries/Win32/System/Win32/File/Internal.hsc:93:#{enum CreateMode,
libraries/Win32/System/Win32/File/Internal.hsc:105:#{enum FileAttributeOrFlag,
libraries/Win32/System/Win32/File/Internal.hsc:125:#{enum FileAttributeOrFlag,
libraries/Win32/System/Win32/File/Internal.hsc:141:#{enum MoveFileFlag,
libraries/Win32/System/Win32/File/Internal.hsc:151:#{enum FilePtrDirection,
libraries/Win32/System/Win32/File/Internal.hsc:161:#{enum DriveType,
libraries/Win32/System/Win32/File/Internal.hsc:175:#{enum DefineDosDeviceFlags,
libraries/Win32/System/Win32/File/Internal.hsc:185:#{enum BinaryType,
libraries/Win32/System/Win32/File/Internal.hsc:198:#{enum FileNotificationFlag,
libraries/Win32/System/Win32/File/Internal.hsc:211:#{enum FileType,
libraries/Win32/System/Win32/File/Internal.hsc:223:#{enum LockMode,
libraries/Win32/System/Win32/File/Internal.hsc:233:#{enum GET_FILEEX_INFO_LEVELS, GET_FILEEX_INFO_LEVELS
libraries/Win32/System/Win32/SimpleMAPI.hsc:51:#{enum MapiFlag,
libraries/Win32/System/Win32/SimpleMAPI.hsc:70:-- Have to define enum values outside previous declaration due to
libraries/Win32/System/Win32/SimpleMAPI.hsc:74:#{enum MapiFlag,
libraries/Win32/System/Win32/SimpleMAPI.hsc:79:#{enum MapiFlag,
libraries/Win32/System/Win32/SimpleMAPI.hsc:253:uLONGToRc = toEnum . fromIntegral
libraries/Win32/System/Win32/Info/Computer.hsc:112:{enum COMPUTER_NAME_FORMAT,
libraries/Win32/System/Win32/Info/Computer.hsc:173:#{enum SMSetting,
libraries/Win32/System/Win32/Info/Computer.hsc:216:#{enum ProcessorFeature,
libraries/Win32/System/Win32/Info/Internal.hsc:69:#{enum SystemColor,
libraries/Win32/System/Win32/Info/Internal.hsc:224:#{enum SMSetting,
libraries/Win32/include/winternl_compat.h:18:typedef enum _OBJECT_INFORMATION_CLASS {
libraries/haskeline/tests/Pty.hs:60:                num <- fdReadNonBlocking fd buf numBytes
libraries/haskeline/System/Console/Haskeline/Emacs.hs:104:        (ys1,ys2) = span (isAlphaNum . baseChar) ys
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:60:    fmap fromEnum $ peek numEventsPtr
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:167:                $ c_ReadConsoleInput h pRecord (toEnum n) numEventsPtr
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:168:            numRead <- fmap fromEnum $ peek numEventsPtr
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:169:            forM [0..toEnum numRead-1] $ \i -> peekEvent
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:184:                            unicodeChar = toEnum (fromEnum char),
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:196:        return Coord {coordX = fromEnum cx, coordY = fromEnum cy}
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:198:        (#poke COORD, X) p (toEnum (coordX c) :: CShort)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:199:        (#poke COORD, Y) p (toEnum (coordY c) :: CShort)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:246:                        $ c_WriteConsoleW h t_arr (toEnum len)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:491:    outSize <- wideCharToMultiByte cp 0 wideBuff (toEnum wideLen)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:494:    createAndTrim (fromEnum outSize) $ \outBuff ->
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:495:        fmap fromEnum $ wideCharToMultiByte cp 0 wideBuff (toEnum wideLen)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:504:    outSize <- multiByteToWideChar cp 0 inBuff (toEnum inLen) nullPtr 0
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:506:    allocaArray0 (fromEnum outSize) $ \outBuff -> do
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:507:    outSize' <- multiByteToWideChar cp 0 inBuff (toEnum inLen) outBuff outSize
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:508:    peekCWStringLen (outBuff, fromEnum outSize')
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:545:        $ c_FillConsoleCharacter h (toEnum $ fromEnum c)
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:546:            (toEnum n) startPtr numWritten
libraries/haskeline/System/Console/Haskeline/Backend/Win32.hsc:555:            (toEnum n) startPtr numWritten
libraries/haskeline/System/Console/Haskeline/Backend/Posix.hsc:84:                    then return $ Just Layout {height=fromEnum rows,width=fromEnum cols}
libraries/haskeline/System/Console/Haskeline/Backend/WCWidth.hs:19:wcwidth c = case haskeline_mk_wcwidth $ toEnum $ fromEnum c of
libraries/haskeline/System/Console/Haskeline/Term.hs:178:hGetByte = guardedEOF $ liftM (toEnum . fromEnum) . hGetChar
libraries/haskeline/System/Console/Haskeline/Key.hs:62:        unCtrld = toEnum (fromEnum c .|. ctrlBits)
libraries/haskeline/System/Console/Haskeline/Key.hs:94:setControlBits '?' = toEnum 127
libraries/haskeline/System/Console/Haskeline/Key.hs:95:setControlBits c = toEnum $ fromEnum c .&. complement ctrlBits
libraries/haskeline/System/Console/Haskeline/Vi.hs:144:        addDigit = foreachDigit addNum ['0'..'9']
libraries/haskeline/System/Console/Haskeline/Vi.hs:255:            [ foreachDigit addNum ['0'..'9'] >+> loop
libraries/haskeline/System/Console/Haskeline/Vi.hs:301:isWordChar = isAlphaNum .||. (=='_')
libraries/haskeline/System/Console/Haskeline/Vi.hs:311:          toDigit d = fromEnum d - fromEnum '0'
libraries/haskeline/System/Console/Haskeline/LineState.hs:342:addNum :: Int -> ArgMode s -> ArgMode s
libraries/haskeline/System/Console/Haskeline/LineState.hs:343:addNum n am
libraries/ghc-bignum/config.mk.in:1:# NB: This file lives in the top-level ghc-bignum folder, and not in
libraries/ghc-bignum/configure.ac:2:AC_INIT([GHC BigNum library], [1.0], [libraries@haskell.org], [ghc-bignum])
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:104:   -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:543:                                 -- see Note [ghc-bignum exceptions] in
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:609:                  -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:637:                                 -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:1649:{- Note [ghc-bignum and error symbols]
libraries/ghc-bignum/src/GHC/Num/BigNat.hs:1651:ghc-bignum only depends on ghc-prim, not base.
libraries/ghc-bignum/src/GHC/Num/Backend/FFI.hs:33:-- | ghc-bignum backend name
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:31:-- | ghc-bignum backend name
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:86:                        -- see Note [ghc-bignum exceptions] in
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:114:               -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:132:               -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:140:                                    -- see Note [ghc-bignum exceptions] in
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:162:                  -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/Backend/Check.hs:430:               -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/Backend/Native.hs:38:-- | ghc-bignum backend name
libraries/ghc-bignum/src/GHC/Num/Backend/GMP.hs:40:-- | ghc-bignum backend name
libraries/ghc-bignum/src/GHC/Num/Backend/Selected.hs:23:#error Undefined BigNum backend. Use a flag to select it (e.g. gmp, native, ffi)`
libraries/ghc-bignum/src/GHC/Num/Integer.hs:665:integerSignum :: Integer -> Integer
libraries/ghc-bignum/src/GHC/Num/Integer.hs:666:integerSignum !j = IS (integerSignum# j)
libraries/ghc-bignum/src/GHC/Num/Integer.hs:948:                                    -- see Note [ghc-bignum exceptions] in GHC.Num.Primitives
libraries/ghc-bignum/src/GHC/Num/Integer.hs:1429:  class Num a where
libraries/ghc-bignum/src/GHC/Num/Integer.hs:1440:  fromIntegral :: (Integral a, Num b) => a -> b
libraries/ghc-bignum/src/GHC/Num/Integer.hs:1468:Compared to optimising `fromIntegral :: (Integral a, Num b) => a -> b` where `a`
libraries/ghc-bignum/src/GHC/Num/Integer.hs:1580:   For this reason, a bunch of rules for bignum primitives as we have now were
libraries/ghc-bignum/src/GHC/Num/Integer.hs:1586:to only rely on rewrite rules for bignum functions.
libraries/ghc-bignum/src/GHC/Num/Primitives.hs:598:-- Note [ghc-bignum exceptions]
libraries/ghc-bignum/src/GHC/Num/Primitives.hs:619:   !_ -> 0# -- see Note [ghc-bignum exceptions]
libraries/ghc-bignum/src/GHC/Num/Primitives.hs:623:   !_ -> 0## -- see Note [ghc-bignum exceptions]
libraries/ghc-bignum/src/GHC/Num/Primitives.hs:627:   !_ -> 0## -- see Note [ghc-bignum exceptions]
libraries/ghc-bignum/src/GHC/Num/Primitives.hs:631:   !_ -> 0## -- see Note [ghc-bignum exceptions]
libraries/ghc-bignum/src/GHC/Num/Natural.hs:427:-- | Signum for Natural
libraries/ghc-bignum/src/GHC/Num/Natural.hs:428:naturalSignum :: Natural -> Natural
libraries/ghc-bignum/src/GHC/Num/Natural.hs:429:naturalSignum (NS 0##) = NS 0##
libraries/ghc-bignum/src/GHC/Num/Natural.hs:430:naturalSignum _        = NS 1##
libraries/ghc-bignum/ghc-bignum.cabal:4:synopsis:            GHC BigNum library
libraries/ghc-bignum/ghc-bignum.cabal:88:    -- GHC has wired-in IDs from the ghc-bignum package. Hence the unit-id
libraries/ghc-bignum/ghc-bignum.cabal:93:    -- See Note [ghc-bignum and error symbols]
libraries/ghc-bignum/README.rst:1:GHC BIGNUM LIBRARY
libraries/ghc-bignum/README.rst:42:    order to call the appropriate platform specific BigNum API.
libraries/ghc-bignum/README.rst:44:  * to test new native backends: just tweak the ghc-bignum build to link with
libraries/ghc-bignum/README.rst:62:ghc-bignum is below `base` package. Hence if we use the natural set of
libraries/ghc-bignum/include/HsIntegerGmp.h.in:3:/* Whether GMP is embedded into ghc-bignum */
libraries/ghc-bignum/GMP.rst:54:These options are then used when ghc-bignum package is configured: in the
libraries/ghc-bignum/GMP.rst:69:When GMP is statically linked (in-tree build), a user of the ghc-bignum package
libraries/ghc-bignum/GMP.rst:81:ghc-bignum package.
libraries/ghc-bignum/cbits/gmp_wrappers.c:183:/* Convert bignum to a `double`, truncating if necessary
libraries/bytestring/tests/QuickCheckUtils.hs:81:      toChar = toEnum . fromIntegral
libraries/bytestring/tests/QuickCheckUtils.hs:96:      toChar = toEnum . fromIntegral
libraries/bytestring/tests/builder/Data/ByteString/Builder/Prim/TestUtils.hs:372:parseVar :: (Num a, Bits a) => [Word8] -> (a, [Word8])
libraries/bytestring/tests/builder/Data/ByteString/Builder/Tests.hs:974:        coerceWord64ToDouble $ (fromIntegral (fromEnum sign) `shiftL` 63) .|. (fromIntegral expo `shiftL` 52) .|. mantissa
libraries/bytestring/tests/Properties.hs:166:                    '+':num -> C.pack $ '+' : zeroStr ++ num ++ tailStr
libraries/bytestring/tests/Properties.hs:167:                    '-':num -> C.pack $ '-' : zeroStr ++ num ++ tailStr
libraries/bytestring/tests/Properties.hs:168:                    num     -> C.pack $ zeroStr ++ num ++ tailStr
libraries/bytestring/tests/Properties.hs:220:                    '+':num -> LC.pack ('+' : zeroStr) `D.append` LC.pack (num ++ tailStr)
libraries/bytestring/tests/Properties.hs:221:                    '-':num -> LC.pack ('-' : zeroStr) `D.append` LC.pack (num ++ tailStr)
libraries/bytestring/tests/Properties.hs:222:                    num     -> LC.pack $ zeroStr ++ num ++ tailStr
libraries/bytestring/tests/Properties.hs:747:    , testProperty "scanl is lazy" $ \ xs -> let char1 +. char2 = toEnum (fromEnum char1 + fromEnum char2) in
libraries/bytestring/tests/Properties.hs:749:    , testProperty "scanl1 is lazy" $ \ xs -> D.length xs > 0 ==> let char1 +. char2 = toEnum (fromEnum char1 + fromEnum char2) in
libraries/bytestring/bench/BenchAll.hs:303:      [ benchFE "char7"      $ toEnum       >$< P.char7
libraries/bytestring/bench/BenchAll.hs:304:      , benchFE "char8"      $ toEnum       >$< P.char8
libraries/bytestring/bench/BenchAll.hs:305:      , benchBE "charUtf8"   $ toEnum       >$< P.charUtf8
libraries/bytestring/Data/ByteString.hs:1069:-- > break (==99) "abcd" == breakByte 99 "abcd" -- fromEnum 'c' == 99
libraries/bytestring/Data/ByteString.hs:1099:-- > span  (==99) "abcd" == spanByte 99 "abcd" -- fromEnum 'c' == 99
libraries/bytestring/Data/ByteString.hs:1145:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/bytestring/Data/ByteString.hs:1174:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/bytestring/Data/ByteString.hs:1175:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/bytestring/Data/ByteString.hs:1176:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/bytestring/Data/ByteString/Lazy.hs:1025:-- > break (==99) "abcd" == breakByte 99 "abcd" -- fromEnum 'c' == 99
libraries/bytestring/Data/ByteString/Lazy.hs:1041:-- > span  (==99) "abcd" == spanByte 99 "abcd" -- fromEnum 'c' == 99
libraries/bytestring/Data/ByteString/Lazy.hs:1087:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/bytestring/Data/ByteString/Lazy.hs:1103:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/bytestring/Data/ByteString/Lazy.hs:1104:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/bytestring/Data/ByteString/Lazy.hs:1105:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/bytestring/Data/ByteString/Internal/Pure.hs:315:encodeSignedDec :: (Eq a, Num a, Integral a) => a -> Ptr Word8 -> IO (Ptr Word8)
libraries/bytestring/Data/ByteString/Internal/Pure.hs:331:encodeUnsignedDec :: (Eq a, Num a, Integral a) => a -> Ptr Word8 -> IO (Ptr Word8)
libraries/bytestring/Data/ByteString/Internal/Pure.hs:340:encodeUnsignedDec' :: (Eq a, Num a, Integral a) => a -> Ptr Word8 -> Ptr Word8 -> IO (Ptr Word8)
libraries/bytestring/Data/ByteString/Internal/Pure.hs:353:encodeUnsignedDecPadded :: (Eq a, Num a, Integral a) => Int -> a -> Ptr Word8 -> IO ()
libraries/bytestring/Data/ByteString/Internal/Pure.hs:369:encodeUnsignedHex :: (Eq a, Num a, Integral a, Bits a) => a -> Ptr Word8 -> IO (Ptr Word8)
libraries/bytestring/Data/ByteString/Internal/Pure.hs:376:encodeUnsignedHex' :: (Eq a, Num a, Integral a, Bits a) => a -> Ptr Word8 -> Ptr Word8 -> IO (Ptr Word8)
libraries/bytestring/Data/ByteString/Builder/RealFloat/D2S.hs:759:      q = log10pow2 e2 - fromEnum (e2 > 3)
libraries/bytestring/Data/ByteString/Builder/RealFloat/D2S.hs:783:      q = log10pow5 (-e2) - fromEnum (-e2 > 1)
libraries/bytestring/Data/ByteString/Short/Internal.hs:1145:-- > split 10  "a\nb\nd\ne" == ["a","b","d","e"]   -- fromEnum '\n' == 10
libraries/bytestring/Data/ByteString/Short/Internal.hs:1146:-- > split 97  "aXaXaXa"    == ["","X","X","X",""] -- fromEnum 'a' == 97
libraries/bytestring/Data/ByteString/Short/Internal.hs:1147:-- > split 120 "x"          == ["",""]             -- fromEnum 'x' == 120
libraries/bytestring/Data/ByteString/Short/Internal.hs:1167:-- > splitWith (==97) "aabbaca" == ["","","bb","c",""] -- fromEnum 'a' == 97
libraries/parsec/src/Text/Parsec/Language.hs:46:                , identLetter    = alphaNum <|> oneOf "_'"
libraries/parsec/src/Text/Parsec/Language.hs:65:                , identLetter    = alphaNum <|> oneOf "_'"
libraries/parsec/src/Text/Parsec/Language.hs:87:               , identLetter    = alphaNum <|> oneOf "_'"
libraries/parsec/src/Text/Parsec/Prim.hs:716:-- >                  ; cs <- many (alphaNum <|> char '_')
libraries/parsec/src/Text/Parsec/Error.hs:68:instance Enum Message where
libraries/parsec/src/Text/Parsec/Error.hs:69:    fromEnum (SysUnExpect _) = 0
libraries/parsec/src/Text/Parsec/Error.hs:70:    fromEnum (UnExpect    _) = 1
libraries/parsec/src/Text/Parsec/Error.hs:71:    fromEnum (Expect      _) = 2
libraries/parsec/src/Text/Parsec/Error.hs:72:    fromEnum (Message     _) = 3
libraries/parsec/src/Text/Parsec/Error.hs:73:    toEnum _ = error "toEnum is undefined for Message"
libraries/parsec/src/Text/Parsec/Error.hs:79:    m1 == m2 = fromEnum m1 == fromEnum m2
libraries/parsec/src/Text/Parsec/Error.hs:87:    compare msg1 msg2 = compare (fromEnum msg1) (fromEnum msg2)
libraries/parsec/src/Text/Parsec/Char.hs:110:alphaNum :: (Stream s m Char => ParsecT s u m Char)
libraries/parsec/src/Text/Parsec/Char.hs:111:{-# INLINABLE alphaNum #-}
libraries/parsec/src/Text/Parsec/Char.hs:112:alphaNum            = satisfy isAlphaNum    <?> "letter or digit"
libraries/parsec/src/Text/Parsec/Token.hs:81:    -- For example @alphaNum \<|> char \'_\'@.
libraries/parsec/src/Text/Parsec/Token.hs:462:    escapeCode      = charEsc <|> charNum <|> charAscii <|> charControl
libraries/parsec/src/Text/Parsec/Token.hs:467:                        ; return (toEnum (fromEnum code - fromEnum 'A' + 1))
libraries/parsec/src/Text/Parsec/Token.hs:470:    charNum         = do{ code <- decimal
libraries/parsec/src/Text/Parsec/Token.hs:475:                          else return (toEnum (fromInteger code))
libraries/base/tests/enum01.stdout:1:Testing Enum Int: 
libraries/base/tests/enum01.stdout:9:    (map fromEnum [(1::Int),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum01.stdout:51:Testing Enum Integer: 
libraries/base/tests/enum01.stdout:57:    (map fromEnum [(1::Integer),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout:76:Testing Enum Char: 
libraries/base/tests/enum01.stdout:85:    (map fromEnum ['X',minBound,maxBound]) = [88,0,1114111]
libraries/base/tests/enum01.stdout:111:Testing Enum (): 
libraries/base/tests/enum01.stdout:118:    (toEnum 0)::() = ()
libraries/base/tests/enum01.stdout:119:    (toEnum 1)::() = error "Prelude.Enum.().toEnum: bad argument"
libraries/base/tests/enum01.stdout:120:    (fromEnum ()) = 0
libraries/base/tests/enum01.stdout:125:Testing Enum Ordering (derived): 
libraries/base/tests/enum01.stdout:132:    (toEnum 0)::Ordering = LT
libraries/base/tests/enum01.stdout:133:    (toEnum 5)::Ordering = error "Prelude.Enum.Ordering.toEnum: bad argument"
libraries/base/tests/enum01.stdout:134:    (fromEnum LT) = 0
libraries/base/tests/enum01.stdout:135:    (fromEnum EQ) = 1
libraries/base/tests/enum01.stdout:136:    (fromEnum GT) = 2
libraries/base/tests/enum01.stdout:162:Testing Enum Bool: 
libraries/base/tests/enum01.stdout:169:    (toEnum 0)::Bool = False
libraries/base/tests/enum01.stdout:170:    (toEnum 5)::Bool = error "Prelude.Enum.Bool.toEnum: bad argument"
libraries/base/tests/enum01.stdout:171:    (fromEnum False) = 0
libraries/base/tests/enum01.stdout:172:    (fromEnum True) = 1
libraries/base/tests/enum01.stdout:189:Testing Enum Rational: 
libraries/base/tests/enum01.stdout:195:    (map fromEnum [(1::Rational),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout:214:Testing Enum (Ratio Int): 
libraries/base/tests/enum01.stdout:220:    (map fromEnum [(1::Ratio Int),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout:223:    (take 7 [((toEnum ((maxBound::Int)-5))::Ratio Int)..]) = [2147483642 % 1,2147483643 % 1,2147483644 % 1,2147483645 % 1,2147483646 % 1,2147483647 % 1,(-2147483648) % 1]
libraries/base/tests/enum03.stdout-ws-64:1:Testing Enum Word8:
libraries/base/tests/enum03.stdout-ws-64:9:    (toEnum (maxBound::Int))::Word8 = error "Enum.toEnum{Word8}: tag (9223372036854775807) is outside of bounds (0,255)"
libraries/base/tests/enum03.stdout-ws-64:10:    (map fromEnum [(1::Word8),minBound,maxBound]) = [1,0,255]
libraries/base/tests/enum03.stdout-ws-64:36:Testing Enum Word16:
libraries/base/tests/enum03.stdout-ws-64:44:    (toEnum (maxBound::Int))::Word16 = error "Enum.toEnum{Word16}: tag (9223372036854775807) is outside of bounds (0,65535)"
libraries/base/tests/enum03.stdout-ws-64:45:    (map fromEnum [(1::Word16),minBound,maxBound]) = [1,0,65535]
libraries/base/tests/enum03.stdout-ws-64:71:Testing Enum Word32:
libraries/base/tests/enum03.stdout-ws-64:79:    (toEnum (maxBound::Int))::Word32 = error "Enum.toEnum{Word32}: tag (9223372036854775807) is outside of bounds (0,4294967295)"
libraries/base/tests/enum03.stdout-ws-64:80:    (map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]) = [1,0,4294967295]
libraries/base/tests/enum03.stdout-ws-64:81:    fromEnum (maxBound::Word32) = 4294967295
libraries/base/tests/enum03.stdout-ws-64:107:Testing Enum Word64:
libraries/base/tests/enum03.stdout-ws-64:115:    (toEnum (maxBound::Int))::Word64 = 9223372036854775807
libraries/base/tests/enum03.stdout-ws-64:116:    (map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]) = [1,0,9223372036854775807]
libraries/base/tests/enum03.stdout-ws-64:117:    fromEnum (maxBound::Word64) = error "Enum.fromEnum{Word64}: value (18446744073709551615) is outside of Int's bounds (-9223372036854775808,9223372036854775807)"
libraries/base/tests/enum02.stdout-alpha-dec-osf3:1:Testing Enum Int8:
libraries/base/tests/enum02.stdout-alpha-dec-osf3:9:    (toEnum (maxBound::Int))::Int8 = error "Enum.toEnum{Int8}: tag (9223372036854775807) is outside of bounds (-128,127)"
libraries/base/tests/enum02.stdout-alpha-dec-osf3:10:    (map fromEnum [(1::Int8),minBound,maxBound]) = [1,-128,127]
libraries/base/tests/enum02.stdout-alpha-dec-osf3:36:Testing Enum Int16:
libraries/base/tests/enum02.stdout-alpha-dec-osf3:44:    (toEnum (maxBound::Int))::Int16 = error "Enum.toEnum{Int16}: tag (9223372036854775807) is outside of bounds (-32768,32767)"
libraries/base/tests/enum02.stdout-alpha-dec-osf3:45:    (map fromEnum [(1::Int16),minBound,maxBound]) = [1,-32768,32767]
libraries/base/tests/enum02.stdout-alpha-dec-osf3:71:Testing Enum Int32:
libraries/base/tests/enum02.stdout-alpha-dec-osf3:79:    (toEnum (maxBound::Int))::Int32 = error "Enum.toEnum{Int32}: tag (9223372036854775807) is outside of bounds (-2147483648,2147483647)"
libraries/base/tests/enum02.stdout-alpha-dec-osf3:80:    (map fromEnum [(1::Int32),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout-alpha-dec-osf3:106:Testing Enum Int64:
libraries/base/tests/enum02.stdout-alpha-dec-osf3:114:    (toEnum (maxBound::Int))::Int64 = 9223372036854775807
libraries/base/tests/enum02.stdout-alpha-dec-osf3:115:    (map fromEnum [(1::Int64),fromInt (minBound::Int) ,fromInt (maxBound::Int)]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum02.stdout-alpha-dec-osf3:116:    fromEnum (maxBound::Int64) = 9223372036854775807
libraries/base/tests/enum02.hs:1:-- !!! Testing the Int Enum instances.
libraries/base/tests/enum02.hs:9:  putStrLn "Testing Enum Int8:"
libraries/base/tests/enum02.hs:11:  putStrLn "Testing Enum Int16:"
libraries/base/tests/enum02.hs:13:  putStrLn "Testing Enum Int32:"
libraries/base/tests/enum02.hs:15:  putStrLn "Testing Enum Int64:"
libraries/base/tests/enum02.hs:33:  mayBomb   (printTest ((toEnum (maxBound::Int))::Int8))
libraries/base/tests/enum02.hs:36:  printTest ((map fromEnum [(1::Int8),minBound,maxBound]))
libraries/base/tests/enum02.hs:91:  mayBomb   (printTest ((toEnum (maxBound::Int))::Int16))
libraries/base/tests/enum02.hs:95:  printTest ((map fromEnum [(1::Int16),minBound,maxBound]))
libraries/base/tests/enum02.hs:150:  mayBomb   (printTest ((toEnum (maxBound::Int))::Int32))
libraries/base/tests/enum02.hs:153:  printTest ((map fromEnum [(1::Int32),minBound,maxBound]))
libraries/base/tests/enum02.hs:208:  mayBomb   (printTest ((toEnum (maxBound::Int))::Int64))
libraries/base/tests/enum02.hs:211:  printTest ((map fromEnum [(1::Int64),fromIntegral (minBound::Int) ,fromIntegral (maxBound::Int)]))
libraries/base/tests/enum02.hs:212:  mayBomb   (printTest (fromEnum (maxBound::Int64)))
libraries/base/tests/enum03.stdout:1:Testing Enum Word8:
libraries/base/tests/enum03.stdout:9:    (toEnum (maxBound::Int))::Word8 = error "Enum.toEnum{Word8}: tag (2147483647) is outside of bounds (0,255)"
libraries/base/tests/enum03.stdout:10:    (map fromEnum [(1::Word8),minBound,maxBound]) = [1,0,255]
libraries/base/tests/enum03.stdout:36:Testing Enum Word16:
libraries/base/tests/enum03.stdout:44:    (toEnum (maxBound::Int))::Word16 = error "Enum.toEnum{Word16}: tag (2147483647) is outside of bounds (0,65535)"
libraries/base/tests/enum03.stdout:45:    (map fromEnum [(1::Word16),minBound,maxBound]) = [1,0,65535]
libraries/base/tests/enum03.stdout:71:Testing Enum Word32:
libraries/base/tests/enum03.stdout:79:    (toEnum (maxBound::Int))::Word32 = 2147483647
libraries/base/tests/enum03.stdout:80:    (map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]) = [1,0,2147483647]
libraries/base/tests/enum03.stdout:81:    fromEnum (maxBound::Word32) = error "Enum.fromEnum{Word32}: value (4294967295) is outside of Int's bounds (-2147483648,2147483647)"
libraries/base/tests/enum03.stdout:107:Testing Enum Word64:
libraries/base/tests/enum03.stdout:115:    (toEnum (maxBound::Int))::Word64 = 2147483647
libraries/base/tests/enum03.stdout:116:    (map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]) = [1,0,2147483647]
libraries/base/tests/enum03.stdout:117:    fromEnum (maxBound::Word64) = error "Enum.fromEnum{Word64}: value (18446744073709551615) is outside of Int's bounds (-2147483648,2147483647)"
libraries/base/tests/T10412.hs:6:    print $ isAlphaNum '\768'
libraries/base/tests/unicode003.hs:57:generalCategoryHash = fromIntegral . fromEnum . generalCategory
libraries/base/tests/enum01.stdout-ws-64:1:Testing Enum Int: 
libraries/base/tests/enum01.stdout-ws-64:9:    (map fromEnum [(1::Int),minBound,maxBound]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum01.stdout-ws-64:51:Testing Enum Integer: 
libraries/base/tests/enum01.stdout-ws-64:57:    (map fromEnum [(1::Integer),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-ws-64:76:Testing Enum Char: 
libraries/base/tests/enum01.stdout-ws-64:85:    (map fromEnum ['X',minBound,maxBound]) = [88,0,1114111]
libraries/base/tests/enum01.stdout-ws-64:111:Testing Enum (): 
libraries/base/tests/enum01.stdout-ws-64:118:    (toEnum 0)::() = ()
libraries/base/tests/enum01.stdout-ws-64:119:    (toEnum 1)::() = error "Prelude.Enum.().toEnum: bad argument"
libraries/base/tests/enum01.stdout-ws-64:120:    (fromEnum ()) = 0
libraries/base/tests/enum01.stdout-ws-64:125:Testing Enum Ordering (derived): 
libraries/base/tests/enum01.stdout-ws-64:132:    (toEnum 0)::Ordering = LT
libraries/base/tests/enum01.stdout-ws-64:133:    (toEnum 5)::Ordering = error "Prelude.Enum.Ordering.toEnum: bad argument"
libraries/base/tests/enum01.stdout-ws-64:134:    (fromEnum LT) = 0
libraries/base/tests/enum01.stdout-ws-64:135:    (fromEnum EQ) = 1
libraries/base/tests/enum01.stdout-ws-64:136:    (fromEnum GT) = 2
libraries/base/tests/enum01.stdout-ws-64:162:Testing Enum Bool: 
libraries/base/tests/enum01.stdout-ws-64:169:    (toEnum 0)::Bool = False
libraries/base/tests/enum01.stdout-ws-64:170:    (toEnum 5)::Bool = error "Prelude.Enum.Bool.toEnum: bad argument"
libraries/base/tests/enum01.stdout-ws-64:171:    (fromEnum False) = 0
libraries/base/tests/enum01.stdout-ws-64:172:    (fromEnum True) = 1
libraries/base/tests/enum01.stdout-ws-64:189:Testing Enum Rational: 
libraries/base/tests/enum01.stdout-ws-64:195:    (map fromEnum [(1::Rational),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-ws-64:214:Testing Enum (Ratio Int): 
libraries/base/tests/enum01.stdout-ws-64:220:    (map fromEnum [(1::Ratio Int),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-ws-64:223:    (take 7 [((toEnum ((maxBound::Int)-5))::Ratio Int)..]) = [9223372036854775802 % 1,9223372036854775803 % 1,9223372036854775804 % 1,9223372036854775805 % 1,9223372036854775806 % 1,9223372036854775807 % 1,(-9223372036854775808) % 1]
libraries/base/tests/enum03.stdout-alpha-dec-osf3:1:Testing Enum Word8:
libraries/base/tests/enum03.stdout-alpha-dec-osf3:9:    (toEnum (maxBound::Int))::Word8 = error "Enum.toEnum{Word8}: tag (9223372036854775807) is outside of bounds (0,255)"
libraries/base/tests/enum03.stdout-alpha-dec-osf3:10:    (map fromEnum [(1::Word8),minBound,maxBound]) = [1,0,255]
libraries/base/tests/enum03.stdout-alpha-dec-osf3:36:Testing Enum Word16:
libraries/base/tests/enum03.stdout-alpha-dec-osf3:44:    (toEnum (maxBound::Int))::Word16 = error "Enum.toEnum{Word16}: tag (9223372036854775807) is outside of bounds (0,65535)"
libraries/base/tests/enum03.stdout-alpha-dec-osf3:45:    (map fromEnum [(1::Word16),minBound,maxBound]) = [1,0,65535]
libraries/base/tests/enum03.stdout-alpha-dec-osf3:71:Testing Enum Word32:
libraries/base/tests/enum03.stdout-alpha-dec-osf3:79:    (toEnum (maxBound::Int))::Word32 = error "Enum.toEnum{Word32}: tag (9223372036854775807) is outside of bounds (0,4294967295)"
libraries/base/tests/enum03.stdout-alpha-dec-osf3:80:    (map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]) = [1,0,4294967295]
libraries/base/tests/enum03.stdout-alpha-dec-osf3:81:    fromEnum (maxBound::Word32) = 4294967295
libraries/base/tests/enum03.stdout-alpha-dec-osf3:107:Testing Enum Word64:
libraries/base/tests/enum03.stdout-alpha-dec-osf3:115:    (toEnum (maxBound::Int))::Word64 = 9223372036854775807
libraries/base/tests/enum03.stdout-alpha-dec-osf3:116:    (map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]) = [1,0,9223372036854775807]
libraries/base/tests/enum03.stdout-alpha-dec-osf3:117:    fromEnum (maxBound::Word64) = error "Enum.fromEnum{Word64}: value (18446744073709551615) is outside of Int's bounds (-9223372036854775808,9223372036854775807)"
libraries/base/tests/unicode001.stdout:1:            upper uppr2 lower lowr2 alpha alnum digit print space cntrl 
libraries/base/tests/enum02.stdout:1:Testing Enum Int8:
libraries/base/tests/enum02.stdout:9:    (toEnum (maxBound::Int))::Int8 = error "Enum.toEnum{Int8}: tag (2147483647) is outside of bounds (-128,127)"
libraries/base/tests/enum02.stdout:10:    (map fromEnum [(1::Int8),minBound,maxBound]) = [1,-128,127]
libraries/base/tests/enum02.stdout:36:Testing Enum Int16:
libraries/base/tests/enum02.stdout:44:    (toEnum (maxBound::Int))::Int16 = error "Enum.toEnum{Int16}: tag (2147483647) is outside of bounds (-32768,32767)"
libraries/base/tests/enum02.stdout:45:    (map fromEnum [(1::Int16),minBound,maxBound]) = [1,-32768,32767]
libraries/base/tests/enum02.stdout:71:Testing Enum Int32:
libraries/base/tests/enum02.stdout:79:    (toEnum (maxBound::Int))::Int32 = 2147483647
libraries/base/tests/enum02.stdout:80:    (map fromEnum [(1::Int32),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout:106:Testing Enum Int64:
libraries/base/tests/enum02.stdout:114:    (toEnum (maxBound::Int))::Int64 = 2147483647
libraries/base/tests/enum02.stdout:115:    (map fromEnum [(1::Int64),fromIntegral (minBound::Int) ,fromIntegral (maxBound::Int)]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout:116:    fromEnum (maxBound::Int64) = error "Enum.fromEnum{Int64}: value (9223372036854775807) is outside of Int's bounds (-2147483648,2147483647)"
libraries/base/tests/enum01.hs:1:-- !!! Testing the Prelude's Enum instances.
libraries/base/tests/enum01.hs:10:   -- Enum Int
libraries/base/tests/enum01.hs:11:  putStrLn "Testing Enum Int: "
libraries/base/tests/enum01.hs:13:   -- Enum Integer
libraries/base/tests/enum01.hs:14:  putStrLn "Testing Enum Integer: "
libraries/base/tests/enum01.hs:16:   -- Enum Char
libraries/base/tests/enum01.hs:17:  putStrLn "Testing Enum Char: "
libraries/base/tests/enum01.hs:19:   -- Enum ()
libraries/base/tests/enum01.hs:20:  putStrLn "Testing Enum (): "
libraries/base/tests/enum01.hs:22:   -- Enum Ordering
libraries/base/tests/enum01.hs:23:  putStrLn "Testing Enum Ordering (derived): "
libraries/base/tests/enum01.hs:25:   -- Enum Bool
libraries/base/tests/enum01.hs:26:  putStrLn "Testing Enum Bool: "
libraries/base/tests/enum01.hs:28:   -- Enum Rational
libraries/base/tests/enum01.hs:29:  putStrLn "Testing Enum Rational: "
libraries/base/tests/enum01.hs:31:   -- Enum (Ratio Int)
libraries/base/tests/enum01.hs:32:  putStrLn "Testing Enum (Ratio Int): "
libraries/base/tests/enum01.hs:73:   are instances of Enum as well as being Bounded.
libraries/base/tests/enum01.hs:103:  printTest ((map fromEnum [(1::Int),minBound,maxBound]))
libraries/base/tests/enum01.hs:182:  printTest ((map fromEnum ['X',minBound,maxBound]))
libraries/base/tests/enum01.hs:243:  printTest ((toEnum 0)::())
libraries/base/tests/enum01.hs:244:  mayBomb   (printTest ((toEnum 1)::()))
libraries/base/tests/enum01.hs:247:  printTest ((fromEnum ()))
libraries/base/tests/enum01.hs:274:  printTest ((toEnum 0)::Ordering)
libraries/base/tests/enum01.hs:275:  mayBomb   (printTest ((toEnum 5)::Ordering))
libraries/base/tests/enum01.hs:278:  printTest ((fromEnum LT))
libraries/base/tests/enum01.hs:279:  printTest ((fromEnum EQ))
libraries/base/tests/enum01.hs:280:  printTest ((fromEnum GT))
libraries/base/tests/enum01.hs:328:  printTest ((toEnum 0)::Bool)
libraries/base/tests/enum01.hs:329:  mayBomb   (printTest ((toEnum 5)::Bool))
libraries/base/tests/enum01.hs:332:  printTest ((fromEnum False))
libraries/base/tests/enum01.hs:333:  printTest ((fromEnum True))
libraries/base/tests/enum01.hs:374:  printTest ((map fromEnum [(1::Integer),42,45]))
libraries/base/tests/enum01.hs:416:  printTest ((map fromEnum [(1::Rational),42,45]))
libraries/base/tests/enum01.hs:458:  printTest ((map fromEnum [(1::Ratio Int),42,45]))
libraries/base/tests/enum01.hs:463:  printTest ((take 7 [((toEnum ((maxBound::Int)-5))::Ratio Int)..]))
libraries/base/tests/enum01.hs:471:  let x = (toEnum ((minBound::Int) + 1))::Ratio Int
libraries/base/tests/enum01.hs:473:  let x = (toEnum ((minBound::Int) + 5))::Ratio Int
libraries/base/tests/enum01.hs:475:  let x = (toEnum ((maxBound::Int) - 5))::Ratio Int
libraries/base/tests/enum01.hs:483:  let x = (toEnum (maxBound - (5::Int))) :: Ratio Int
libraries/base/tests/enum01.hs:484:  let y = (toEnum (maxBound::Int)) :: Ratio Int
libraries/base/tests/enum01.hs:486:  let x = (toEnum (minBound + (5::Int))) :: Ratio Int
libraries/base/tests/enum01.hs:487:  let y = (toEnum (minBound::Int)) :: Ratio Int
libraries/base/tests/enum01.hs:499:  let x = (toEnum ((maxBound::Int) - 4)) :: Ratio Int
libraries/base/tests/enum01.hs:500:  let y = (toEnum (maxBound::Int)) :: Ratio Int
libraries/base/tests/enum01.hs:502:  let x = (toEnum ((minBound::Int) + 5)) :: Ratio Int
libraries/base/tests/enum01.hs:503:  let y = (toEnum (minBound::Int)) :: Ratio Int
libraries/base/tests/T9681.stderr:3:    • No instance for ‘Num String’ arising from the literal ‘1’
libraries/base/tests/enum03.stdout-mips-sgi-irix:1:Testing Enum Word8:
libraries/base/tests/enum03.stdout-mips-sgi-irix:9:    (toEnum (maxBound::Int))::Word8 = error "Enum.toEnum{Word8}: tag (9223372036854775807) is outside of bounds (0,255)"
libraries/base/tests/enum03.stdout-mips-sgi-irix:10:    (map fromEnum [(1::Word8),minBound,maxBound]) = [1,0,255]
libraries/base/tests/enum03.stdout-mips-sgi-irix:36:Testing Enum Word16:
libraries/base/tests/enum03.stdout-mips-sgi-irix:44:    (toEnum (maxBound::Int))::Word16 = error "Enum.toEnum{Word16}: tag (9223372036854775807) is outside of bounds (0,65535)"
libraries/base/tests/enum03.stdout-mips-sgi-irix:45:    (map fromEnum [(1::Word16),minBound,maxBound]) = [1,0,65535]
libraries/base/tests/enum03.stdout-mips-sgi-irix:71:Testing Enum Word32:
libraries/base/tests/enum03.stdout-mips-sgi-irix:79:    (toEnum (maxBound::Int))::Word32 = error "Enum.toEnum{Word32}: tag (9223372036854775807) is outside of bounds (0,4294967295)"
libraries/base/tests/enum03.stdout-mips-sgi-irix:80:    (map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]) = [1,0,4294967295]
libraries/base/tests/enum03.stdout-mips-sgi-irix:81:    fromEnum (maxBound::Word32) = 4294967295
libraries/base/tests/enum03.stdout-mips-sgi-irix:107:Testing Enum Word64:
libraries/base/tests/enum03.stdout-mips-sgi-irix:115:    (toEnum (maxBound::Int))::Word64 = 9223372036854775807
libraries/base/tests/enum03.stdout-mips-sgi-irix:116:    (map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]) = [1,0,9223372036854775807]
libraries/base/tests/enum03.stdout-mips-sgi-irix:117:    fromEnum (maxBound::Word64) = error "Enum.fromEnum{Word64}: value (18446744073709551615) is outside of Int's bounds (-9223372036854775808,9223372036854775807)"
libraries/base/tests/T17499.hs:7:instance Integral a => Num (Mod a) where
libraries/base/tests/enum02.stdout-mips-sgi-irix:1:Testing Enum Int8:
libraries/base/tests/enum02.stdout-mips-sgi-irix:9:    (toEnum (maxBound::Int))::Int8 = error "Enum.toEnum{Int8}: tag (9223372036854775807) is outside of bounds (-128,127)"
libraries/base/tests/enum02.stdout-mips-sgi-irix:10:    (map fromEnum [(1::Int8),minBound,maxBound]) = [1,-128,127]
libraries/base/tests/enum02.stdout-mips-sgi-irix:36:Testing Enum Int16:
libraries/base/tests/enum02.stdout-mips-sgi-irix:44:    (toEnum (maxBound::Int))::Int16 = error "Enum.toEnum{Int16}: tag (9223372036854775807) is outside of bounds (-32768,32767)"
libraries/base/tests/enum02.stdout-mips-sgi-irix:45:    (map fromEnum [(1::Int16),minBound,maxBound]) = [1,-32768,32767]
libraries/base/tests/enum02.stdout-mips-sgi-irix:71:Testing Enum Int32:
libraries/base/tests/enum02.stdout-mips-sgi-irix:79:    (toEnum (maxBound::Int))::Int32 = error "Enum.toEnum{Int32}: tag (9223372036854775807) is outside of bounds (-2147483648,2147483647)"
libraries/base/tests/enum02.stdout-mips-sgi-irix:80:    (map fromEnum [(1::Int32),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout-mips-sgi-irix:106:Testing Enum Int64:
libraries/base/tests/enum02.stdout-mips-sgi-irix:114:    (toEnum (maxBound::Int))::Int64 = 9223372036854775807
libraries/base/tests/enum02.stdout-mips-sgi-irix:115:    (map fromEnum [(1::Int64),fromIntegral (minBound::Int) ,fromIntegral (maxBound::Int)]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum02.stdout-mips-sgi-irix:116:    fromEnum (maxBound::Int64) = 9223372036854775807
libraries/base/tests/enum03.hs:1:-- !!! Testing the Word Enum instances.
libraries/base/tests/enum03.hs:10:  putStrLn "Testing Enum Word8:"
libraries/base/tests/enum03.hs:12:  putStrLn "Testing Enum Word16:"
libraries/base/tests/enum03.hs:14:  putStrLn "Testing Enum Word32:"
libraries/base/tests/enum03.hs:16:  putStrLn "Testing Enum Word64:"
libraries/base/tests/enum03.hs:35:  mayBomb   (printTest ((toEnum (maxBound::Int))::Word8))
libraries/base/tests/enum03.hs:38:  printTest ((map fromEnum [(1::Word8),minBound,maxBound]))
libraries/base/tests/enum03.hs:93:  mayBomb   (printTest ((toEnum (maxBound::Int))::Word16))
libraries/base/tests/enum03.hs:97:  printTest ((map fromEnum [(1::Word16),minBound,maxBound]))
libraries/base/tests/enum03.hs:152:  mayBomb   (printTest ((toEnum (maxBound::Int))::Word32))
libraries/base/tests/enum03.hs:155:  printTest ((map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]))
libraries/base/tests/enum03.hs:156:  mayBomb   (printTest (fromEnum (maxBound::Word32)))
libraries/base/tests/enum03.hs:211:  mayBomb   (printTest ((toEnum (maxBound::Int))::Word64))
libraries/base/tests/enum03.hs:214:  printTest ((map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]))
libraries/base/tests/enum03.hs:215:  mayBomb   (printTest (fromEnum (maxBound::Word64)))
libraries/base/tests/enum02.stdout-ws-64:1:Testing Enum Int8:
libraries/base/tests/enum02.stdout-ws-64:9:    (toEnum (maxBound::Int))::Int8 = error "Enum.toEnum{Int8}: tag (9223372036854775807) is outside of bounds (-128,127)"
libraries/base/tests/enum02.stdout-ws-64:10:    (map fromEnum [(1::Int8),minBound,maxBound]) = [1,-128,127]
libraries/base/tests/enum02.stdout-ws-64:36:Testing Enum Int16:
libraries/base/tests/enum02.stdout-ws-64:44:    (toEnum (maxBound::Int))::Int16 = error "Enum.toEnum{Int16}: tag (9223372036854775807) is outside of bounds (-32768,32767)"
libraries/base/tests/enum02.stdout-ws-64:45:    (map fromEnum [(1::Int16),minBound,maxBound]) = [1,-32768,32767]
libraries/base/tests/enum02.stdout-ws-64:71:Testing Enum Int32:
libraries/base/tests/enum02.stdout-ws-64:79:    (toEnum (maxBound::Int))::Int32 = error "Enum.toEnum{Int32}: tag (9223372036854775807) is outside of bounds (-2147483648,2147483647)"
libraries/base/tests/enum02.stdout-ws-64:80:    (map fromEnum [(1::Int32),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout-ws-64:106:Testing Enum Int64:
libraries/base/tests/enum02.stdout-ws-64:114:    (toEnum (maxBound::Int))::Int64 = 9223372036854775807
libraries/base/tests/enum02.stdout-ws-64:115:    (map fromEnum [(1::Int64),fromIntegral (minBound::Int) ,fromIntegral (maxBound::Int)]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum02.stdout-ws-64:116:    fromEnum (maxBound::Int64) = 9223372036854775807
libraries/base/tests/exceptionsrun001.hs:24:instance (Show a, Eq a) => Num (Maybe a) where {}
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:1:Testing Enum Word8:
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:9:    (toEnum (maxBound::Int))::Word8 = error "Enum.toEnum{Word8}: tag (9223372036854775807) is outside of bounds (0,255)"
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:10:    (map fromEnum [(1::Word8),minBound,maxBound]) = [1,0,255]
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:36:Testing Enum Word16:
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:44:    (toEnum (maxBound::Int))::Word16 = error "Enum.toEnum{Word16}: tag (9223372036854775807) is outside of bounds (0,65535)"
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:45:    (map fromEnum [(1::Word16),minBound,maxBound]) = [1,0,65535]
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:71:Testing Enum Word32:
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:79:    (toEnum (maxBound::Int))::Word32 = error "Enum.toEnum{Word32}: tag (9223372036854775807) is outside of bounds (0,4294967295)"
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:80:    (map fromEnum [(1::Word32),minBound,fromIntegral (maxBound::Int)]) = [1,0,4294967295]
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:81:    fromEnum (maxBound::Word32) = 4294967295
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:107:Testing Enum Word64:
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:115:    (toEnum (maxBound::Int))::Word64 = 9223372036854775807
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:116:    (map fromEnum [(1::Word64),minBound,fromIntegral (maxBound::Int)]) = [1,0,9223372036854775807]
libraries/base/tests/enum03.stdout-x86_64-unknown-openbsd:117:    fromEnum (maxBound::Word64) = error "Enum.fromEnum{Word64}: value (18446744073709551615) is outside of Int's bounds (-9223372036854775808,9223372036854775807)"
libraries/base/tests/enum01.stdout-alpha-dec-osf3:1:Testing Enum Int: 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:9:    (map fromEnum [(1::Int),minBound,maxBound]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum01.stdout-alpha-dec-osf3:35:Testing Enum Integer: 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:41:    (map fromEnum [(1::Integer),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-alpha-dec-osf3:60:Testing Enum Char: 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:69:    (map fromEnum ['X',minBound,maxBound]) = [88,0,1114111]
libraries/base/tests/enum01.stdout-alpha-dec-osf3:95:Testing Enum (): 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:102:    (toEnum 0)::() = ()
libraries/base/tests/enum01.stdout-alpha-dec-osf3:103:    (toEnum 1)::() = error "Prelude.Enum.().toEnum: bad argument"
libraries/base/tests/enum01.stdout-alpha-dec-osf3:104:    (fromEnum ()) = 0
libraries/base/tests/enum01.stdout-alpha-dec-osf3:109:Testing Enum Ordering (derived): 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:116:    (toEnum 0)::Ordering = LT
libraries/base/tests/enum01.stdout-alpha-dec-osf3:117:    (toEnum 5)::Ordering = error "Prelude.Enum.Ordering.toEnum: bad argument"
libraries/base/tests/enum01.stdout-alpha-dec-osf3:118:    (fromEnum LT) = 0
libraries/base/tests/enum01.stdout-alpha-dec-osf3:119:    (fromEnum EQ) = 1
libraries/base/tests/enum01.stdout-alpha-dec-osf3:120:    (fromEnum GT) = 2
libraries/base/tests/enum01.stdout-alpha-dec-osf3:146:Testing Enum Bool: 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:153:    (toEnum 0)::Bool = False
libraries/base/tests/enum01.stdout-alpha-dec-osf3:154:    (toEnum 5)::Bool = error "Prelude.Enum.Bool.toEnum: bad argument"
libraries/base/tests/enum01.stdout-alpha-dec-osf3:155:    (fromEnum False) = 0
libraries/base/tests/enum01.stdout-alpha-dec-osf3:156:    (fromEnum True) = 1
libraries/base/tests/enum01.stdout-alpha-dec-osf3:173:Testing Enum Rational: 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:179:    (map fromEnum [(1::Rational),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-alpha-dec-osf3:198:Testing Enum (Ratio Int): 
libraries/base/tests/enum01.stdout-alpha-dec-osf3:204:    (map fromEnum [(1::Ratio Int),42,45]) = [1,42,45]
libraries/base/tests/enum01.stdout-alpha-dec-osf3:207:    (take 7 [((toEnum ((maxBound::Int)-5))::Ratio Int)..]) = [9223372036854775802%1,9223372036854775803%1,9223372036854775804%1,9223372036854775805%1,9223372036854775806%1,9223372036854775807%1,(-9223372036854775808)%1]
libraries/base/tests/T23697.hsc:20:    checkErr :: (Num a, Eq a) => a -> a
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:1:Testing Enum Int8:
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:9:    (toEnum (maxBound::Int))::Int8 = error "Enum.toEnum{Int8}: tag (9223372036854775807) is outside of bounds (-128,127)"
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:10:    (map fromEnum [(1::Int8),minBound,maxBound]) = [1,-128,127]
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:36:Testing Enum Int16:
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:44:    (toEnum (maxBound::Int))::Int16 = error "Enum.toEnum{Int16}: tag (9223372036854775807) is outside of bounds (-32768,32767)"
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:45:    (map fromEnum [(1::Int16),minBound,maxBound]) = [1,-32768,32767]
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:71:Testing Enum Int32:
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:79:    (toEnum (maxBound::Int))::Int32 = error "Enum.toEnum{Int32}: tag (9223372036854775807) is outside of bounds (-2147483648,2147483647)"
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:80:    (map fromEnum [(1::Int32),minBound,maxBound]) = [1,-2147483648,2147483647]
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:106:Testing Enum Int64:
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:114:    (toEnum (maxBound::Int))::Int64 = 9223372036854775807
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:115:    (map fromEnum [(1::Int64),fromIntegral (minBound::Int) ,fromIntegral (maxBound::Int)]) = [1,-9223372036854775808,9223372036854775807]
libraries/base/tests/enum02.stdout-x86_64-unknown-openbsd:116:    fromEnum (maxBound::Int64) = 9223372036854775807
libraries/base/changelog.md:19:  * The `Enum Int64` and `Enum Word64` instances now use native operations on 32-bit platforms, increasing performance by up to 1.5x on i386 and up to 5.6x with the JavaScript backend. ([CLC proposal #187](https://github.com/haskell/core-libraries-committee/issues/187))
libraries/base/changelog.md:167:    order as the `Enum a` instance ([CLC proposal #51](https://github.com/haskell/core-libraries-committee/issues/51))
libraries/base/src/Prelude.hs:93:             product,   -- :: (Foldable t, Num a) => t a -> a
libraries/base/src/Prelude.hs:94:             sum),      -- :: Num a => t a -> a
libraries/base/src/Data/Bifoldable.hs:725:bisum :: (Bifoldable t, Num a) => t a a -> a
libraries/base/src/Data/Bifoldable.hs:751:biproduct :: (Bifoldable t, Num a) => t a a -> a
libraries/base/src/Data/Fixed.hs:207:instance Enum (Fixed a) where
libraries/base/src/Data/Fixed.hs:210:    toEnum = MkFixed . toEnum
libraries/base/src/Data/Fixed.hs:211:    fromEnum (MkFixed a) = fromEnum a
libraries/base/src/Data/Fixed.hs:226:instance (HasResolution a) => Num (Fixed a) where
libraries/base/src/Data/Fixed.hs:232:    signum (MkFixed a) = fromInteger (signum a)
libraries/base/src/Data/Fixed.hs:288:    maxnum = 10 ^ digits
libraries/base/src/Data/Fixed.hs:290:    fracNum = divCeil (d * maxnum) res
libraries/base/src/Data/Semigroup.hs:190:instance Enum a => Enum (Min a) where
libraries/base/src/Data/Semigroup.hs:193:  toEnum = Min . toEnum
libraries/base/src/Data/Semigroup.hs:194:  fromEnum = fromEnum . getMin
libraries/base/src/Data/Semigroup.hs:244:instance Num a => Num (Min a) where
libraries/base/src/Data/Semigroup.hs:250:  signum (Min a) = Min (signum a)
libraries/base/src/Data/Semigroup.hs:275:instance Enum a => Enum (Max a) where
libraries/base/src/Data/Semigroup.hs:278:  toEnum = Max . toEnum
libraries/base/src/Data/Semigroup.hs:279:  fromEnum = fromEnum . getMax
libraries/base/src/Data/Semigroup.hs:328:instance Num a => Num (Max a) where
libraries/base/src/Data/Semigroup.hs:334:  signum (Max a) = Max (signum a)
libraries/base/src/Data/Semigroup.hs:447:instance Enum a => Enum (First a) where
libraries/base/src/Data/Semigroup.hs:450:  toEnum = First . toEnum
libraries/base/src/Data/Semigroup.hs:451:  fromEnum = fromEnum . getFirst
libraries/base/src/Data/Semigroup.hs:518:instance Enum a => Enum (Last a) where
libraries/base/src/Data/Semigroup.hs:521:  toEnum = Last . toEnum
libraries/base/src/Data/Semigroup.hs:522:  fromEnum = fromEnum . getLast
libraries/base/src/Data/Semigroup.hs:590:instance Enum a => Enum (WrappedMonoid a) where
libraries/base/src/Data/Semigroup.hs:593:  toEnum = WrapMonoid . toEnum
libraries/base/src/Data/Semigroup.hs:594:  fromEnum = fromEnum . unwrapMonoid
libraries/base/src/Data/Functor/Compose.hs:177:deriving instance Enum (f (g a)) => Enum (Compose f g a)
libraries/base/src/Data/Functor/Compose.hs:181:deriving instance Num (f (g a)) => Num (Compose f g a)
libraries/base/src/Data/Functor/Contravariant.hs:347:instance Num a => Num (Op a b) where
libraries/base/src/Data/Functor/Contravariant.hs:352:  signum (Op f) = Op $ signum . f
libraries/base/src/Data/Foldable.hs:365:--     `sum`       :: (Foldable t, Num a) => t a -> a
libraries/base/src/Data/Foldable.hs:366:--     `product`   :: (Foldable t, Num a) => t a -> a
libraries/base/src/Data/Foldable.hs:1047:-- > mySum :: Num a => [a] -> a
libraries/base/src/Data/Complex.hs:79:-- >>> abs (signum (4.0 :+ 3.0))
libraries/base/src/Data/Complex.hs:142:conjugate        :: Num a => Complex a -> Complex a
libraries/base/src/Data/Complex.hs:242:instance  (RealFloat a) => Num (Complex a)  where
libraries/base/src/Data/Complex.hs:243:    {-# SPECIALISE instance Num (Complex Float) #-}
libraries/base/src/Data/Complex.hs:244:    {-# SPECIALISE instance Num (Complex Double) #-}
libraries/base/src/Data/Complex.hs:250:    signum (0:+0)       =  0
libraries/base/src/Data/Complex.hs:251:    signum z@(x:+y)     =  x/r :+ y/r  where r = magnitude z
libraries/base/src/Text/Printf.hs:166:-- > num    field width
libraries/base/src/Text/Printf.hs:174:-- > .num   precision
libraries/base/src/GHC/Natural.hs:6:-- Compatibility module for pre ghc-bignum code.
libraries/ghc-compact/tests/compact_simple_array.hs:23:arrTest :: (Monad m, MArray a e m, Num e) => m (a Int e)
libraries/ghc-compact/tests/compact_huge_array.hs:23:arrTest :: (Monad m, MArray a e m, Num e) => m (a Int e)
libraries/directory/tests/Util.hs:99:expectNear :: (Num a, Ord a, Show a, Show b) =>
libraries/directory/System/Directory/Internal/Windows.hsc:588:windowsPosixEpochDifference :: Num a => a
libraries/unix/System/Posix/Terminal/Common.hsc:540:       else return (Just (chr (fromEnum val)))
libraries/unix/System/Posix/Terminal/Common.hsc:562:    return (fromEnum (c :: CCc))
libraries/unix/System/Posix/Terminal/Common.hsc:574:    return (fromEnum (c :: CCc))
libraries/unix/System/Posix/Error.hs:33:throwErrnoPathIfMinus1Retry :: (Eq a, Num a)
libraries/unix/System/Posix/Error.hs:38:throwErrnoPathIfMinus1Retry_ :: (Eq a, Num a)
libraries/unix/System/Posix/Temp/PosixString.hsc:122:  h <- createDirectory name (toEnum 0o700)
libraries/unix/System/Posix/Temp/ByteString.hsc:118:  _ <- createDirectory (BC.unpack name) (toEnum 0o700)
libraries/unix/System/Posix/Temp.hsc:118:  _ <- createDirectory name (toEnum 0o700)
libraries/unix/System/Posix/Env/PosixString.hsc:158:        c_setenv keyP valueP (fromIntegral (fromEnum ovrwrt))
libraries/unix/System/Posix/Env/ByteString.hsc:160:        c_setenv keyP valueP (fromIntegral (fromEnum ovrwrt))
libraries/unix/System/Posix/PosixPath/FilePath.hsc:73:throwErrnoPathIfMinus1Retry :: (Eq a, Num a)
libraries/unix/System/Posix/PosixPath/FilePath.hsc:78:throwErrnoPathIfMinus1Retry_ :: (Eq a, Num a)
libraries/unix/System/Posix/PosixPath/FilePath.hsc:132:throwErrnoPathIfMinus1 :: (Eq a, Num a) => String -> PosixPath -> IO a -> IO a
libraries/unix/System/Posix/PosixPath/FilePath.hsc:138:throwErrnoPathIfMinus1_ :: (Eq a, Num a) => String -> PosixPath -> IO a -> IO ()
libraries/unix/System/Posix/PosixPath/FilePath.hsc:143:throwErrnoTwoPathsIfMinus1_ :: (Eq a, Num a) => String -> PosixPath -> PosixPath -> IO a -> IO ()
libraries/unix/System/Posix/Files.hsc:184:throwErrnoTwoPathsIfMinus1_ :: (Eq a, Num a) => String -> FilePath -> FilePath -> IO a -> IO ()
libraries/unix/System/Posix/Signals.hsc:646:    poke nocldstop $ fromEnum (not b)
libraries/unix/System/Posix/Env.hsc:143:        c_setenv keyP valueP (fromIntegral (fromEnum ovrwrt))
libraries/unix/System/Posix/Semaphore.hsc:68:                      sem_open cname (toEnum cflags) mode (toEnum value)
libraries/unix/System/Posix/Semaphore.hsc:148:                          return $ fromEnum cint
libraries/unix/System/Posix/ByteString/FilePath.hsc:68:throwErrnoPathIfMinus1Retry :: (Eq a, Num a)
libraries/unix/System/Posix/ByteString/FilePath.hsc:73:throwErrnoPathIfMinus1Retry_ :: (Eq a, Num a)
libraries/unix/System/Posix/ByteString/FilePath.hsc:127:throwErrnoPathIfMinus1 :: (Eq a, Num a) => String -> RawFilePath -> IO a -> IO a
libraries/unix/System/Posix/ByteString/FilePath.hsc:133:throwErrnoPathIfMinus1_ :: (Eq a, Num a) => String -> RawFilePath -> IO a -> IO ()
libraries/unix/System/Posix/ByteString/FilePath.hsc:138:throwErrnoTwoPathsIfMinus1_ :: (Eq a, Num a) => String -> RawFilePath -> RawFilePath -> IO a -> IO ()
libraries/unix/config.sub:382:			magnum | m3230)
libraries/terminfo/System/Console/Terminfo/Cursor.hs:59:termLines = tiGetNum "lines"
libraries/terminfo/System/Console/Terminfo/Cursor.hs:60:termColumns = tiGetNum "cols"
libraries/terminfo/System/Console/Terminfo/Color.hs:36:termColors = tiGetNum "colors"
libraries/terminfo/System/Console/Terminfo/Base.hs:172:    putc c = let c' = toEnum $ fromEnum c
libraries/terminfo/System/Console/Terminfo/Base.hs:225:foreign import ccall tigetnum :: CString -> IO CInt
libraries/terminfo/System/Console/Terminfo/Base.hs:228:tiGetNum :: String -> Capability Int 
libraries/terminfo/System/Console/Terminfo/Base.hs:229:tiGetNum cap = Capability $ const $ do
libraries/terminfo/System/Console/Terminfo/Base.hs:230:                n <- fmap fromEnum (withCString cap tigetnum)
libraries/terminfo/System/Console/Terminfo/Base.hs:282:                    tparm' (map toEnum ps ++ repeat 0)
libraries/terminfo/System/Console/Terminfo/Base.hs:315:tPuts s n putc = withCString s $ \c_str -> tputs c_str (toEnum n) putc
libraries/terminfo/System/Console/Terminfo/Base.hs:344:instance (Enum p, OutputCap f) => OutputCap (p -> f) where
libraries/terminfo/System/Console/Terminfo/Base.hs:345:    outputCap f xs = \x -> outputCap f (fromEnum x:xs)
libraries/ghc-prim/GHC/Prim/Exception.hs:29:-- cycle (base <-> bignum package). See #14664
libraries/Cabal/Cabal-QuickCheck/src/Test/QuickCheck/Instances/Cabal.hs:78:        packageChars  = filter isAlphaNum ['\0'..'\127']
libraries/Cabal/Cabal-QuickCheck/src/Test/QuickCheck/Instances/Cabal.hs:192:    moduleChar = [ c | c <- ['\0' .. '\255'], isAlphaNum c || c `elem` "_'" ]
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/DescribedInstances.hs:209:      rest = reMunchCS $ csAlphaNum <> "_-."
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/ArbitraryInstances.hs:216:              [c | c <- ['\NUL' .. '\255'], isAlphaNum c || c `elem` "_-."]
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Store.hs:151:    assertEqual "num registrations" 1 regcount
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Store.hs:152:    assertEqual "num registrations" 1 regcount'
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/IndexUtils/Timestamp.hs:26:    t = epochTimeToTimestamp $ toEnum t0 :: Timestamp
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/IndexUtils/Timestamp.hs:32:    t = epochTimeToTimestamp $ toEnum t0 :: Timestamp
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/IndexUtils/Timestamp.hs:38:    t = epochTimeToTimestamp $ toEnum t0 :: Timestamp
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/IndexUtils/Timestamp.hs:49:    t = epochTimeToTimestamp $ toEnum t0 :: Timestamp
libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/IndexUtils/Timestamp.hs:54:    t = epochTimeToTimestamp $ toEnum t0 :: Timestamp
libraries/Cabal/cabal-install/src/Distribution/Client/VCS.hs:554:    isNum c = c >= '0' && c <= '9'
libraries/Cabal/cabal-install/src/Distribution/Client/VCS.hs:555:    isTypical c = isNum c || c == '.'
libraries/Cabal/cabal-install/src/Distribution/Client/VCS.hs:843:    isNum c = c >= '0' && c <= '9'
libraries/Cabal/cabal-install/src/Distribution/Client/VCS.hs:844:    isTypical c = isNum c || c == '.'
libraries/Cabal/cabal-install/src/Distribution/Client/TargetSelector.hs:2070:    validPackageNameChar c = isAlphaNum c || c == '-'
libraries/Cabal/cabal-install/src/Distribution/Client/TargetSelector.hs:2157:      isAlphaNum c
libraries/Cabal/cabal-install/src/Distribution/Client/TargetSelector.hs:2202:    validModuleChar c = isAlphaNum c || c == '.' || c == '_' || c == '\''
libraries/Cabal/cabal-install/src/Distribution/Client/Types/RepoName.hs:41:      rest = P.munch (\c -> isAlphaNum c || c == '_' || c == '-' || c == '.')
libraries/Cabal/cabal-install/src/Distribution/Client/Types/Repo.hs:77:    uriStr <- P.munch1 (\c -> isAlphaNum c || c `elem` ("+-=._/*()@'$:;&!?~" :: String))
libraries/Cabal/cabal-install/src/Distribution/Client/Compat/Semaphore.hs:11:import Prelude (Bool (..), Eq (..), IO, Int, Num (..), flip, return, ($), ($!))
libraries/Cabal/cabal-install/src/Distribution/Client/Init/Utils.hs:285:        let (c, r) = first repairComponent $ span isAlphaNum x'
libraries/Cabal/cabal-install/src/Distribution/Client/Init/Types.hs:223:-- | Enum to denote whether the user wants to build a library target,
libraries/Cabal/cabal-install/src/Distribution/Client/IndexUtils.hs:1372:      | BSS.all (\c -> isAlphaNum c || c == '-') str =
libraries/Cabal/cabal-install/src/Distribution/Client/Setup.hs:2685:    "Run NUM jobs simultaneously (or '$ncpus' if no NUM is given)."
libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs:325:  -- yet different enum than 'CabalSpecVersion'.
libraries/Cabal/cabal-dev-scripts/src/GenUtils.hs:113:    :: forall a b tag. (Ord b, Ord tag, Enum tag, Bounded tag)
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:42:       ( Bool (..), Char, Either (..), Enum (..), Eq (..), Ord (..), Show (..), String
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:168:        -- currently the parser accepts "csAlphaNum `difference` "0123456789"
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:194:csAlphaNum :: CS.CharSet
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:195:csAlphaNum = CS.alphanum
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:412:        lead = RECharSet $ csAlphaNum <> fromString "_"
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:413:        rest = reMunchCS $ csAlphaNum <> fromString "_-"
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:489:    describe _ = reMunch1CS $ csAlphaNum <> csChar '_' <> csChar '-'
libraries/Cabal/Cabal-described/src/Distribution/Described.hs:538:    describe _ = reMunch1CS $ csAlphaNum <> csChar '-' <> csChar '_' <> csChar '.' <> csChar '+'
libraries/Cabal/Cabal-described/src/Distribution/Utils/CharSet.hs:39:       (Bool (..), Bounded (..), Char, Enum (..), Eq (..), Int, Maybe (..), Num (..), Ord (..), Show (..), String, concatMap, flip, fst, otherwise, showParen,
libraries/Cabal/Cabal-described/src/Distribution/Utils/CharSet.hs:234:alphanum :: CharSet
libraries/Cabal/Cabal-described/src/Distribution/Utils/CharSet.hs:235:alphanum = foldl' (flip insert) empty [ c | c <- [ minBound .. maxBound ], isAlphaNum c ]
libraries/Cabal/Cabal-described/src/Distribution/Utils/CharSet.hs:236:{-# NOINLINE alphanum #-}
libraries/Cabal/Cabal-described/src/Distribution/Utils/GrammarRegex.hs:187:    | isAlphaNum c = PP.char c
libraries/Cabal/Cabal-described/src/Distribution/Utils/GrammarRegex.hs:200:    | acs == CS.alphanum = terminalDoc "alpha-num"
libraries/Cabal/bootstrap/bootstrap.py:17:from enum import Enum
libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/CharSet.hs:2:-- isAlpha and isAlphaNum definitions change from base to base
libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/CharSet.hs:19:        CS.alphanum @?= foldl' (flip CS.insert) CS.empty
libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/CharSet.hs:20:            [ c | c <- [ minBound .. maxBound ], isAlphaNum c ]
libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/CharSet.hs:27:        CS.union CS.alpha CS.alphanum @?= CS.alphanum
libraries/Cabal/Cabal-tests/tests/cbits/rpmvercmp.c:82:            isnum = 1;
libraries/Cabal/Cabal-tests/tests/cbits/rpmvercmp.c:86:            isnum = 0;
libraries/Cabal/Cabal-tests/tests/cbits/rpmvercmp.c:104:        if (two == str2) return (isnum ? 1 : -1);
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:94:            bufferLength = fromEnum numElems
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:95:            intAlphSize  = fromEnum alphSize
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:96:            intLen       = fromEnum dcLen
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:178:    !resultPtr <- initializeMemoizedCMfn_c (coerceEnum alphabetSize) allocedTCM
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:181:    rowMajorList = [ coerceEnum $ costFn i j | i <- range,  j <- range ]
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:200:    pure (medianValue, coerceEnum cost)
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:211:calculateBufferLength :: Enum b
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:215:calculateBufferLength count width = coerceEnum $ q + if r == 0 then 0 else 1
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:223:coerceEnum :: (Enum a, Enum b) => a -> b
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:224:coerceEnum = toEnum . fromEnum
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:237:    let charValue = CDynamicChar (coerceEnum width) (coerceEnum count) bufLen valueBuffer
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:258:    let elementValue = DCElement (coerceEnum width) valueBuffer
libraries/Cabal/cabal-testsuite/PackageTests/Regression/T5309/lib/Data/TCM/Memoized/FFI.hsc:276:    let elementValue = DCElement (coerceEnum alphabetSize) valueBuffer
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:358:             ANum ==0.2.0.2,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:498:             bitwise-enum ==1.0.1.2,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:622:             c-enum ==0.1.1.3,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:769:             crackNum ==3.4,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:1225:             ghc-bignum installed,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:1941:             mixed-types-num ==0.5.12,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:2149:             optparse-enum ==1.0.0.0,
libraries/Cabal/cabal-testsuite/PackageTests/VersionPriority/project-stackage/nightly-2023-12-07.config:2307:             prelude-safeenum ==0.1.1.3,
libraries/Cabal/Cabal-syntax/src/Language/Haskell/Extension.hs:619:    | (extension, str@(hd : _)) <- map (\e -> (e, show e)) [toEnum 0 ..]
libraries/Cabal/Cabal-syntax/src/Distribution/PackageDescription/Configuration.hs:137:    isIdentChar c = isAlphaNum c || c == '_' || c == '-'
libraries/Cabal/Cabal-syntax/src/Distribution/PackageDescription/Parsec.hs:986:-- spec-version               = NUM "." NUM [ "." NUM ]
libraries/Cabal/Cabal-syntax/src/Distribution/PackageDescription/Parsec.hs:988:-- NUM    = DIGIT0 / DIGITP 1*DIGIT0
libraries/Cabal/Cabal-syntax/src/Distribution/System.hs:319:          rest = P.munch (\c -> isAlphaNum c || c == '_')
libraries/Cabal/Cabal-syntax/src/Distribution/System.hs:333:    rest = P.munch (\c -> isAlphaNum c || c == '_' || c == '-')
libraries/Cabal/Cabal-syntax/src/Distribution/System.hs:339:    parseWord = P.munch1 (\c -> isAlphaNum c || c == '_')
libraries/Cabal/Cabal-syntax/src/Distribution/Utils/Generic.hs:425:isAscii c = fromEnum c < 0x80
libraries/Cabal/Cabal-syntax/src/Distribution/Utils/Generic.hs:435:-- >>> isAsciiAlphaNum 'a'
libraries/Cabal/Cabal-syntax/src/Distribution/Utils/Generic.hs:438:-- >>> isAsciiAlphaNum 'ä'
libraries/Cabal/Cabal-syntax/src/Distribution/Utils/Generic.hs:440:isAsciiAlphaNum :: Char -> Bool
libraries/Cabal/Cabal-syntax/src/Distribution/Utils/Generic.hs:441:isAsciiAlphaNum c = isAscii c && isAlphaNum c
libraries/Cabal/Cabal-syntax/src/Distribution/Types/PackageId.hs:72:      component = P.munch1 (\c -> isAlphaNum c || c == '.')
libraries/Cabal/Cabal-syntax/src/Distribution/Types/InstalledPackageInfo/FieldGrammar.hs:220:      uid_char c = Char.isAlphaNum c || c `elem` ("-_.=[],:<>+" :: String)
libraries/Cabal/Cabal-syntax/src/Distribution/Types/ForeignLibOption.hs:32:    name <- P.munch1 (\c -> isAlphaNum c || c == '-')
libraries/Cabal/Cabal-syntax/src/Distribution/Types/ComponentId.hs:69:      abi_char c = isAlphaNum c || c `elem` "-_."
libraries/Cabal/Cabal-syntax/src/Distribution/Types/PkgconfigName.hs:69:      isNameChar c = isAlphaNum c
libraries/Cabal/Cabal-syntax/src/Distribution/Types/Flag.hs:120:      lead = P.satisfy (\c -> isAlphaNum c || c == '_')
libraries/Cabal/Cabal-syntax/src/Distribution/Types/Flag.hs:121:      rest = P.munch (\c -> isAlphaNum c || c == '_' || c == '-')
libraries/Cabal/Cabal-syntax/src/Distribution/Types/UnitId.hs:87:      isUnitChar c = isAlphaNum c
libraries/Cabal/Cabal-syntax/src/Distribution/Types/ForeignLibType.hs:39:    name <- P.munch1 (\c -> isAlphaNum c || c == '-')
libraries/Cabal/Cabal-syntax/src/Distribution/Types/SourceRepo.hs:201:isIdent c = isAlphaNum c || c == '_' || c == '-'
libraries/Cabal/Cabal-syntax/src/Distribution/Types/PkgconfigVersion.hs:54:      predicate c = isAsciiAlphaNum c || c == '.' || c == '-'
libraries/Cabal/Cabal-syntax/src/Distribution/Types/LegacyExeDependency.hs:48:        cs <- P.munch1 (\c -> isAlphaNum c || c == '+' || c == '_')
libraries/Cabal/Cabal-syntax/src/Distribution/License.hs:215:      | isAlphaNum c = Just c
libraries/Cabal/Cabal-syntax/src/Distribution/Compat/CharParsing.hs:32:  , alphaNum -- :: CharParsing m => m Char
libraries/Cabal/Cabal-syntax/src/Distribution/Compat/CharParsing.hs:120:alphaNum :: CharParsing m => m Char
libraries/Cabal/Cabal-syntax/src/Distribution/Compat/CharParsing.hs:121:alphaNum = satisfy isAlphaNum <?> "letter or digit"
libraries/Cabal/Cabal-syntax/src/Distribution/Compat/CharParsing.hs:122:{-# INLINE alphaNum #-}
libraries/Cabal/Cabal-syntax/src/Distribution/Fields/ConfVar.hs:122:    -- Number token can have many dots in it: SecArgNum (Position 65 15) "7.6.1"
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseId.hs:656:        if i > fromIntegral (fromEnum (maxBound :: LicenseId))
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseId.hs:658:        else return (toEnum (fromIntegral i))
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseId.hs:676:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseExceptionId.hs:108:        if i > fromIntegral (fromEnum (maxBound :: LicenseExceptionId))
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseExceptionId.hs:110:        else return (toEnum (fromIntegral i))
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseExceptionId.hs:121:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseExpression.hs:105:idstring = P.munch1 $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseReference.hs:53:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseReference.hs:58:        d <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseReference.hs:61:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseReference.hs:72:      | all (\c -> isAsciiAlphaNum c || c == '-' || c == '.') s = Just s
libraries/Cabal/Cabal-syntax/src/Distribution/SPDX/LicenseReference.hs:81:      | isAsciiAlphaNum c || c == '-' || c == '.' = c
libraries/Cabal/Cabal-syntax/src/Distribution/Compiler.hs:237:    tag <- P.munch (\c -> isAlphaNum c || c == '_')
libraries/Cabal/Cabal-syntax/src/Distribution/ModuleName.hs:88:validModuleChar c = isAlphaNum c || c == '_' || c == '\''
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:402:    --         component = star alphaNum <> alpha <> star alphaNum
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:404:    --         alphaNum = alpha \/ num
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:406:    --         num      = unions $ map char ['0'..'9']
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:421:          | isAlphaNum c -> state1 (DList.snoc acc c)
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:433:          | isAlphaNum c -> state1 (DList.snoc acc c)
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:438:    !ch = P.satisfy (\c -> isAlphaNum c || c == '-')
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:475:escapeCode = (charEsc <|> charNum <|> charAscii <|> charControl) P.<?> "escape code"
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:477:    charControl, charNum :: m Char
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:478:    charControl = (\c -> toEnum (fromEnum c - fromEnum '@')) <$> (P.char '^' *> (P.upper <|> P.char '@'))
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:479:    charNum = toEnum <$> num
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:481:        num :: m Int
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:482:        num =
libraries/Cabal/Cabal-syntax/src/Distribution/Parsec.hs:486:        maxchar = fromEnum (maxBound :: Char)
libraries/Cabal/templates/SPDX.LicenseId.template.hs:46:        if i > fromIntegral (fromEnum (maxBound :: LicenseId))
libraries/Cabal/templates/SPDX.LicenseId.template.hs:48:        else return (toEnum (fromIntegral i))
libraries/Cabal/templates/SPDX.LicenseId.template.hs:66:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/templates/SPDX.LicenseExceptionId.template.hs:41:        if i > fromIntegral (fromEnum (maxBound :: LicenseExceptionId))
libraries/Cabal/templates/SPDX.LicenseExceptionId.template.hs:43:        else return (toEnum (fromIntegral i))
libraries/Cabal/templates/SPDX.LicenseExceptionId.template.hs:54:        n <- some $ P.satisfy $ \c -> isAsciiAlphaNum c || c == '-' || c == '.'
libraries/Cabal/Cabal/src/Distribution/Simple/BuildTarget.hs:631:      isAlphaNum c
libraries/Cabal/Cabal/src/Distribution/Simple/BuildTarget.hs:705:    validModuleChar c = isAlphaNum c || c == '.' || c == '_' || c == '\''
libraries/Cabal/Cabal/src/Distribution/Simple/Command.hs:314:  :: (Bounded b, Enum b, Show b, Eq b)
libraries/Cabal/Cabal/src/Distribution/Simple/Command.hs:316:choiceOptFromEnum _sf _lf d get =
libraries/Cabal/Cabal/src/Distribution/Simple/ConfigureScript.hs:110:          | isAlphaNum c = c
libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Common.hs:297:    "Run NUM jobs simultaneously (or '$ncpus' if no NUM is given)."
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:240:    | i >= fromEnum (minBound :: OptimisationLevel)
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:241:        && i <= fromEnum (maxBound :: OptimisationLevel) ->
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:242:        toEnum i
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:273:    | i >= fromEnum (minBound :: DebugInfoLevel)
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:274:        && i <= fromEnum (maxBound :: DebugInfoLevel) ->
libraries/Cabal/Cabal/src/Distribution/Simple/Compiler.hs:275:        toEnum i
libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs:91:instance Enum a => Enum (Flag a) where
libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs:92:  fromEnum = fromEnum . fromFlag
libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs:93:  toEnum = toFlag . toEnum
libraries/Cabal/Cabal/src/Distribution/Simple/GHC/EnvironmentParser.hs:41:          *> (mkUnitId <$> P.many1 (P.satisfy $ \c -> isAlphaNum c || c `elem` "-_.+"))
libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Build/Modules.hs:94:  -- ^ The parallelism strategy (e.g. num of jobs)
libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Build/Modules.hs:248:            runGhcProg . buildOpts <$> sortOn (\w -> if w == defaultGhcWay then 0 else fromEnum w + 1) (Set.toList neededWays)
libraries/Cabal/Cabal/src/Distribution/Compat/Environment.hs:79:        c_setenv keyP valueP (fromIntegral (fromEnum True))
libraries/Cabal/Cabal/src/Distribution/GetOpt.hs:140:--    @-j or -jNUM (but not -j=NUM or -j NUM)@
libraries/Cabal/Cabal/src/Distribution/GetOpt.hs:158:--    @--jobs or --jobs=NUM (but not --jobs NUM)@
libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs:150:            let cand = reverse (takeWhile isAlphaNum (reverse str))
libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs:151:             in if length cand == 22 && all isAlphaNum cand
libraries/Cabal/Cabal/src/Distribution/Verbosity.hs:106:instance Enum Verbosity where
libraries/Cabal/Cabal/src/Distribution/Verbosity.hs:107:  toEnum = mkVerbosity . toEnum
libraries/Cabal/Cabal/src/Distribution/Verbosity.hs:108:  fromEnum = fromEnum . vLevel
libraries/Cabal/Cabal/src/Distribution/TestSuite.hs:73:  | OptionEnum [String]
libraries/Cabal/doc/cabaldomain.py:263:        num = env.domaindata['cabal']['index-num'].get(env.docname, 0)
libraries/Cabal/doc/cabaldomain.py:264:        env.domaindata['cabal']['index-num'][env.docname] = num + 1
libraries/Cabal/doc/cabaldomain.py:304:        num = env.domaindata['cabal']['index-num'].get(env.docname, 0)
libraries/Cabal/doc/cabaldomain.py:305:        env.domaindata['cabal']['index-num'][env.docname] = num + 1
libraries/Cabal/doc/cabal-package-description-file.rst:328:        UALNUM = UALPHA / DIGIT
libraries/Cabal/doc/cabal-package-description-file.rst:387:        newstyle-spec-version      = NUM "." NUM [ "." NUM ]
libraries/Cabal/doc/cabal-package-description-file.rst:389:        NUM    = DIGIT0 / DIGITP 1*DIGIT0
libraries/Cabal/doc/cabal-package-description-file.rst:2395:       flag-name = (UALNUM / "_") *(UALNUM / "_" / "-")
libraries/Cabal/doc/cabal-package-description-file.rst:2397:       UALNUM = UALPHA / DIGIT
libraries/hpc/Trace/Hpc/Util.hs:94:instance Num Hash where
libraries/hpc/Trace/Hpc/Util.hs:100:  signum (Hash a)     = Hash $ signum a
libraries/binary/tests/QC.hs:359:    testCuts :: forall a. (Num a, Enum a) => a -> Gen [a]
libraries/binary/src/Data/Binary/Generic.hs:110:checkGetSum :: (Ord word, Num word, Bits word, GSumGet f)
libraries/binary/src/Data/Binary/Generic.hs:117:    getSum :: (Ord word, Num word, Bits word) => word -> word -> Get (f a)
libraries/binary/src/Data/Binary/Generic.hs:120:    putSum :: (Num w, Bits w, Binary w) => w -> w -> f a -> Put
libraries/binary/src/Data/Binary/Class.hs:341:        sign = fromIntegral (signum n) :: Word8
libraries/binary/src/Data/Binary/Class.hs:510:          | w <= 0x10ffff = return $! toEnum $ fromEnum w
libraries/binary/src/Data/Binary/Class.hs:885:    get = toEnum . fromIntegral <$> getWord8
libraries/binary/src/Data/Binary/Class.hs:890:    get = toEnum . fromIntegral <$> getWord8
libraries/ghc-boot-th/GHC/LanguageExtensions/Type.hs:162:instance Ord Extension where compare a b = compare (fromEnum a) (fromEnum b)
libraries/template-haskell/Language/Haskell/TH/Lib/Syntax.hs:1824:    is_mod_char c = isAlphaNum c || c == '_' || c == '\''
libraries/filepath/tests/filepath-tests/Test.hs:16:    let testNum = case args of
libraries/filepath/tests/filepath-tests/Test.hs:18:                      | let num = read i
libraries/filepath/tests/filepath-tests/Test.hs:19:                      , num < 0    -> drop (negate num) tests
libraries/filepath/tests/filepath-tests/Test.hs:20:                      | let num = read i
libraries/filepath/tests/filepath-tests/Test.hs:21:                      , num > 0    -> take num          tests
libraries/filepath/tests/TestUtil.hs:165:    let testNum = case args of
libraries/filepath/tests/TestUtil.hs:167:                      | let num = read i
libraries/filepath/tests/TestUtil.hs:168:                      , num < 0    -> drop (negate num) tests
libraries/filepath/tests/TestUtil.hs:169:                      | let num = read i
libraries/filepath/tests/TestUtil.hs:170:                      , num > 0    -> take num          tests
libraries/transformers/legacy/pre709/Data/Functor/Identity.hs:113:instance (Enum a) => Enum (Identity a) where
libraries/transformers/legacy/pre709/Data/Functor/Identity.hs:116:    toEnum i              = Identity (toEnum i)
libraries/transformers/legacy/pre709/Data/Functor/Identity.hs:117:    fromEnum (Identity x) = fromEnum x
libraries/transformers/legacy/pre709/Data/Functor/Identity.hs:176:instance (Num a) => Num (Identity a) where
libraries/transformers/legacy/pre709/Data/Functor/Identity.hs:182:    signum (Identity x)     = Identity (signum x)
libraries/transformers/Control/Monad/Trans/State/Lazy.hs:422:>     num <- numberNode x
libraries/transformers/Control/Monad/Trans/State/Lazy.hs:425:>     return (Node num nt1 nt2)
libraries/transformers/Control/Monad/Trans/State/Strict.hs:423:>     num <- numberNode x
libraries/transformers/Control/Monad/Trans/State/Strict.hs:426:>     return (Node num nt1 nt2)
libraries/process/System/Process/JavaScript.hs:117:        goodChar c = isAlphaNum c || c `elem` "-_.,/"
libraries/process/System/Process/Posix.hs:96:        goodChar c = isAlphaNum c || c `elem` "-_.,/"
libraries/process/cbits/posix/common.h:5:enum std_handle_behavior {
libraries/process/cbits/posix/common.h:16:    enum std_handle_behavior behavior;
libraries/process/cbits/posix/runProcess.c:82:enum pipe_direction {
libraries/process/cbits/posix/runProcess.c:93:init_std_handle(int fd, enum pipe_direction direction,
linters/lint-codes/LintCodes/Coverage.hs:95:      , Text.all isAlphaNum ns
nofib/Simon-nofib-notes:78:Relies quite heavily on specialisations for Num (Complex Double).  If
nofib/imaginary/kahan/Main.hs:35:kahan vnum s c = do
nofib/imaginary/kahan/Main.hs:48:        outer i | i <= vnum = inner (fromIntegral i) 0 >> outer (i+1)
nofib/imaginary/kahan/Main.hs:53:calc vnum = do
nofib/imaginary/kahan/Main.hs:56:    kahan vnum s c
nofib/imaginary/digits-of-e1/Main.lhs:30:>   ((signum c == signum d) || (abs c < abs d)) && -- No pole in range
nofib/imaginary/paraffins/paraffins.c:15:enum boolean { FALSE, TRUE };
nofib/imaginary/paraffins/paraffins.c:16:typedef enum boolean bool;
nofib/imaginary/paraffins/paraffins.c:24:/* enum exit_values { WELL_DONE, SOMETHING_WRONG } for the system call, "exit" 
nofib/imaginary/paraffins/paraffins.c:35:enum kind_radical { H, C };
nofib/imaginary/paraffins/paraffins.c:36:typedef enum kind_radical KIND_RADICAL;
nofib/imaginary/paraffins/paraffins.c:38:enum kind_paraffin { BCP, CCP };
nofib/imaginary/paraffins/paraffins.c:39:typedef enum kind_paraffin KIND_PARAFFIN;
nofib/imaginary/paraffins/Main.hs:88:  let num = read arg
nofib/imaginary/gen_regexps/Main.hs:41:    (u,v)   = (mknum p, mknum r)
nofib/imaginary/gen_regexps/Main.hs:42:    mknum s = foldl (\ u c -> u * 10 + (ord c - ord '0')) 0 s
nofib/imaginary/exp3_8/Main.hs:25:instance Num Nat where
nofib/parallel/dcbm/DCBM.hs:365:		stoi' (x:xs) = fromEnum x - fromEnum '0' + 10 * stoi' xs
nofib/parallel/gray/Parse.hs:46:     ; ls <- many (satisfy (\x -> isAlphaNum x || x == '-' || x == '_'))
nofib/parallel/linsolv/Matrix.hs:197:matCompact x = matFold max 0 (matMapUnary signum x)
nofib/parallel/linsolv/Matrix.hs:261:-- scalarMult :: (Ix a, Ix b, Num c) => c -> Array (a,b) c -> Array (a,b) c
nofib/parallel/linsolv/Matrix.hs:291:-- determinant :: (Ix a, Ix b, Num c) => Array (a,b) c -> c
nofib/parallel/linsolv/Matrix.hs:362:-- matSum :: (Ix a, Ix b, Num c) -> Array (a,b) c -> Array (a,b) c -> Array (a,b) c
nofib/parallel/linsolv/Matrix.hs:406:matSignum :: (Integral a, NFData a) => SqMatrix a -> SqMatrix a
nofib/parallel/linsolv/Matrix.hs:407:matSignum = matMapUnary signum
nofib/parallel/linsolv/Matrix.hs:474:instance (Integral a, NFData a) => Num (SqMatrix a) where
nofib/parallel/linsolv/Matrix.hs:480: signum = matSignum
nofib/parallel/mandel/PortablePixmap.lhs:117:showRGB ((r,g,b):rest)  = showChar (toEnum r) .
nofib/parallel/mandel/PortablePixmap.lhs:118:			  showChar (toEnum g) .
nofib/parallel/mandel/PortablePixmap.lhs:119:			  showChar (toEnum b) .
nofib/parallel/mandel/Mandel.lhs:54:mandel::(Num a) => a -> [a]
nofib/parallel/mandel/Main.lhs:19:readNum::(Num a, Read a) => String -> [String] -> (a->[String]->IO ()) -> IO ()
nofib/parallel/mandel/Main.lhs:20:readNum prompt inputLines succ
nofib/parallel/mandel/Main.lhs:26:			       readNum prompt xs succ
nofib/parallel/prsa/Rsa.hs:32:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/parallel/prsa/Rsa.hs:37:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/gamteb/inLML/gamteb_for.f:800:      rannum = float(i)*2.384185791d-07
nofib/real/gamteb/inFortran/gamteb.f:673:      rannum = float(i)*2.384185791d-07
nofib/real/gamteb/inFortran/gamo.f:673:      rannum = float(i)*2.384185791d-07
nofib/real/hidden/Numbers.hs:13:instance Num Number where
nofib/real/hidden/Vectors.hs:29:instance Num Vector where
nofib/real/hidden/Vectors.hs:37:	signum v	= norm v
nofib/real/hidden/Memo.hs:11:instance (Enum a,Ord a,Ix a) => Ix (Triangle a) where
nofib/real/gg/StdLib.hs:56: charToInt x = (fromEnum x - fromEnum '0')
nofib/real/gg/Graph.hs:12:my_fromInt :: Num a => Int -> a
nofib/real/reptile/Auxprogfuns.hs:104:onedge n = n == dpxyorig || n == dpxyorig + (dpxynum -1) * dpxygap
nofib/real/reptile/Psfuns.hs:34:sq num = ss ++ show num
nofib/real/reptile/Layout.hs:21:dpxyorig, dpxygap, dpxynum :: Int
nofib/real/reptile/Layout.hs:24:dpxynum  = 19
nofib/real/reptile/Layout.hs:30:dpgrid = grid dpxyorig dpxyorig dpxygap dpxygap dpxynum dpxynum dpfun
nofib/real/reptile/Layout.hs:38:tpxorig, tpyorig, tpxygap, tpxynum :: Int
nofib/real/reptile/Layout.hs:42:tpxynum = 9
nofib/real/reptile/Layout.hs:48:tpgrid = grid tpxorig tpyorig tpxygap tpxygap tpxynum tpxynum tpfun
nofib/real/reptile/Layout.hs:55:tmxorig, tmyorig, tmxygap, tmxnum, tmynum :: Int
nofib/real/reptile/Layout.hs:59:tmxnum  = 1
nofib/real/reptile/Layout.hs:60:tmynum  = 6
nofib/real/reptile/Layout.hs:66:tmgrid = grid tmxorig tmyorig tmxygap tmxygap tmxnum tmynum tmfun
nofib/real/reptile/Layout.hs:70:dmxorig, dmyorig, dmxygap, dmxnum, dmynum :: Int
nofib/real/reptile/Layout.hs:74:dmxnum  = 1
nofib/real/reptile/Layout.hs:75:dmynum  = 4
nofib/real/reptile/Layout.hs:81:dmgrid = grid dmxorig dmyorig dmxygap dmxygap dmxnum dmynum dmfun
nofib/real/reptile/Layout.hs:86:picxorig, picyorig, picxygap, picxnum, picynum :: Int
nofib/real/reptile/Layout.hs:90:picxnum  = 4
nofib/real/reptile/Layout.hs:91:picynum  = 2
nofib/real/reptile/Layout.hs:98:  grid (picxorig -1) (picyorig-1) picxygap picxygap picxnum picynum picfun
nofib/real/reptile/Layout.hs:200:	    tpwh = tpxygap * (tpxynum - 1)
nofib/real/fulsom/Interval.hs:48:instance (Num a, Ord a, Eq a, Show a) => Num (Interval a) where
nofib/real/fulsom/Interval.hs:53:  signum        = ivSignum
nofib/real/fulsom/Interval.hs:57:instance (Show a, Num a, Ord a, Fractional a) => Fractional (Interval a) where
nofib/real/fulsom/Interval.hs:129:--  Num class functions
nofib/real/fulsom/Interval.hs:172:ivSignum (Pt a)    = Pt (signum a)
nofib/real/fulsom/Interval.hs:173:ivSignum (a :#: b) = (signum a) :#: (signum b)
nofib/real/fulsom/Raster.hs:110:wordy (a:bs) = (toEnum b):(toEnum c):(wordy bs)
nofib/real/linear/Input.lhs:442:         colnum = length m
nofib/real/linear/Input.lhs:463:            row_num = length m +1
nofib/real/linear/Input.lhs:478:                    drop rownum m
nofib/real/linear/Input.lhs:482:            colnum = length m
nofib/real/linear/Main.lhs:170:           " num (conv1|conv2)"
nofib/real/fem/Vector.hs:90:vecprod :: (Num a) => Vec a -> Vec a -> a
nofib/real/fem/Vector.hs:94:maxupdvec  :: (Num a, Ord a) => Vec a -> [(Int,a)] -> Vec a
nofib/real/fem/Vector.hs:96:incrvec :: (Num a) => Vec a -> [(Int,a)] -> Vec a
nofib/real/fem/Matrix.hs:28:incrmat :: (Num a) => Mat a -> [((Int,Int),a)] -> Mat a
nofib/real/fem/Matrix.hs:34:mmatvec :: (Num a) => Mat a -> Vec a -> Vec a
nofib/real/fem/Matrix.hs:36:mmatmat :: (Num a) => Mat a -> Mat a -> Mat a
nofib/real/fem/VBmatrix.hs:28:incrvbmat  :: (Num a) => Vbm a -> [((Int,Int),a)] -> Vbm a
nofib/real/symalg/Parser.hs:111:parse_bexpr3 ((Num num):rest)       = ((Numb (read num)), rest)
nofib/real/symalg/Lexer.hs:9:	    | Num String
nofib/real/symalg/Lexer.hs:22:                          let (str1,str2) = span isAlphaNum r
nofib/real/symalg/Lexer.hs:25:                          let (lexeme, rest) = (lexerNum r)
nofib/real/symalg/Lexer.hs:33:	else if c == '$'  then let (str1,str2) = span isAlphaNum s
nofib/real/symalg/Lexer.hs:50:	lexerNum r = ((Num (ds++f)), t) where (ds,s) = span isDigit r
nofib/real/symalg/BasicNumber.hs:58:instance Num BasicNumber where
nofib/real/symalg/BasicNumber.hs:113:    signum (BasRealC _)     = error "signum : Operation not defined on reals"
nofib/real/symalg/BasicNumber.hs:114:    signum (BasRationalC a) = BasRationalC (signum a)
nofib/real/symalg/BasicNumber.hs:115:    signum (BasIntegerC a)  = BasIntegerC (signum a)
nofib/real/symalg/BasicNumber.hs:121:instance Enum BasicNumber where
nofib/real/symalg/BasicNumber.hs:201:                    then map int2BasNum (readsPrec p int)
nofib/real/symalg/BasicNumber.hs:202:                    else map rat2BasNum (readsPrec p s)
nofib/real/symalg/BasicNumber.hs:210:                      int2BasNum (num, s) = (BasIntegerC num, s)
nofib/real/symalg/BasicNumber.hs:211:                      rat2BasNum (num, s) = (BasRationalC
nofib/real/symalg/BasicNumber.hs:212:                                               (approxRational num 0), s)
nofib/real/symalg/BasicNumberApprox.hs:69:rsignum :: BasicNumber -> Integer -> BasicNumber
nofib/real/symalg/BasicNumberApprox.hs:70:rsignum (a@(BasRealC ar)) n = if ev_ar < 0
nofib/real/symalg/BasicNumberApprox.hs:77:rsignum a n = signum a
nofib/real/cacheprof/Main.hs:235:        (num, rest) -> (LNum (c:num)) : olex rest
nofib/real/cacheprof/Main.hs:353:   = UF_NUM String
nofib/real/cacheprof/Main.hs:401:        pApply UF_NUM pLNum,
nofib/real/cacheprof/Main.hs:440:pLNum     = pApply unLNum     (pSat isLNum)
nofib/real/cacheprof/Main.hs:516:   pp ppm (UF_NUM n)     = n
nofib/real/cacheprof/Main.hs:762:the_sp_plus_4 = OP_DA (Const [Pos (UF_NUM "4")]) (AM_B ESP)
nofib/real/cacheprof/Main.hs:763:the_sp_plus_8 = OP_DA (Const [Pos (UF_NUM "8")]) (AM_B ESP)
nofib/real/cacheprof/Main.hs:1280:                  Pos (UF_NUM (show (28 * ccid)))])
nofib/real/cacheprof/Main.hs:1328:                [OP_LIT (Const [Pos (UF_NUM (show k))]),
nofib/real/cacheprof/Main.hs:1331:                [OP_LIT (Const [Pos (UF_NUM "0")]),
nofib/real/cacheprof/Main.hs:1332:                 OP_D   (Const [Pos (UF_NUM "4"),
nofib/real/cacheprof/Main.hs:1382:                     [OP_LIT (Const [Pos (UF_NUM n)]),
nofib/real/cacheprof/Main.hs:1385:                     [OP_LIT (Const [Pos (UF_NUM zero)]),
nofib/real/cacheprof/Main.hs:1386:                      OP_D   (Const [Pos (UF_NUM four),
nofib/real/cacheprof/Generics.hs:53:   | LNum     String  -- a number           "456"
nofib/real/cacheprof/Generics.hs:70:unLNum (LNum s) = s
nofib/real/cacheprof/Generics.hs:71:isLNum lx = case lx of { LNum _ -> True; _ -> False }
nofib/real/veritas/Core_database.hs:68:encode_trm_tag tag = toEnum (encode tag trm_tag_list)
nofib/real/veritas/Core_database.hs:70:encode_dec_tag tag = toEnum (encode tag dec_tag_list)
nofib/real/veritas/Core_database.hs:72:encode_sgn_tag tag = toEnum (encode tag sgn_tag_list)
nofib/real/veritas/Core_database.hs:74:encode_unary_tag tag = toEnum (encode tag unary_tag_list)
nofib/real/veritas/Core_database.hs:76:encode_binary_tag tag = toEnum (encode tag binary_tag_list)
nofib/real/veritas/Core_database.hs:78:encode_binder_tag tag = toEnum (encode tag binder_tag_list)
nofib/real/veritas/Core_database.hs:80:encode_con_tag tag = toEnum (encode tag con_tag_list)
nofib/real/veritas/Core_database.hs:457:str_to_att ( a : x)  = ( ( Name_Style , Symbol_Name ( Name [ toEnum a ]) ) , x )
nofib/real/veritas/Token.lhs:102:>	| alphanum a || a `elem` a_symbol
nofib/real/veritas/Token.lhs:115:> alphanum' ch = alphanum ch || ch == '_'
nofib/real/veritas/Token.lhs:117:> alphanum ch
nofib/real/veritas/Token.lhs:139:> mk_bdr x | fromEnum x == 208 = Pi
nofib/real/veritas/Token.lhs:141:> mk_bdr x | fromEnum x == 211 = Sigma
nofib/real/veritas/Token.lhs:143:> mk_bdr x | fromEnum x == 236 = Lambda
nofib/real/veritas/Token.lhs:145:> mk_bdr x | fromEnum x == 177 = Forall
nofib/real/veritas/Token.lhs:147:> mk_bdr x | fromEnum x == 178 = Exists
nofib/real/veritas/Token.lhs:149:> mk_bdr x | fromEnum x == 229 = Choose
nofib/real/veritas/X_interface.hs:93:	  x_send [toEnum (length argL)]      ...
nofib/real/veritas/X_interface.hs:106:	  x_send [toEnum (length argL)]                   ...
nofib/real/veritas/X_interface.hs:164:			 = reTurn ( fromEnum c ) ( ist , rsps , glno )
nofib/real/veritas/X_interface.hs:379:	  x_send_num i		   ...
nofib/real/veritas/X_interface.hs:448:	= x_multi_send x_send_num iL    	...
nofib/real/veritas/X_interface.hs:449:	  x_send_num i                  	...
nofib/real/veritas/X_interface.hs:450:	  x_send_num j				...
nofib/real/veritas/X_interface.hs:455:x_send_num i
nofib/real/veritas/X_interface.hs:456:	= x_send [ toEnum ((i `div` 256) `mod` 256) , toEnum (i `mod` 256) ]
nofib/real/veritas/X_interface.hs:460:x_get_num ( msc : lsc : ist , rsps )
nofib/real/veritas/X_interface.hs:464:	  str = show ( fromEnum msc * 256 + fromEnum lsc ) ++ "\n"
nofib/real/veritas/Vtslib.hs:126:		val zero_ord = fromEnum "0"
nofib/real/veritas/Vtslib.hs:127:		val nine_ord = fromEnum "9"
nofib/real/veritas/Vtslib.hs:136:		   if ordof (s, 0) = fromEnum "~" then
nofib/real/veritas/Kernel.hs:1172:    val a_chr = fromEnum "a"
nofib/real/veritas/Kernel.hs:1173:    and z_chr = fromEnum "z"
nofib/real/veritas/Kernel.hs:1174:    and A_chr = fromEnum "A"
nofib/real/veritas/Kernel.hs:1175:    and Z_chr = fromEnum "Z"
nofib/real/veritas/Kernel.hs:1176:    and zero_chr = fromEnum "0"
nofib/real/veritas/Kernel.hs:1177:    and nine_chr = fromEnum "9"
nofib/real/veritas/Kernel.hs:1178:    and minus_chr =  fromEnum "-"
nofib/real/veritas/Kernel.hs:1179:    and underline_chr =  fromEnum "_"
nofib/real/veritas/Kernel.hs:1180:    and dot_cht = fromEnum "."
nofib/real/veritas/Kernel.hs:1196:	    in vforall ok_ch (map fromEnum (explode name)) end
nofib/real/veritas/Dcore.hs:20:	| i < 256   = [ toEnum 0 , toEnum i ]
nofib/real/veritas/Dcore.hs:21:	| i < 65536 = [] -- [ toEnum ((i `div` 256) `rem` 256) , toEnum (i `rem` 256) ]
nofib/real/rsa/rsa.slowstdin:14:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/rsa.slowstdin:19:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/rsa/rsa.slowstdin:176:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/rsa.slowstdin:181:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/rsa/rsa.slowstdin:338:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/rsa.slowstdin:343:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/rsa/rsa.faststdin:13:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/rsa.stdin:14:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/rsa.stdin:19:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/rsa/Rsa.hs:14:  where accum x y = (128 * x) + fromIntegral (fromEnum y)
nofib/real/rsa/Rsa.hs:19:         expand x = toEnum (fromIntegral (x `mod` 128)) : expand (x `div` 128)
nofib/real/anna/Utils.hs:242:                = utiConcat [  (utiLjustify 4 (utiAppend (utiNum n) (utiStr ") "))),
nofib/real/anna/Utils.hs:259:utiNum :: Int -> Iseq
nofib/real/anna/Utils.hs:261:utiNum = utiStr . show
nofib/real/anna/Utils.hs:267:utiFWNum :: Int -> Int -> Iseq
nofib/real/anna/Utils.hs:269:utiFWNum width n
nofib/real/anna/StrictAn6.hs:862:sa statics beta (dtau, ANum n)
nofib/real/anna/BaseDefs.hs:97:instance (Show{-was:Text-} a, Ord a) => Num (ExceptionInt a) where
nofib/real/anna/BaseDefs.hs:159:             | ENum Int                    -- numbers
nofib/real/anna/BaseDefs.hs:183:        | ANum Int
nofib/real/anna/PrintResults.hs:61:        k n = toEnum (n+48)
nofib/real/anna/PrintResults.hs:95:         k n = toEnum (n + 48)
nofib/real/anna/Dependancy.hs:28:deFreeVars (ENum k)      = (utSetEmpty, ANum k)
nofib/real/anna/Dependancy.hs:140:deDepends (free, ANum n)          = ENum n
nofib/real/anna/LambdaLift5.hs:23:llMergeLams (ENum n)     = ENum n
nofib/real/anna/LambdaLift5.hs:48:llName (ENum n)     = ENum n
nofib/real/anna/LambdaLift5.hs:71:llUnique ns dict (ENum n)     = (ns, ENum n)
nofib/real/anna/LambdaLift5.hs:137:llFreeVars (ENum k) = (utSetEmpty, ANum k)
nofib/real/anna/LambdaLift5.hs:183:llEqns (_, ANum _)         = []
nofib/real/anna/LambdaLift5.hs:208:llAddParams env (_, ANum n) = ENum n
nofib/real/anna/LambdaLift5.hs:252:llFlatten (ENum n) = ([], ENum n)
nofib/real/anna/LambdaLift5.hs:404:llMapCoreTree f (ENum n) = ENum n
nofib/real/anna/PrettyPrint.hs:21:ppPrintCExprMain (ENum n) = utiNum n
nofib/real/anna/PrettyPrint.hs:72:ppPrintRAp    (ENum n)      = utiNum n
nofib/real/anna/PrettyPrint.hs:81:ppPrintLAp    (ENum n)      = utiNum n
nofib/real/anna/SmallerLattice.hs:22:instance (Text a, Ord a) => Num (ExceptionInt a) where
nofib/real/anna/DomainExpr.hs:96:        doStatefulOp2 dxDiff_aux (fromEnum 'a', []) ds db
nofib/real/anna/DomainExpr.hs:106:     assignS (n+1, ([toEnum n], not_two):sub)   `thenS`  ( \ () ->
nofib/real/anna/DomainExpr.hs:107:     returnS (DXVar [toEnum n])
nofib/real/anna/cor_files/treeDepth.cor:2:expr t1 t2 t3 ::= Num t1 |
nofib/real/anna/cor_files/treeDepth.cor:11:   Num n -> n;
nofib/real/anna/cor_files/coreExpr0.cor:10:     ANum num |
nofib/real/anna/cor_files/coreExpr.cor:10:          | ENum num
nofib/real/anna/cor_files/coreExpr.cor:27:          | ENum t2
nofib/real/anna/cor_files/coreExpr.cor:62:   ENum n -> Nil;
nofib/real/anna/cor_files/cfoldr.cor:3:type Ans == num ;
nofib/real/anna/cor_files/cfoldr.cor:94:dec isnil : (list alpha) -> num ;
nofib/real/anna/cor_files/cfoldr.cor:108:dec length : (list alpha) -> num ;
nofib/real/anna/cor_files/cfoldr.cor:121:dec sum : (list num) -> num ;
nofib/real/anna/cor_files/cfoldr.cor:128:{dec c0, c1, c2, c3, r0, r1, r2, r3 : list(list num) -> num ;}
nofib/real/anna/cor_files/ol_num.cor:3:class Num a where
nofib/real/anna/cor_files/ol_num.cor:7:instance Num Int where
nofib/real/anna/cor_files/ol_num.cor:12:instance Num Bool where
nofib/real/anna/TypeCheck5.hs:26:        mapAnnExpr' (ANum n) = ANum n
nofib/real/anna/TypeCheck5.hs:63:        t2e' (ANum n) = []
nofib/real/anna/TypeCheck5.hs:85:       pretty' b (TVar tvname) = [' ', toEnum (96+(lookup tvname tvdict))]
nofib/real/anna/TypeCheck5.hs:516:tc tds gamma ns (ENum n)
nofib/real/anna/TypeCheck5.hs:517:   = Ok (tcId_subst, TCons "int" [], (TCons "int" [], ANum n))
nofib/real/anna/Parser2.hs:292:paNum = paSat paIsNum `paApply` paNumval
nofib/real/anna/Parser2.hs:297:   = sum (powers 1 (map (\d -> fromEnum d - 48) (reverse cs)))
nofib/real/anna/Parser2.hs:303:paIsNum = isDigit.head
nofib/real/anna/Parser2.hs:452:                   (paIsNum,  paNum `paApply` ENum)]
nofib/real/anna/Parser2.hs:483:                (ENum 42)
nofib/real/anna/EtaAbstract.hs:22:eaEtaAbstract ae@(tau, ANum n)     = ae
nofib/real/compress/Main.hs:36:compress = map toEnum . codes_to_ascii . encode
nofib/real/compress/Decode.hs:159:mk_init_table n t = mk_init_table (n+1) (insert n (NONE, toEnum n) t)
nofib/real/compress/Encode.hs:80:tab_insert n = insert (toEnum n) n
nofib/real/hpg/GenExp.lhs:314:> gen_decode_exp dp c  =  unary_exp int_to_char_name (dp-one) (int_val (fromEnum c))
nofib/real/hpg/GenVal.lhs:120:>     =  upto maxchar (\r -> vc (Char_val (toEnum r)))
nofib/real/hpg/Utils.lhs:80:>                    (start, rest1)         =  split_num n s
nofib/real/hpg/Utils.lhs:82:>                    split_num 0 s          =  ("", s)
nofib/real/hpg/Utils.lhs:83:>                    split_num _ ""         =  ("", "")
nofib/real/hpg/Utils.lhs:84:>                    split_num _ ('\n':cs)  =  ("", ' ':cs)
nofib/real/hpg/Utils.lhs:85:>                    split_num m (c:cs)     =  (c:cs', cs'')
nofib/real/hpg/Utils.lhs:87:>                                              (cs',cs'') = split_num (m-one) cs
nofib/real/hpg/Env.lhs:168:> idnum :: String -> [String]
nofib/real/hpg/Env.lhs:169:> idnum id  =  [id ++ show n | n <- [one..]]
nofib/real/hpg/Env.lhs:172:> constructors  =  idnum constructor_name
nofib/real/hpg/Env.lhs:175:> type_names    =  idnum type_name
nofib/real/hpg/Env.lhs:178:> val_names     =  idnum val_name
nofib/real/parser/Main.hs:405:         s2i (d:ds)  = (fromEnum d - fromEnum '0') + 10 *s2i ds
nofib/real/compress2/Main.hs:32:     = "\o037\o235" ++ [toEnum third_byte] ++ cs
nofib/real/compress2/Encode.hs:101:              PT (toEnum mid) mid PTNil
nofib/real/compress2/WriteRoutines.hs:21:outputCodes cs = (map (\x -> toEnum (intAnd 255 x)) (fst result), snd result)
nofib/real/smallpt/smallpt.hs:70:clamp :: (Ord p, Num p) => p -> p
nofib/real/scs/LinearAlgebra.hs:9:apply :: Num a => Matrix a -> Vector a -> Vector a
nofib/real/scs/LinearAlgebra.hs:16:m_mul :: Num a => Matrix a -> Matrix a -> Matrix a
nofib/real/scs/LinearAlgebra.hs:23:m_add :: Num a => Matrix a -> Matrix a -> Matrix a
nofib/real/scs/LinearAlgebra.hs:26:m_sub :: Num a => Matrix a -> Matrix a -> Matrix a
nofib/real/scs/LinearAlgebra.hs:38:v_add :: Num a => Vector a -> Vector a -> Vector a
nofib/real/scs/LinearAlgebra.hs:41:v_sub :: Num a => Vector a -> Vector a -> Vector a
nofib/real/scs/LinearAlgebra.hs:58:m_zero :: Num a => Index -> Matrix a
nofib/real/scs/LinearAlgebra.hs:61:m_unit :: Num a => Index -> Matrix a
nofib/real/scs/Makefile:62:# (where applicable, numbers can be appended with any of afpnum kMGTPE:
nofib/real/infer/Parse.hs:77:alphanumP     =  isAlphaNum `filterP` itemP
nofib/real/bspt/Rationals.lhs:23:> instance Num Rationals where
nofib/real/bspt/Rationals.lhs:59:>	signum (x :%% _) = (signum x:%%1)
nofib/real/bspt/Rationals.lhs:90:> simplify x y  = (signum bottom*top) :%% abs bottom
nofib/real/bspt/Rationals.lhs:102:> instance Enum Rationals where	-- partain
nofib/real/bspt/Stdlib.lhs:47:> between :: (Ord a,Num a) => a -> a -> a -> Bool
nofib/real/bspt/Stdlib.lhs:85:>                       numval' x (a:l) = (toNum a)*(10^x) + (numval' (x-1) l)
nofib/real/bspt/Stdlib.lhs:88:	toNum - converts a numeric character to the corresponding
nofib/real/bspt/Stdlib.lhs:91:> toNum :: Char -> Int
nofib/real/bspt/Stdlib.lhs:92:> toNum x = (fromEnum x - fromEnum '0')
nofib/real/bspt/Euclid.lhs:66:		zerO,positive are GeomNum class methods.
nofib/real/bspt/GeomNum.lhs:42:>	positive a = signum a > 0
nofib/real/bspt/GeomNum.lhs:43:>	negative a = signum a < 0
nofib/real/bspt/GeomNum.lhs:46:>       ratio x y = (signum x*(n:%%1),signum y*(d:%%1))
nofib/real/lift/Test.hs:7:    (EConst (CNum 20))))] (ELet False [("m", ELam ["p", "q"] (ELet False
nofib/real/lift/Test.hs:8:    [("g", (EAp (EAp (EConst (CFun "+")) (EVar "a")) (EConst (CNum 6))))]
nofib/real/lift/Test.hs:14:    (CFun "+")) (EConst (CNum 1))) (EVar "a")))) (EAp (EVar "c") (EAp (EAp
nofib/real/lift/Test.hs:17:    (EConst (CFun "+")) (EVar "b")) (EConst (CNum 1))))), ("g", ELam ["x",
nofib/real/lift/Test.hs:23:    5))) (EConst (CNum 6))))
nofib/real/lift/LambdaLift.lhs:193:> data Constant = CNum Integer | CBool Bool | CFun Name
nofib/real/lift/LambdaLift.lhs:202:	EAp (EAp (EConst (CFun "+")) (EVar "a")) (EConst (CNum 3))
nofib/real/lift/Print.lhs:21:>						    i_num level, i_str "}" ])
nofib/real/lift/Print.lhs:51:> ppr_atomic pb (EConst (CNum n)) 	= i_num n
nofib/real/lift/Print.lhs:122:> i_num :: (Show a, Num a) => a -> Iseq
nofib/real/lift/Print.lhs:123:> i_num = i_str . show
nofib/spectral/scc/Digraph.m:16:||    swap :: edge num -> edge num
nofib/spectral/scc/Digraph.m:19:||    new_range :: [edge num] -> num -> [num]
nofib/spectral/scc/Digraph.m:25:||    span_tree :: (num -> [num])
nofib/spectral/scc/Digraph.m:37:dfs :: (num -> [num])
nofib/spectral/knights/root.lit:111:genericLength::Num a => [b] -> a
nofib/spectral/knights/root.lit:126:let len::Num a => a; len = genericLength xs 
nofib/spectral/knights/Main.lhs:58:	strToInt y (x:xs) = strToInt (10*y+(fromEnum x - fromEnum '0')) xs
nofib/spectral/power/Main.hs:50:deriv:: Num a => Ps a -> Ps a
nofib/spectral/power/Main.hs:52:compose:: (Eq a, Num a) => Ps a -> Ps a -> Ps a
nofib/spectral/power/Main.hs:54:toList:: Num a => Ps a -> [a]
nofib/spectral/power/Main.hs:55:takePs:: Num a => Int -> Ps a -> [a]
nofib/spectral/power/Main.hs:56:(.*):: Num a => a -> Ps a -> Ps a
nofib/spectral/power/Main.hs:57:x:: Num a => Ps a
nofib/spectral/power/Main.hs:70:instance (Eq a, Num a) => Eq (Ps a) where			--(1)
nofib/spectral/power/Main.hs:76:instance (Show a, Num a) => Show (Ps a) where			--(2)
nofib/spectral/power/Main.hs:80:instance Num a => Num (Ps a) where
nofib/spectral/calendar/Main.hs:126:                      toDigit d = fromEnum d - fromEnum '0'
nofib/spectral/rewrite/Main.lhs:127:> data EQUATION = Eqn NUM EXPR_PAIR
nofib/spectral/rewrite/Main.lhs:220:> alphanum c = (c >= 'A' && c <= 'Z')
nofib/spectral/rewrite/Main.lhs:507:> data ITEM	    = Item NUM CRIT_PAIR
nofib/spectral/rewrite/Main.lhs:562:> process :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> DNET
nofib/spectral/rewrite/Main.lhs:572:> process1 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA
nofib/spectral/rewrite/Main.lhs:584:> process2 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA
nofib/spectral/treejoin/Main.hs:90:	readInt' n s@(c:cs) | isDigit c = readInt' (n*10+fromEnum c-fromEnum '0') cs
nofib/spectral/banner/Main.hs:47:picChar c  | isUpper c  = alphas !! (fromEnum c - fromEnum 'A')
nofib/spectral/banner/Main.hs:48:           | isLower c  = alphas !! (fromEnum c - fromEnum 'a')
nofib/spectral/banner/Main.hs:50:           | isDigit c  = digits !! (fromEnum c - fromEnum '0')
nofib/spectral/dom-lt/Dom.hs:288:  let (g,rnmap) = renum 1 g0
nofib/spectral/dom-lt/Dom.hs:521:renum :: Int -> Graph -> (Graph, NodeMap Node)
nofib/spectral/dom-lt/Dom.hs:522:renum from = (\(_,m,g)->(g,m))
nofib/spectral/mandel/MAIL:24:--mandel::(Num a) => a -> [a]
nofib/spectral/mandel/PortablePixmap.lhs:117:showRGB ((r,g,b):rest)  = showChar (toEnum r) .
nofib/spectral/mandel/PortablePixmap.lhs:118:			  showChar (toEnum g) .
nofib/spectral/mandel/PortablePixmap.lhs:119:			  showChar (toEnum b) .
nofib/spectral/mandel/Mandel.lhs:48:mandel::(Num a) => a -> [a]
nofib/spectral/hartel/wang/Main.hs:124:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/wang/Main.hs:147:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/wang/Main.hs:148:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/wang/Main.hs:213:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/wang/Main.hs:214:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/wang/Main.hs:219:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/wang/Main.hs:220:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/wang/Main.hs:239:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/parstof/Main.hs:67:    f_ceq a_a a_b=((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum a_b);
nofib/spectral/hartel/parstof/Main.hs:68:    c_char0val=fromEnum '0';
nofib/spectral/hartel/parstof/Main.hs:69:    f_cle a_a a_b=((<=) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum a_b);
nofib/spectral/hartel/parstof/Main.hs:70:    f_clt a_a a_b=((<) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum a_b);
nofib/spectral/hartel/parstof/Main.hs:102:                (f_i2str_0 r_d ((:) (toEnum r_r) a_s));
nofib/spectral/hartel/parstof/Main.hs:384:    c_llex_alphanum=f_lexalt ((:) c_llex_num ((:) c_llex_upper ((:) c_llex_lower [])));
nofib/spectral/hartel/parstof/Main.hs:407:    f_flex_escape_hnums a_hnum1 a_hnum2=toEnum (((+) :: (Int -> Int -> Int)) (((*) :: (Int -> Int -> Int)) (16 :: Int) (((-) :: (Int -> Int -> Int)) (fromEnum a_hnum1) (fromEnum '0')))
nofib/spectral/hartel/parstof/Main.hs:408:        (((-) :: (Int -> Int -> Int)) (fromEnum a_hnum2) (fromEnum '0')));
nofib/spectral/hartel/parstof/Main.hs:409:    c_llex_hnum=f_lexalt ((:) c_llex_num ((:) (f_lexlit 'A') ((:) (f_lexlit 'B')
nofib/spectral/hartel/parstof/Main.hs:413:        (f_lexlit '\o134') (f_lexseq f_flex_escape_hnums c_llex_hnum c_llex_hnum)) []));
nofib/spectral/hartel/parstof/Main.hs:419:    c_llex_chchar=f_lexalt ((:) c_llex_alphanum ((:) c_llex_escape ((:) c_llex_weird ((:) (f_lexlit '\o042') []))));
nofib/spectral/hartel/parstof/Main.hs:437:    f_flex_muladd a_total a_digit=((-) :: (Int -> Int -> Int)) (((+) :: (Int -> Int -> Int)) (((*) :: (Int -> Int -> Int)) (10 :: Int) a_total) (fromEnum a_digit)) (fromEnum '0');
nofib/spectral/hartel/parstof/Main.hs:477:    c_llex_strchar=f_lexalt ((:) c_llex_alphanum ((:) c_llex_escape ((:) c_llex_weird ((:) (f_lexlit '\o047') []))));
nofib/spectral/hartel/parstof/Main.hs:787:            r_ci=fromEnum a_c
nofib/spectral/hartel/parstof/Main.hs:789:            if ((&&) (((>=) :: (Int -> Int -> Bool)) r_ci (fromEnum 'A')) (((<=) :: (Int -> Int -> Bool)) r_ci (fromEnum 'Z')))
nofib/spectral/hartel/parstof/Main.hs:1049:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/parstof/Main.hs:1072:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/parstof/Main.hs:1073:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/parstof/Main.hs:1138:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/parstof/Main.hs:1139:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/parstof/Main.hs:1144:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/parstof/Main.hs:1145:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/parstof/Main.hs:1164:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/fft/Main.hs:16:        if (((==) :: (Int -> Int -> Bool)) (fromEnum (f_cmp a_x a_y)) (fromEnum 't'))
nofib/spectral/hartel/fft/Main.hs:29:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/fft/Main.hs:202:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/fft/Main.hs:203:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/fft/Main.hs:268:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/fft/Main.hs:269:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/fft/Main.hs:274:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/fft/Main.hs:275:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/fft/Main.hs:294:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/comp_lab_zift/Main.hs:248:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/comp_lab_zift/Main.hs:441:    f_cmp_c a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/comp_lab_zift/Main.hs:632:        if (((==) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'B'))
nofib/spectral/hartel/comp_lab_zift/Main.hs:674:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/comp_lab_zift/Main.hs:675:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/comp_lab_zift/Main.hs:740:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/comp_lab_zift/Main.hs:741:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/comp_lab_zift/Main.hs:746:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/comp_lab_zift/Main.hs:747:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/comp_lab_zift/Main.hs:766:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/typecheck/Main.hs:424:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/typecheck/Main.hs:447:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/typecheck/Main.hs:448:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/typecheck/Main.hs:513:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/typecheck/Main.hs:514:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/typecheck/Main.hs:519:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/typecheck/Main.hs:520:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/typecheck/Main.hs:539:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/transform/Main.hs:245:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/transform/Main.hs:249:    f_patenum a_p a_xs=a_p a_xs;
nofib/spectral/hartel/transform/Main.hs:370:    f_cmp_c a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/transform/Main.hs:810:            (r_ps,r_rs)=head (f_patenum c_p_program a_ts)
nofib/spectral/hartel/transform/Main.hs:931:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/transform/Main.hs:932:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/transform/Main.hs:997:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/transform/Main.hs:998:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/transform/Main.hs:1003:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/transform/Main.hs:1004:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/transform/Main.hs:1023:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/listcompr/Main.hs:25:            f_char_cmp a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y)
nofib/spectral/hartel/listcompr/Main.hs:190:    f_cmp_c a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/listcompr/Main.hs:311:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/listcompr/Main.hs:312:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/listcompr/Main.hs:377:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/listcompr/Main.hs:378:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/listcompr/Main.hs:383:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/listcompr/Main.hs:384:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/listcompr/Main.hs:403:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/sched/Main.hs:313:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/sched/Main.hs:345:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/sched/Main.hs:346:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/sched/Main.hs:411:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/sched/Main.hs:412:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/sched/Main.hs:417:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/sched/Main.hs:418:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/sched/Main.hs:437:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/genfft/Main.hs:269:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/genfft/Main.hs:292:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/genfft/Main.hs:293:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/genfft/Main.hs:358:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/genfft/Main.hs:359:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/genfft/Main.hs:364:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/genfft/Main.hs:365:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/genfft/Main.hs:384:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/Fast2haskell2.hs:20:	    instance Num Complex_type where {
nofib/spectral/hartel/Fast2haskell2.hs:26:		signum 0		=  0;
nofib/spectral/hartel/Fast2haskell2.hs:27:		signum z@(CD# x y)	=  ((D# x)/r) `colon_plus` ((D# y)/r)  where { r = magnitude__ z };
nofib/spectral/hartel/Fast2haskell2.hs:64:--!         fromInt       :: Num a => Int -> a;
nofib/spectral/hartel/solid/Main.hs:21:    f_eq_c a_x a_y=((==) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/solid/Main.hs:23:    f_f_StandardXfer_strtonum a_i=f_ston a_i;
nofib/spectral/hartel/solid/Main.hs:60:            f_comb a_res a_number=((-) :: (Int -> Int -> Int)) (((+) :: (Int -> Int -> Int)) (((*) :: (Int -> Int -> Int)) (10 :: Int) a_res) (fromEnum a_number)) (fromEnum '0')
nofib/spectral/hartel/solid/Main.hs:209:    f_f_Misc_getinteger a_f_Misc__x=f_f_StandardXfer_strtonum (f_f_StandardXfer_skipwhitespace a_f_Misc__x);
nofib/spectral/hartel/solid/Main.hs:1034:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/solid/Main.hs:1035:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/solid/Main.hs:1100:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/solid/Main.hs:1101:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/solid/Main.hs:1106:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/solid/Main.hs:1107:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/solid/Main.hs:1126:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/listcopy/Main.hs:25:            f_char_cmp a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y)
nofib/spectral/hartel/listcopy/Main.hs:195:    f_cmp_c a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/listcopy/Main.hs:316:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/listcopy/Main.hs:317:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/listcopy/Main.hs:382:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/listcopy/Main.hs:383:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/listcopy/Main.hs:388:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/listcopy/Main.hs:389:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/listcopy/Main.hs:408:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/ida/Main.hs:280:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/ida/Main.hs:281:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/ida/Main.hs:346:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/ida/Main.hs:347:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/ida/Main.hs:352:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/ida/Main.hs:353:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/ida/Main.hs:372:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/event/Main.hs:120:    f_cmp_c a_x a_y=((-) :: (Int -> Int -> Int)) (fromEnum a_x) (fromEnum a_y);
nofib/spectral/hartel/event/Main.hs:241:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/event/Main.hs:242:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/event/Main.hs:307:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/event/Main.hs:308:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/event/Main.hs:313:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/event/Main.hs:314:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/event/Main.hs:333:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/hartel/wave4main/Main.hs:20:            f_sumcode' (a_x:a_xs) a_sum a_n=f_sumcode' a_xs (((+) :: (Int -> Int -> Int)) a_sum (fromEnum a_x)) (((+) :: (Int -> Int -> Int)) a_n (1 :: Int))
nofib/spectral/hartel/wave4main/Main.hs:258:            r_d3_c=toEnum (((+) :: (Int -> Int -> Int)) (fromEnum '0') (((rem) :: (Int -> Int -> Int)) r_i (10 :: Int)));
nofib/spectral/hartel/wave4main/Main.hs:259:            r_d2_c=toEnum (((+) :: (Int -> Int -> Int)) (fromEnum '0') (((rem) :: (Int -> Int -> Int)) (((quot) :: (Int -> Int -> Int)) r_i (10 :: Int)) (10 :: Int)));
nofib/spectral/hartel/wave4main/Main.hs:260:            r_d1_c=toEnum (((+) :: (Int -> Int -> Int)) (fromEnum '0') (((rem) :: (Int -> Int -> Int)) (((quot) :: (Int -> Int -> Int)) r_i (100 :: Int)) (10 :: Int)))
nofib/spectral/hartel/wave4main/Main.hs:389:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
nofib/spectral/hartel/wave4main/Main.hs:390:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
nofib/spectral/hartel/wave4main/Main.hs:455:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
nofib/spectral/hartel/wave4main/Main.hs:456:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
nofib/spectral/hartel/wave4main/Main.hs:461:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
nofib/spectral/hartel/wave4main/Main.hs:462:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
nofib/spectral/hartel/wave4main/Main.hs:481:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
nofib/spectral/fft2/Complex_Vectors.lhs:16:>     fromInt :: (Num a) => Int -> a
nofib/spectral/fft2/fourier.m:112:> sfth:: num -> [complex] -> [complex] -> [complex]
nofib/spectral/fft2/fourier.m:132:> repl:: num -> [*] -> [*]
nofib/spectral/fft2/fourier.m:135:>  everyNth:: num -> [*] -> [*]
nofib/spectral/fft2/fourier.m:138:>  toThe:: [complex] -> num -> [complex]
nofib/spectral/fft2/fourier.m:141:> factors:: num -> [num]
nofib/spectral/fft2/fourier.m:144:> factorsh:: num -> [num] -> [num]
nofib/spectral/exact-reals/Main.hs:29:instance Num CR where
nofib/spectral/exact-reals/Main.hs:37:  signum x = fromInteger (signum (approx x))
nofib/spectral/exact-reals/Main.hs:145:instance Enum CR where
nofib/spectral/exact-reals/Main.hs:146:  toEnum = fromInteger . toInteger
nofib/spectral/exact-reals/Main.hs:147:  fromEnum = fromInteger . rnd . toRational
nofib/spectral/atom/Main.hs:168:instance Num a => Num [a] where
nofib/spectral/atom/Main.hs:179:(.*):: Num a => a-> [a] -> [a]
nofib/spectral/atom/Main.hs:185:(<*>):: Num a => [a] -> [a] -> a
nofib/shootout/reverse-complement/Main.hs:59:comps = Prelude.zipWith (\ a b -> (fromEnum a, c2w b)) "AaCcGgTtUuMmRrYyKkVvHhDdBb"
nofib/mk/target.mk:78:enum = $(strip $(shell perl -e 'for ($$i = 1; $$i <= $(1); $$i++) { print "$$i "; }'))
nofib/gc/happy/Parser.hs:629:happyReduction_28 (HappyTerminal (TokenNum happy_var_2  TokNum))
nofib/gc/happy/Parser.hs:743:        TokenNum happy_dollar_dollar  TokNum -> cont 34;
nofib/gc/happy/GenUtils.lhs:185:>		a:'\'' :r | isAlphaNum a -> go r ('\'':a:acc)
nofib/gc/happy/AttrGrammar.lhs:99:>	 | isLower x = let (id,rest) = span (\x -> isAlphaNum x || x == '\'') xs in cont (k (x:id)) rest
nofib/gc/happy/ProduceGLRCode.lhs:382:<>           : [ "\ti == j = fromEnum i == fromEnum j"
nofib/gc/happy/Grammar.lhs:528:>		a:'\'' :r | isAlphaNum a -> go r ('\'':a:acc) used
nofib/gc/happy/Lexer.lhs:20:>       | TokenNum  Int    TokenId
nofib/gc/happy/Lexer.lhs:26:> tokenToId (TokenNum _ i) = i
nofib/gc/happy/Lexer.lhs:58:>       | TokNum                -- Integer
nofib/gc/happy/Lexer.lhs:95:>         | isDigit c -> lexNum cont c
nofib/gc/happy/Lexer.lhs:150:> lexNum cont c rest =
nofib/gc/happy/Lexer.lhs:151:>        readNum rest (\ num rest' ->
nofib/gc/happy/Lexer.lhs:152:>                         returnToken cont (TokenNum (stringToInt (c:num)) TokNum) rest')
nofib/gc/happy/Lexer.lhs:174:> 	a: '\'':r | isAlphaNum a -> lexReadCode r n ('\'':a:c)
nofib/gc/happy/Lexer.lhs:190:> readNum (c:r) fn | isDigit c = readNum r (fn . (:) c)
nofib/gc/happy/Lexer.lhs:191:> readNum r     fn = fn [] r
nofib/gc/fulsom/Interval.hs:48:instance (Num a,Ord a,Eq a,Show{-was:Text-} a) => Num (Interval a) where
nofib/gc/fulsom/Interval.hs:53:  signum        = ivSignum
nofib/gc/fulsom/Interval.hs:57:instance (Show a,Num a,Ord a,Fractional a) => Fractional (Interval a) where
nofib/gc/fulsom/Interval.hs:131:--  Num class functions
nofib/gc/fulsom/Interval.hs:174:ivSignum (Pt a)    = Pt (signum a)
nofib/gc/fulsom/Interval.hs:175:ivSignum (a :#: b) = (signum a) :#: (signum b)
nofib/gc/fulsom/Raster.hs:110:wordy (a:bs) = (toEnum b):(toEnum c):(wordy bs)
nofib/gc/linear/Input.lhs:442:         colnum = length m
nofib/gc/linear/Input.lhs:463:            row_num = length m +1
nofib/gc/linear/Input.lhs:478:                    drop rownum m
nofib/gc/linear/Input.lhs:482:            colnum = length m
nofib/gc/linear/Main.lhs:170:           " num (conv1|conv2)"
nofib/gc/power/Main.hs:42:deriv:: Num a => Ps a -> Ps a
nofib/gc/power/Main.hs:44:compose:: (Eq a, Num a) => Ps a -> Ps a -> Ps a
nofib/gc/power/Main.hs:46:toList:: Num a => Ps a -> [a]
nofib/gc/power/Main.hs:47:takePs:: Num a => Int -> Ps a -> [a]
nofib/gc/power/Main.hs:48:(.*):: Num a => a -> Ps a -> Ps a
nofib/gc/power/Main.hs:49:x:: Num a => Ps a
nofib/gc/power/Main.hs:62:instance (Eq a, Num a) => Eq (Ps a) where                       --(1)
nofib/gc/power/Main.hs:68:instance (Show a, Num a) => Show (Ps a) where                   --(2)
nofib/gc/power/Main.hs:72:instance Num a => Num (Ps a) where
nofib/gc/cacheprof/Main.hs:234:        (num, rest) -> (LNum (c:num)) : olex rest
nofib/gc/cacheprof/Main.hs:352:   = UF_NUM String
nofib/gc/cacheprof/Main.hs:400:        pApply UF_NUM pLNum,
nofib/gc/cacheprof/Main.hs:439:pLNum     = pApply unLNum     (pSat isLNum)
nofib/gc/cacheprof/Main.hs:515:   pp ppm (UF_NUM n)     = n
nofib/gc/cacheprof/Main.hs:761:the_sp_plus_4 = OP_DA (Const [Pos (UF_NUM "4")]) (AM_B ESP)
nofib/gc/cacheprof/Main.hs:762:the_sp_plus_8 = OP_DA (Const [Pos (UF_NUM "8")]) (AM_B ESP)
nofib/gc/cacheprof/Main.hs:1279:                  Pos (UF_NUM (show (28 * ccid)))])
nofib/gc/cacheprof/Main.hs:1327:                [OP_LIT (Const [Pos (UF_NUM (show k))]),
nofib/gc/cacheprof/Main.hs:1330:                [OP_LIT (Const [Pos (UF_NUM "0")]),
nofib/gc/cacheprof/Main.hs:1331:                 OP_D   (Const [Pos (UF_NUM "4"),
nofib/gc/cacheprof/Main.hs:1381:                     [OP_LIT (Const [Pos (UF_NUM n)]),
nofib/gc/cacheprof/Main.hs:1384:                     [OP_LIT (Const [Pos (UF_NUM zero)]),
nofib/gc/cacheprof/Main.hs:1385:                      OP_D   (Const [Pos (UF_NUM four),
nofib/gc/cacheprof/Generics.hs:53:   | LNum     String  -- a number           "456"
nofib/gc/cacheprof/Generics.hs:70:unLNum (LNum s) = s
nofib/gc/cacheprof/Generics.hs:71:isLNum lx = case lx of { LNum _ -> True; _ -> False }
nofib/gc/treejoin/Main.hs:89:	readInt' n s@(c:cs) | isDigit c = readInt' (n*10+fromEnum c-fromEnum '0') cs
nofib/shake/compare/Compare.hs:152:  | signum x < 0 = prettySign opts x . showGFloat prec (abs x)
nofib/shake/compare/Compare.hs:156:prettySign :: (Ord a, Num a) => OutputOptions -> a -> ShowS
rts/Trace.c:194:static void traceSchedEvent_stderr (Capability *cap, EventTypeNum tag,
rts/Trace.c:255:void traceSchedEvent_ (Capability *cap, EventTypeNum tag,
rts/Trace.c:269:static void traceGcEvent_stderr (Capability *cap, EventTypeNum tag)
rts/Trace.c:308:void traceGcEvent_ (Capability *cap, EventTypeNum tag)
rts/Trace.c:321:void traceGcEventAtT_ (Capability *cap, StgWord64 ts, EventTypeNum tag)
rts/Trace.c:335:                      EventTypeNum  tag,
rts/Trace.c:410:                     EventTypeNum  tag)
rts/Trace.c:441:void traceCapsetEvent_ (EventTypeNum tag,
rts/Trace.c:524:static void traceSparkEvent_stderr (Capability *cap, EventTypeNum tag,
rts/Trace.c:573:void traceSparkEvent_ (Capability *cap, EventTypeNum tag, StgWord info1)
rts/linker/Elf.c:122:   To solve this, the fields e_shnum and e_shstrndx in the ELF header have an
rts/linker/Elf.c:147:   Elf_Half shnum = ehdr->e_shnum;
rts/linker/Elf.c:148:   return shnum != SHN_UNDEF ? shnum : shdr[0].sh_size;
rts/linker/Elf.c:176:   const Elf_Word shnum = elf_shnum(ehdr);
rts/linker/Elf.c:454:   shnum = elf_shnum(ehdr);
rts/linker/Elf.c:710:   const Elf_Word shnum = elf_shnum(ehdr);
rts/linker/Elf.c:1145:                         Elf_Shdr* shdr, int shnum )
rts/linker/Elf.c:1570:                          Elf_Shdr* shdr, int shnum )
rts/linker/Elf.c:1944:   const Elf_Word shnum = elf_shnum(ehdr);
rts/linker/Elf.c:2087:  Elf_Word shnum = elf_shnum(ehdr);
rts/linker/MMap.c:90:    return num + factor - 1 - (num + factor - 1) % factor;
rts/linker/elf_compat.h:21:enum RelocAarch64 {
rts/linker/elf_compat.h:24:enum RelocARM {
rts/linker/elf_compat.h:27:enum Reloci386 {
rts/linker/elf_compat.h:30:enum RelocX86_64 {
rts/linker/MachO.c:714:        IF_DEBUG(linker_verbose, debugBelch("               : symbolnum = %u\n", reloc->r_symbolnum));
rts/linker/MachO.c:867:            /* Since the relocation is internal, r_symbolnum contains a section
rts/linker/MachO.c:873:             * thing = <displ. to to section r_symbolnum *in the image*> (1)
rts/linker/MachO.c:874:             *       + <offset within r_symbolnum section>
rts/linker/MachO.c:878:            CHECKM(reloc->r_symbolnum > 0,
rts/linker/MachO.c:879:                   "relocateSection: unsupported r_symbolnum = %" PRIu32 " < 1 for internal relocation",
rts/linker/MachO.c:882:            int targetSecNum = reloc->r_symbolnum - 1; // sec numbers start with 1
rts/linker/InitFini.h:3:enum InitFiniKind {
rts/linker/InitFini.h:16:    enum InitFiniKind kind;
rts/linker/InitFini.h:20:void addInitFini(struct InitFiniList **slist, Section *section, enum InitFiniKind kind, uint32_t priority);
rts/linker/InitFini.c:55:void addInitFini(struct InitFiniList **head, Section *section, enum InitFiniKind kind, uint32_t priority)
rts/linker/InitFini.c:65:enum SortOrder { INCREASING, DECREASING };
rts/linker/InitFini.c:68:static void sortInitFiniList(struct InitFiniList **slist, enum SortOrder order)
rts/linker/M32Alloc.c:162:enum m32_page_type {
rts/linker/M32Alloc.c:193:  enum m32_page_type type;
rts/linker/M32Alloc.c:217:static void ASSERT_PAGE_TYPE(struct m32_page_t *page, enum m32_page_type ty) {
rts/linker/M32Alloc.c:223:static void SET_PAGE_TYPE(struct m32_page_t *page, enum m32_page_type ty) {
rts/linker/PEi386.h:25:typedef enum _COFF_OBJ_TYPE {
rts/linker/MMap.h:53:typedef enum {
rts/linker/PEi386.c:1435:                "  num rel %hu\n"
rts/linker/PEi386.c:2040:                            "reloc sec %2d num %3d:  P=%p, type 0x%-4x   "
rts/Trace.h:39:enum CapsetType { CapsetTypeCustom = CAPSET_TYPE_CUSTOM,
rts/Trace.h:114:void traceSchedEvent_ (Capability *cap, EventTypeNum tag,
rts/Trace.h:127:void traceGcEvent_ (Capability *cap, EventTypeNum tag);
rts/Trace.h:137:void traceGcEventAtT_ (Capability *cap, StgWord64 ts, EventTypeNum tag);
rts/Trace.h:147:                      EventTypeNum  tag,
rts/Trace.h:187:void traceSparkEvent_ (Capability *cap, EventTypeNum tag, StgWord info1);
rts/Trace.h:278:                    EventTypeNum  tag);
rts/Trace.h:285:void traceCapsetEvent_ (EventTypeNum tag,
rts/LinkerInternals.h:60:typedef enum _SymType {
rts/LinkerInternals.h:105:   enum { /* Section is code or readonly. e.g. .text or .r(o)data.  */
rts/LinkerInternals.h:136:   enum { SECTION_NOMEM,
rts/LinkerInternals.h:144: * enum since it's more explicit and look nicer in a debugger.
rts/LinkerInternals.h:149:typedef enum {
rts/LinkerInternals.h:243:typedef enum {
rts/LinkerInternals.h:423:typedef enum _SymStrength {
rts/win32/AsyncWinIO.c:386:  *num = num_notify;
rts/win32/MIOManager.c:528:            num = ioMan->numWorkers;
rts/win32/MIOManager.c:530:            if (num == 0)
rts/sm/NonMoving.c:896:enum ConcurrentWorkerState {
rts/sm/NonMoving.c:906:enum ConcurrentWorkerState concurrent_worker_state;
rts/sm/CNF.c:153:typedef enum {
rts/sm/NonMovingAllocate.c:18:enum AllocLockMode { NO_LOCK, ALLOC_SPIN_LOCK, SM_LOCK };
rts/sm/NonMovingAllocate.c:20:static struct NonmovingSegment *nonmovingAllocSegment(enum AllocLockMode mode, uint32_t node);
rts/sm/NonMovingAllocate.c:26:static void *nonmovingAllocate_(enum AllocLockMode mode, Capability *cap, StgWord sz);
rts/sm/NonMovingAllocate.c:29:static inline void acquire_alloc_lock(enum AllocLockMode mode) {
rts/sm/NonMovingAllocate.c:42:static inline void release_alloc_lock(enum AllocLockMode mode) {
rts/sm/NonMovingAllocate.c:62:static struct NonmovingSegment *nonmovingAllocSegment(enum AllocLockMode mode, uint32_t node)
rts/sm/NonMovingAllocate.c:186:static void *nonmovingAllocate_(enum AllocLockMode mode, Capability *cap, StgWord sz)
rts/sm/MarkWeak.c:77:typedef enum { WeakPtrs, WeakThreads, WeakDone } WeakStage;
rts/sm/NonMovingSweep.c:22:enum SweepResult {
rts/sm/NonMovingSweep.c:31:GNUC_ATTR_HOT static enum SweepResult
rts/sm/NonMovingSweep.c:141:        enum SweepResult ret = nonmovingSweepSegment(seg);
rts/sm/NonMoving.h:45:enum NonmovingSegmentState {
rts/sm/NonMoving.h:62:    enum NonmovingSegmentState state;
rts/sm/NonMovingMark.h:16:enum EntryType {
rts/sm/NonMovingMark.h:62:INLINE_HEADER enum EntryType nonmovingMarkQueueEntryType(MarkQueueEnt *ent)
rts/sm/NonMovingMark.h:66:    return (enum EntryType) tag;
rts/RtsFlags.c:94:static void procRtsOpts (int rts_argc0, RtsOptsEnabledEnum enabled);
rts/RtsFlags.c:542:"             handle completion events. (default: num cores)",
rts/RtsFlags.c:833:static void checkSuid(RtsOptsEnabledEnum enabled)
rts/RtsFlags.c:846:static void checkSuid (RtsOptsEnabledEnum enabled STG_UNUSED)
rts/RtsFlags.c:851:static void checkUnsafe(RtsOptsEnabledEnum enabled)
rts/RtsFlags.c:860:                         RtsOptsEnabledEnum rtsOptsEnabled)
rts/RtsFlags.c:1021:                      enum IOManagerAvailability availability;
rts/RtsFlags.c:1088:                          num = (StgWord)strtol(rts_argv[arg]+21,
rts/RtsFlags.c:1097:                      if (num < 1) {
rts/RtsFlags.c:2719:check that x <= num cpus.
rts/RetainerSet.c:37: *        addElement(e, rs)      = rs_MANY,   if rs->num >= maxRetainerSetSize
rts/RetainerSet.c:44:    .num     = 0,
rts/RetainerSet.c:96:        if (rs->num == 1 &&  rs->element[0] == r) return rs;    // found it
rts/RetainerSet.c:100:    rs->num = 1;
rts/RetainerSet.c:133:    ASSERT(rs->num <= RtsFlags.ProfFlags.maxRetainerSetSize);
rts/RetainerSet.c:135:    if (rs == &rs_MANY || rs->num == RtsFlags.ProfFlags.maxRetainerSetSize) {
rts/RetainerSet.c:146:    // remaining (rs->num - nl) retainers.
rts/RetainerSet.c:153:        if (rs->num + 1 != nrs->num) continue;
rts/RetainerSet.c:175:    nrs = arenaAlloc( arena, sizeofRetainerSet(rs->num + 1) );
rts/RetainerSet.c:176:    nrs->num = rs->num + 1;
rts/RetainerSet.c:225:        if (j < rs->num - 1) {
rts/RetainerSet.c:299:        for (j = 0; j < rsArray[i]->num - 1; j++) {
rts/TraverseHeap.h:19:typedef enum {
rts/IOManager.c:95:enum IOManagerAvailability
rts/gen_event_types.py:174:        pr('      .etNum = {},'.format(ty.n))
rts/posix/Select.c:130:enum FdState {
rts/posix/Select.c:136:static enum FdState fdPollReadState (int fd)
rts/posix/Select.c:171:static enum FdState fdPollWriteState (int fd)
rts/posix/Select.c:398:              enum FdState fd_state = RTS_FD_IS_BLOCKING;
rts/Capability.h:291:typedef enum {
rts/include/rts/storage/Closures.h:538:typedef enum {
rts/include/rts/Flags.h:238:typedef enum _IO_MANAGER_FLAG {
rts/include/rts/Linker.h:51:typedef enum {
rts/include/rts/EventLogWriter.h:51:enum EventLogStatus {
rts/include/rts/EventLogWriter.h:63:enum EventLogStatus eventLogStatus(void);
rts/include/rts/EventLogFormat.h:120:typedef enum {
rts/include/RtsAPI.h:25:typedef enum {
rts/include/RtsAPI.h:68:typedef enum {
rts/include/RtsAPI.h:84:    RtsOptsEnabledEnum rts_opts_enabled;
rts/StgCRun.c:450:          "0x07, " // register num 7 - rsp
rts/eventlog/EventLog.c:131:  EventTypeNum etNum;  // Event Type number.
rts/eventlog/EventLog.c:144:static void postLogMsg(EventsBuf *eb, EventTypeNum type, char *msg, va_list ap);
rts/eventlog/EventLog.c:149:static StgBool hasRoomForEvent(EventsBuf *eb, EventTypeNum eNum);
rts/eventlog/EventLog.c:154:static void ensureRoomForEvent(EventsBuf *eb, EventTypeNum tag);
rts/eventlog/EventLog.c:204:static inline void postEventTypeNum(EventsBuf *eb, EventTypeNum etNum)
rts/eventlog/EventLog.c:234:static inline void postEventHeader(EventsBuf *eb, EventTypeNum type)
rts/eventlog/EventLog.c:393:enum EventLogStatus
rts/eventlog/EventLog.c:559:                EventTypeNum tag,
rts/eventlog/EventLog.c:607:                EventTypeNum tag,
rts/eventlog/EventLog.c:663:postCapEvent (EventTypeNum  tag,
rts/eventlog/EventLog.c:688:void postCapsetEvent (EventTypeNum tag,
rts/eventlog/EventLog.c:729:void postCapsetStrEvent (EventTypeNum tag,
rts/eventlog/EventLog.c:761:void postCapsetVecEvent (EventTypeNum tag,
rts/eventlog/EventLog.c:853:                    EventTypeNum   tag,
rts/eventlog/EventLog.c:993:postEventNoCap (EventTypeNum tag)
rts/eventlog/EventLog.c:1002:postEvent (Capability *cap, EventTypeNum tag)
rts/eventlog/EventLog.c:1010:postEventAtTimestamp (Capability *cap, EventTimestamp ts, EventTypeNum tag)
rts/eventlog/EventLog.c:1024:void postLogMsg(EventsBuf *eb, EventTypeNum type, char *msg, va_list ap)
rts/eventlog/EventLog.c:1052:void postUserEvent(Capability *cap, EventTypeNum type, char *msg)
rts/eventlog/EventLog.c:1076:                         EventTypeNum  type,
rts/eventlog/EventLog.c:1518:StgBool hasRoomForEvent(EventsBuf *eb, EventTypeNum eNum)
rts/eventlog/EventLog.c:1542:void ensureRoomForEvent(EventsBuf *eb, EventTypeNum tag)
rts/eventlog/EventLog.c:1626:enum EventLogStatus eventLogStatus(void)
rts/eventlog/EventLog.h:52:void postSchedEvent(Capability *cap, EventTypeNum tag,
rts/eventlog/EventLog.h:58:void postEvent(Capability *cap, EventTypeNum tag);
rts/eventlog/EventLog.h:59:void postEventNoCap(EventTypeNum tag);
rts/eventlog/EventLog.h:62:                           EventTypeNum tag);
rts/eventlog/EventLog.h:66:void postUserEvent(Capability *cap, EventTypeNum type, char *msg);
rts/eventlog/EventLog.h:68:void postUserBinaryEvent(Capability *cap, EventTypeNum type,
rts/eventlog/EventLog.h:76:void postCapEvent (EventTypeNum  tag,
rts/eventlog/EventLog.h:82:void postCapsetEvent (EventTypeNum tag,
rts/eventlog/EventLog.h:89:void postCapsetStrEvent (EventTypeNum tag,
rts/eventlog/EventLog.h:96:void postCapsetVecEvent (EventTypeNum tag,
rts/eventlog/EventLog.h:106:void postSparkEvent(Capability *cap, EventTypeNum tag, StgWord info1);
rts/eventlog/EventLog.h:127:                    EventTypeNum   tag,
rts/eventlog/EventLog.h:213:                                   EventTypeNum tag STG_UNUSED,
rts/eventlog/EventLog.h:220:                              EventTypeNum tag STG_UNUSED)
rts/eventlog/EventLog.h:230:INLINE_HEADER void postEventNoCap (EventTypeNum tag STG_UNUSED)
rts/Globals.c:26:typedef enum {
rts/Schedule.h:67:enum SchedState {
rts/Schedule.h:75:INLINE_HEADER void setSchedState(enum SchedState ss)
rts/Schedule.h:80:INLINE_HEADER enum SchedState getSchedState(void)
rts/Schedule.h:82:    return (enum SchedState) SEQ_CST_LOAD_ALWAYS(&sched_state);
rts/Schedule.h:101:enum RecentActivity {
rts/Schedule.h:124:INLINE_HEADER enum RecentActivity
rts/Schedule.h:125:setRecentActivity(enum RecentActivity new_value)
rts/Schedule.h:128:    return (enum RecentActivity) old;
rts/Schedule.h:131:INLINE_HEADER enum RecentActivity
rts/Schedule.h:134:    return (enum RecentActivity) RELAXED_LOAD_ALWAYS(&recent_activity);
rts/IOManager.h:128:typedef enum {
rts/IOManager.h:180:enum IOManagerAvailability {
rts/IOManager.h:185:enum IOManagerAvailability
rts/IOManager.h:278: * such cases we use a shared code path with an enum to say which we're doing.
rts/IOManager.h:280:typedef enum { IORead, IOWrite } IOReadOrWrite;
rts/js/string.js:103:var h$alnum = null;
rts/js/string.js:105:  if(h$alnum == null) { h$alnum = h$decodeRLE(h$alnumRanges); }
rts/js/enum.js:3:// some Enum conversion things
rts/js/debug.js:154:  // if(stk.indexOf(' at h$makeEnum ') >= 0) return true;
rts/RetainerSet.h:97:  if (rs->num < BINARY_SEARCH_THRESHOLD) {
rts/RetainerSet.h:105:    right = rs->num - 1;
rts/RetainerProfile.c:329:            if (s->num == retainerSetOfc->num + 1) {
rts/Apply.cmm:515:   inplaceSum :: Num a => [a] ─> a
rts/xxhash.h:500:typedef enum {
rts/xxhash.h:2486: * @brief Enum to indicate whether a pointer is aligned.
rts/xxhash.h:2488:typedef enum {
rts/xxhash.h:3545:enum XXH_VECTOR_TYPE /* fake enum */ {
rts/xxhash.h:5233:                /* svprfd(svbool_t, void *, enum svfprop); */
rts/RtsSymbolInfo.h:15:typedef enum _SymbolKind {
testsuite/tests/stage1/T2632.hs:7:op :: Num v => v -> v -> v
testsuite/tests/warnings/should_compile/PluralS.stderr:4:        Num a0 arising from the literal ‘123’
testsuite/tests/warnings/should_compile/PluralS.stderr:7:      In an equation for ‘defaultingNum’: defaultingNum = 123 `seq` ()
testsuite/tests/warnings/should_compile/PluralS.stderr:12:        (Num a0) arising from the literal ‘123’ at PluralS.hs:17:29-31
testsuite/tests/warnings/should_compile/PluralS.stderr:18:    Redundant constraint: Num a
testsuite/tests/warnings/should_compile/PluralS.stderr:20:         redundantNum :: forall a. (Num a, Num a) => a
testsuite/tests/warnings/should_compile/PluralS.stderr:23:    Redundant constraints: (Show a, Num a, Eq a, Eq a)
testsuite/tests/warnings/should_compile/PluralS.stderr:26:                              (Num a, Show a, Num a, Eq a, Eq a) =>
testsuite/tests/warnings/should_compile/PluralS.hs:15:defaultingNum = 123 `seq` ()
testsuite/tests/warnings/should_compile/PluralS.hs:23:redundantNum :: (Num a, Num a) => a
testsuite/tests/warnings/should_compile/PluralS.hs:24:redundantNum = 123
testsuite/tests/warnings/should_compile/PluralS.hs:26:redundantMultiple :: (Num a, Show a, Num a, Eq a, Eq a) => a
testsuite/tests/warnings/minimal/WarnMinimal.hs:99:instance Num Bool where  -- WARNING LINE
testsuite/tests/warnings/minimal/WarnMinimal.stderr:50:    • In the instance declaration for ‘Num Bool’
testsuite/tests/haddock/should_compile_noflag_haddock/haddockC031.hs:6:  | forall a. Num a => C a {-^ comment for C -}
testsuite/tests/haddock/should_compile_noflag_haddock/haddockC027.hs:12:--          -> forall c. Num c
testsuite/tests/haddock/should_compile_noflag_haddock/haddockC027.hs:21:        -> forall c. (Num c) => [c] -- ^ doc3
testsuite/tests/haddock/perf/Fold.hs:3287:productOf :: Num a => Getting (Endo (Endo a)) s a -> s -> a
testsuite/tests/haddock/perf/Fold.hs:3323:sumOf :: Num a => Getting (Endo (Endo a)) s a -> s -> a
testsuite/tests/haddock/should_compile_flag_haddock/haddockA031.hs:6:  | forall a. Num a => C a {-^ comment for C -}
testsuite/tests/haddock/should_compile_flag_haddock/haddockA027.stderr:11:        (Num c) =>
testsuite/tests/haddock/should_compile_flag_haddock/haddockA027.hs:7:        -> forall c. (Num c) => [c] -- ^ doc3
testsuite/tests/haddock/should_compile_flag_haddock/haddockA031.stderr:8:    forall a. Num a => C a {-^ comment for C -}
testsuite/tests/rts/T5644/Conf.hs:6:bufferSize :: (Num a) => a
testsuite/tests/rts/ipe/IpeStats/Fold.hs:3289:productOf :: Num a => Getting (Endo (Endo a)) s a -> s -> a
testsuite/tests/rts/ipe/IpeStats/Fold.hs:3325:sumOf :: Num a => Getting (Endo (Endo a)) s a -> s -> a
testsuite/tests/rts/T9579/T9579_stackoverflow_rtssome.stdout:1:T9579_stackoverflow_rtssome: Stack space overflow: current size NUM bytes.
testsuite/tests/rts/T9579/all.T:16:           | sed -e 's/[0-9]* bytes/NUM bytes/g' ) \
testsuite/tests/rts/T9579/T9579_outofheap_rtsall_no_suggestions.stdout:2:T9579_outofheap_rtsall_no_suggestions: Current maximum heap size is NUM bytes (1 MB).
testsuite/tests/rts/T9579/T9579_outofheap_rtssome.stdout:2:T9579_outofheap_rtssome: Current maximum heap size is NUM bytes (1 MB).
testsuite/tests/rts/T9579/T9579_stackoverflow_rtsall_no_suggestions.stdout:1:T9579_stackoverflow_rtsall_no_suggestions: Stack space overflow: current size NUM bytes.
testsuite/tests/rts/T9579/T9579_outofheap_rtsnone.stdout:2:T9579_outofheap_rtsnone: Current maximum heap size is NUM bytes (1 MB).
testsuite/tests/rts/T9579/T9579_stackoverflow_rtsnone.stdout:1:T9579_stackoverflow_rtsnone: Stack space overflow: current size NUM bytes.
testsuite/tests/rts/T9579/T9579_outofheap_rtsall.stdout:2:T9579_outofheap_rtsall: Current maximum heap size is NUM bytes (1 MB).
testsuite/tests/rts/T9579/T9579_stackoverflow_rtsall.stdout:1:T9579_stackoverflow_rtsall: Stack space overflow: current size NUM bytes.
testsuite/tests/lib/integer/IntegerConversionRules.hs:21:fi :: (Integral a, Num b) => a -> b
testsuite/tests/lib/integer/naturalConstantFolding.hs:93:signumNaturalP = signum 100067
testsuite/tests/lib/integer/naturalConstantFolding.hs:96:signumNaturalZ = signum 0
testsuite/tests/lib/integer/integerConstantFolding.hs:100:signumIntegerP = signum 100020
testsuite/tests/lib/integer/integerConstantFolding.hs:102:signumIntegerZ = signum 0
testsuite/tests/lib/integer/integerConstantFolding.hs:104:signumIntegerN = signum (-100021)
testsuite/tests/lib/integer/integerPowMod.hs:39:    b,e,m :: Num a => a
testsuite/tests/lib/base/T16916.hs:18:    sockNum <-
testsuite/tests/lib/base/T16916.hs:23:    return $ (fromIntegral sockNum :: Fd)
testsuite/tests/lib/base/T19569b.hs:17:instance Num MulTree where
testsuite/tests/lib/base/T19569b.hs:21:opaquePow :: (Num a, Integral b) => a -> b -> a
testsuite/tests/deriving/should_compile/drv014.hs:9:deriving instance Num N
testsuite/tests/deriving/should_compile/T2856.hs:25:deriving instance Num (W Bool)
testsuite/tests/deriving/should_compile/T2856.hs:26:deriving instance (Integral a, Num a) => Num (W [a])
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:195:instance (Applicative f, Num a) => Num (WrapApplicative f a) where
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:201:  signum      = fmap signum
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:274:instance (Num a, Eq a) => IsZero (WrappedNumEq a) where
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:282:instance (Num a, Eq a) => IsZero (WrappedNumEq2 a) where
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:314:instance (Biapplicative p, Num a, Num b) => Num (WrapBiapp p a b) where
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:320:  signum = bimap signum signum
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:383:  zero :: Num a => f a
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:384:  (^+^) :: Num a => f a -> f a -> f a
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:386:  (^-^) :: Num a => f a -> f a -> f a
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:418:  (.-.) :: Num a => p a -> p a -> Diff p a
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:419:  (.+^) :: Num a => p a -> Diff p a -> p a
testsuite/tests/deriving/should_compile/deriving-via-compile.hs:420:  (.-^) :: Num a => p a -> Diff p a -> p a
testsuite/tests/deriving/should_compile/deriving-1935.hs:18: instance Num a => Eq (T a)
testsuite/tests/deriving/should_compile/T15831.hs:31:deriving via                    Const Int (a :: k)   instance Enum    Age2
testsuite/tests/deriving/should_compile/T15831.hs:33:deriving via forall k (a :: k). Const Int a          instance Num     Age2
testsuite/tests/deriving/should_compile/T18321.hs:10:deriving instance Enum T
testsuite/tests/deriving/should_compile/T18321.hs:13:deriving instance Enum (S Int)
testsuite/tests/deriving/should_compile/T18321.hs:15:deriving instance Enum (S Bool)
testsuite/tests/deriving/should_compile/drv010.hs:1:-- !!! deriving Enum on d. type with nullary constructors
testsuite/tests/deriving/should_run/drvrun001.hs:5:instance Num Age where
testsuite/tests/deriving/should_run/drvrun001.hs:10:  signum      = undefined
testsuite/tests/deriving/should_fail/T1133A.stderr:3:    • Can't make a derived instance of ‘Enum X’:
testsuite/tests/deriving/should_fail/T10598_fail1.stderr:9:    • Can't make a derived instance of ‘Num B’ with the stock strategy:
testsuite/tests/deriving/should_fail/T4528.stderr:3:    • Can't make a derived instance of ‘Enum (Foo a)’:
testsuite/tests/deriving/should_fail/T4528.stderr:6:    • In the stand-alone deriving instance for ‘Enum (Foo a)’
testsuite/tests/deriving/should_fail/T4528.hs:9:deriving instance Enum (Foo a)
testsuite/tests/cmm/opt/T20142.hs:25:    | otherwise = singleton $! toEnum (fromIntegral n + 87)
testsuite/tests/generics/all.T:25:    , multimod_compile_and_run, ['T5462Yes1', '-iGEq -iGEnum -iGFunctor'])
testsuite/tests/generics/GEnum/Enum.hs:8:module Enum where
testsuite/tests/generics/GEnum/Enum.hs:60:instance (GEnum c) => Enum' (K1 i c) where
testsuite/tests/generics/GEnum/Enum.hs:72:instance (GEnum a) => GEnum (Maybe a)
testsuite/tests/generics/GEnum/Enum.hs:73:instance (GEnum a) => GEnum [a]
testsuite/tests/generics/GEnum/Enum.hs:79:class GEnum a where
testsuite/tests/generics/GEnum/Enum.hs:80:  genum :: [a]
testsuite/tests/generics/GEnum/Enum.hs:82:  default genum :: (Generic a, Enum' (Rep a)) => [a]
testsuite/tests/generics/GEnum/Enum.hs:83:  genum = genumDefault
testsuite/tests/generics/GEnum/Enum.hs:85:instance GEnum Int where
testsuite/tests/generics/GEnum/Enum.hs:86:  genum = [0..] ||| (neg 0) where
testsuite/tests/generics/T5462Yes1.hs:36:             , take 10 (genum :: [A])
testsuite/tests/generics/T5462Yes1.hs:40:             , take 3 (genum :: [B A])
testsuite/tests/overloadedlists/should_fail/overloadedlistsfail02.stderr:9:    • No instance for ‘Num (GHC.Internal.IsList.Item Foo)’
testsuite/tests/overloadedlists/should_fail/overloadedlistsfail01.stderr:35:        instance Num Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/overloadedlists/should_fail/overloadedlistsfail01.stderr:36:        instance Num Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/overloadedlists/should_fail/overloadedlistsfail04.stderr:3:    • No instance for ‘Enum [Char]’
testsuite/tests/simplCore/should_compile/T21851_2.stderr:67:  :: forall {a}. (Ord a, Num a) => a -> (# a, String #)
testsuite/tests/simplCore/should_compile/T21851_2.stderr:73:  = \ (@a) ($dOrd :: Ord a) ($dNum :: Num a) (n :: a) ->
testsuite/tests/simplCore/should_compile/T21851_2.stderr:74:      case < @a $dOrd n (fromInteger @a $dNum lvl2) of {
testsuite/tests/simplCore/should_compile/T21851_2.stderr:77:            @a $dOrd $dNum (- @a $dNum n (fromInteger @a $dNum lvl));
testsuite/tests/simplCore/should_compile/T21851_2.stderr:78:        True -> (# fromInteger @a $dNum lvl1, lvl3 @a #)
testsuite/tests/simplCore/should_compile/T21851_2.stderr:83:g [InlPrag=[2]] :: forall a. (Ord a, Num a) => a -> (a, String)
testsuite/tests/simplCore/should_compile/T21851_2.stderr:93:                 ($dNum [Occ=Once1] :: Num a)
testsuite/tests/simplCore/should_compile/T21851_2.stderr:95:                 case T21851_2.$wg @a $dOrd $dNum n of
testsuite/tests/simplCore/should_compile/T21851_2.stderr:99:g = \ (@a) ($dOrd :: Ord a) ($dNum :: Num a) (n :: a) ->
testsuite/tests/simplCore/should_compile/T21851_2.stderr:100:      case T21851_2.$wg @a $dOrd $dNum n of { (# ww, ww1 #) ->
testsuite/tests/simplCore/should_compile/T19586.hs:6:type MyConstraint a b = (Show a, Enum b, Show b)
testsuite/tests/simplCore/should_compile/T23024a.hs:12:class MyNum a where
testsuite/tests/simplCore/should_compile/T23024a.hs:15:class (MyNum a, Eq a) => MyReal a
testsuite/tests/simplCore/should_compile/T23024a.hs:20:class (MyRealFrac a, MyNum a) => MyRealFloat a
testsuite/tests/simplCore/should_compile/T23024a.hs:22:instance MyNum Double
testsuite/tests/simplCore/should_compile/T23024a.hs:47:instance MyNum (Vector Double)
testsuite/tests/simplCore/should_compile/T23024a.hs:48:instance (MyNum (Vector a), Storable a, Eq a) => MyReal (Vector a)
testsuite/tests/simplCore/should_compile/T23024a.hs:49:instance (MyNum (Vector a), Storable a, Eq a) => MyRealFrac (Vector a)
testsuite/tests/simplCore/should_compile/T23024a.hs:50:instance (MyNum (Vector a), Storable a, MyRealFloat a) => MyRealFloat (Vector a)
testsuite/tests/simplCore/should_compile/T23024a.hs:57:instance (MyNum (Vector a)) => MyNum (ORArray a)
testsuite/tests/simplCore/should_compile/T23024a.hs:58:instance (MyNum (Vector a), Storable a, Eq a) => MyReal (ORArray a)
testsuite/tests/simplCore/should_compile/T23024a.hs:67:instance MyNum (ORArray a) => MyNum (Ast a) where
testsuite/tests/simplCore/should_compile/T23024a.hs:70:instance MyNum (ORArray a) => MyReal (Ast a)
testsuite/tests/simplCore/should_compile/T23024a.hs:78:instance (MyRealFloat a, MyNum (Vector a), Storable a) => Tensor (Ast a)
testsuite/tests/simplCore/should_compile/T14152a.stderr:124:go :: forall t a. (Num a, Num t, Eq a, Eq t) => t -> a -> a
testsuite/tests/simplCore/should_compile/T14152a.stderr:134:      ($dNum_a2l7 :: Num a_a2i4)
testsuite/tests/simplCore/should_compile/T14152a.stderr:135:      ($dNum1_a2l8 :: Num t_a2l3)
testsuite/tests/simplCore/should_compile/T19890.stderr:14:  :: forall {a}. Num a => Bool -> a -> a
testsuite/tests/simplCore/should_compile/T19890.stderr:21:                 ($dNum_ayf :: Num a_aye)
testsuite/tests/simplCore/should_compile/T19890.stderr:31:      ($dNum_ayf :: Num a_aye)
testsuite/tests/simplCore/should_compile/T19890.stderr:42:foo :: forall a. Num a => Bool -> Wombat a
testsuite/tests/simplCore/should_compile/T19890.stderr:52:            <Num a>_R
testsuite/tests/simplCore/should_compile/T19890.stderr:55:            :: (forall {a}. Num a => Bool -> a -> a)
testsuite/tests/simplCore/should_compile/T19890.stderr:56:               ~R# (forall {a}. Num a => Bool -> Wombat a))
testsuite/tests/simplCore/should_compile/T18355.stderr:7:f :: forall {a}. Num a => a -> Bool -> a -> a
testsuite/tests/simplCore/should_compile/T18355.stderr:15:      ($dNum :: Num a)
testsuite/tests/simplCore/should_compile/T18355.stderr:20:        False -> - @a $dNum x eta;
testsuite/tests/simplCore/should_compile/T18355.stderr:21:        True -> + @a $dNum x eta
testsuite/tests/simplCore/should_compile/T4203.hs:13:instance (Eq a, Num a) => Arbitrary (NonNegative a) where
testsuite/tests/simplCore/should_compile/T4203.hs:17:rubble :: (Eq a, Num a) => a -> a
testsuite/tests/simplCore/should_compile/T21851_2.hs:7:g :: forall a. (Ord a, Num a) => a -> (a,String)
testsuite/tests/simplCore/should_compile/str-rules.hs:6:  let mix c n = fromEnum c + n
testsuite/tests/simplCore/should_compile/T5359b.hs:52:{-# INLINE genum #-}
testsuite/tests/simplCore/should_compile/T5359b.hs:53:genum :: (Representable a, Enum' (Rep a)) => [a]
testsuite/tests/simplCore/should_compile/T5359b.hs:54:-- The definition of genum is essential for the bug
testsuite/tests/simplCore/should_compile/T5359b.hs:55:genum = map to enum'
testsuite/tests/simplCore/should_compile/T5359b.hs:62:{-# SPECIALISE genum :: [Tree] #-}
testsuite/tests/simplCore/should_compile/T19599.hs:3:class (Show a, Enum a) => MyShow a where
testsuite/tests/simplCore/should_compile/simpl016.stderr:3:    Forall'd constraint ‘Num b’ is not bound in RULE lhs
testsuite/tests/simplCore/should_compile/T5298A.hs:4:fac :: (Eq a, Num a) => a -> a
testsuite/tests/simplCore/should_compile/T5298A.hs:9:f :: (Eq a, Num a) => a -> a
testsuite/tests/simplCore/should_compile/T15445a.hs:4:plusTwoRec :: Num a => [a] -> [a]
testsuite/tests/simplCore/should_compile/T15445a.hs:8:plusTwoRec' :: Num a => [a] -> [a]
testsuite/tests/simplCore/should_compile/T4918a.hs:3:class MyEnum a where 
testsuite/tests/simplCore/should_compile/T4918a.hs:4: myEnum :: [a]
testsuite/tests/simplCore/should_compile/T4918a.hs:6:instance MyEnum () where 
testsuite/tests/simplCore/should_compile/T4918a.hs:7: myEnum = [()]
testsuite/tests/simplCore/should_compile/T3831.hs:20:instance (Enum p, OutputCap f) => OutputCap (p -> f) where
testsuite/tests/simplCore/should_compile/T14152.stderr:23:go :: forall t a. (Num a, Num t, Eq a, Eq t) => t -> a -> a
testsuite/tests/simplCore/should_compile/T14152.stderr:34:      ($dNum_a2l7 :: Num a_a2i4)
testsuite/tests/simplCore/should_compile/T14152.stderr:35:      ($dNum1_a2l8 :: Num t_a2l3)
testsuite/tests/simplCore/should_compile/T21851_2a.hs:3:f :: (Num a, Show b) => a -> b -> String
testsuite/tests/simplCore/should_compile/T5342.hs:10:cellsAround :: (Num a, Num b, Ord a, Ord b) => [(a, b)] -> [(a, b)]  
testsuite/tests/simplCore/should_compile/T5342.hs:13:increaseAreas :: (Num a, Num b, Ord a, Ord b) => [[(a, b)]] -> [[(a, b)]]  
testsuite/tests/simplCore/should_compile/simpl016.hs:7:{-# SPECIALIZE delta' :: Num b => Int -> Int -> b -> b -> b #-}
testsuite/tests/simplCore/should_compile/simpl016.hs:11:{-# SPECIALIZE delta :: Num b => Int -> Int -> b #-}
testsuite/tests/simplCore/should_compile/simpl016.hs:12:delta :: (Eq a, Num b) => a -> a -> b
testsuite/tests/simplCore/should_compile/T19890.hs:5:foo :: Num a => Bool -> Wombat a
testsuite/tests/simplCore/should_compile/OpaqueNoSpecialise.stderr:12:f [InlPrag=OPAQUE] :: forall {t}. Num t => t -> [t]
testsuite/tests/simplCore/should_compile/OpaqueNoSpecialise.stderr:17:f = \ (@t) ($dNum :: Num t) (eta :: t) ->
testsuite/tests/simplCore/should_compile/OpaqueNoSpecialise.stderr:21:        lvl1 = fromInteger @t $dNum lvl } in
testsuite/tests/simplCore/should_compile/OpaqueNoSpecialise.stderr:25:        f1 = \ (x :: t) -> GHC.Types.: @t x (f1 (- @t $dNum x lvl1)); } in
testsuite/tests/simplCore/should_compile/T21689a.hs:38:data PeanoNum = Z
testsuite/tests/simplCore/should_compile/T21689a.hs:41:type family Peano (n :: Nat) :: PeanoNum where
testsuite/tests/simplCore/should_compile/T12212.hs:13:-- forall a b. (Num a, F a ~# F b) => a -> b -> [F a]
testsuite/tests/simplCore/should_compile/T5298.stdout:14:"SPEC/T5298B fac @Int" forall $dEq $dNum. fac $dEq $dNum = g
testsuite/tests/simplCore/should_compile/T5821.hs:8:foo :: Num a => a -> T a
testsuite/tests/simplCore/should_compile/T21286a.hs:5:f :: (Eq a, Num a) => a -> a
testsuite/tests/simplCore/should_compile/T21286a.hs:8:g :: (Eq a, Num a) => a -> a -> a
testsuite/tests/simplCore/should_compile/T22611.hs:16:  NotFound -> foo (fmap (toEnum . (+1) . fromEnum) x) subst
testsuite/tests/simplCore/should_compile/T21851.hs:6:g :: Num a => a -> a
testsuite/tests/simplCore/should_compile/T22761.hs:13:pow :: (Num m) => Mod m -> Mod m
testsuite/tests/simplCore/should_compile/T21851a.hs:3:f :: Num b => b -> (b, b) -- note: recursive to prevent inlining
testsuite/tests/simplCore/should_run/T2486.hs:34:fib :: (Num a, Ord a) => a -> a
testsuite/tests/simplCore/should_run/T2486.hs:37:tak :: (Num a, Ord a) => a -> a -> a -> a
testsuite/tests/simplCore/should_run/T15436.hs:10:instance Enum Z where
testsuite/tests/simplCore/should_run/T15436.hs:11:  fromEnum Y     = 0
testsuite/tests/simplCore/should_run/T15436.hs:12:  fromEnum (X s) = 1 + fromEnum s
testsuite/tests/simplCore/should_run/T15436.hs:13:  toEnum 0   = Y
testsuite/tests/simplCore/should_run/T15436.hs:14:  toEnum i   = X (toEnum (i - 1))
testsuite/tests/simplCore/should_run/T17151a.hs:70:  :: (Source r ix e, Num e)
testsuite/tests/simplCore/should_run/simplrun010.hs:89:yHC_Primitive_primIntSignum = signum :: Int -> Int
testsuite/tests/simplCore/should_run/simplrun010.hs:127:yHC_Primitive_primDoubleSignum = signum :: Double -> Double
testsuite/tests/simplCore/should_run/simplrun010.hs:140:prelude_Integer_Num_signum = signum :: Integer -> Integer
testsuite/tests/simplCore/should_run/simplrun010.hs:153:data_Char_isSpace c = isspace (toEnum c) /= 0
testsuite/tests/simplCore/should_run/simplrun005.hs:29:instance Num Nat where
testsuite/tests/simplCore/should_run/simplrun005.hs:40:instance Enum Nat where
testsuite/tests/simplCore/should_run/simplrun005.hs:44:  toEnum               =  fromInteger . toInteger
testsuite/tests/simplCore/should_run/simplrun005.hs:45:  fromEnum Z           =  0
testsuite/tests/simplCore/should_run/simplrun005.hs:46:  fromEnum (S n)       =  fromEnum n + 1
testsuite/tests/simplCore/should_run/simplrun009.hs:57:foo :: Num a => [[a]] -> [a]
testsuite/tests/tcplugins/TcPlugin_CtId.hs:9:foo :: CtId (Num a) => a
testsuite/tests/extendedliterals/extendedliterals01.hs:27:data CEnum = Cons00 | Cons01 | ConsFF deriving Show
testsuite/tests/extendedliterals/extendedliterals01.hs:28:parseCEnum :: Word8# -> (# (##) | CEnum #)
testsuite/tests/extendedliterals/extendedliterals01.hs:29:parseCEnum = \case 0x00#Word8 -> (# | Cons00 #)
testsuite/tests/partial-sigs/should_compile/T14643a.hs:5:af :: (Num a,_) => a -> a
testsuite/tests/partial-sigs/should_compile/T14643a.hs:8:ag :: (Num a,_) => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:6:  (*) :: forall {a}. Num a => a -> a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:8:  (+) :: forall {a}. Num a => a -> a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:10:  (-) :: forall {a}. Num a => a -> a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:24:  (^) :: forall {b} {a}. (Integral b, Num a) => a -> b -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:26:  abs :: forall {a}. Num a => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:68:  enumFrom :: forall {a}. Enum a => a -> [a]
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:69:  enumFromThen :: forall {a}. Enum a => a -> a -> [a]
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:70:  enumFromThenTo :: forall {a}. Enum a => a -> a -> a -> [a]
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:71:  enumFromTo :: forall {a}. Enum a => a -> a -> [a]
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:97:  fromEnum :: forall {a}. Enum a => a -> Int
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:98:  fromInteger :: forall {a}. Num a => Integer -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:99:  fromIntegral :: forall {a} {b}. (Integral a, Num b) => a -> b
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:144:  negate :: forall {a}. Num a => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:153:  pred :: forall {a}. Enum a => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:156:    forall {t :: * -> *} {a}. (P.Foldable t, Num a) => t a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:202:  signum :: forall {a}. Num a => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:209:  subtract :: forall {a}. Num a => a -> a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:210:  succ :: forall {a}. Enum a => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:211:  sum :: forall {t :: * -> *} {a}. (P.Foldable t, Num a) => t a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.stderr:217:  toEnum :: forall {a}. Enum a => Int -> a
testsuite/tests/partial-sigs/should_compile/Defaulting2MROff.stderr:2:  bravo :: forall {w}. Num w => w
testsuite/tests/partial-sigs/should_compile/WarningWildcardInstantiations.stderr:3:  foo :: forall {a}. (Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_compile/WarningWildcardInstantiations.stderr:10:               the inferred type of foo :: (Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_compile/WarningWildcardInstantiations.stderr:15:    • Found extra-constraints wildcard standing for ‘Enum a’
testsuite/tests/partial-sigs/should_compile/WarningWildcardInstantiations.stderr:17:               the inferred type of foo :: (Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_compile/T14643.hs:5:af, ag :: (Num a,_) => a -> a
testsuite/tests/partial-sigs/should_compile/T14643a.stderr:4:    • In the type signature: af :: (Num a, _) => a -> a
testsuite/tests/partial-sigs/should_compile/T14643a.stderr:8:    • In the type signature: ag :: (Num a, _) => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraNumAMROn.stderr:2:  foo :: forall a. Num a => a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.hs:10:arbitCs3 :: (Show a, Enum a, _) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.hs:16:arbitCs5 :: (Eq a, Enum a, Show a, _) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.stderr:2:  arbitCs1 :: forall a. (Show a, Enum a, Eq a) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.stderr:3:  arbitCs2 :: forall a. (Show a, Enum a, Eq a) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.stderr:4:  arbitCs3 :: forall a. (Show a, Enum a, Eq a) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.stderr:5:  arbitCs4 :: forall a. (Eq a, Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_compile/ExtraConstraints1.stderr:6:  arbitCs5 :: forall a. (Eq a, Enum a, Show a) => a -> String
testsuite/tests/partial-sigs/should_compile/T14643.stderr:4:    • In the type signature: af :: (Num a, _) => a -> a
testsuite/tests/partial-sigs/should_compile/T14643.stderr:8:    • In the type signature: ag :: (Num a, _) => a -> a
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:165:fromEnum :: _ => _
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:166:fromEnum = P.fromEnum
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:341:signum :: _ => _
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:342:signum = P.signum
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:371:toEnum :: _ => _
testsuite/tests/partial-sigs/should_compile/ExtraConstraints3.hs:372:toEnum = P.toEnum
testsuite/tests/partial-sigs/should_compile/ExtraNumAMROff.stderr:2:  foo :: forall a. Num a => a
testsuite/tests/partial-sigs/should_compile/Defaulting2MROn.stderr:2:  bravo :: forall {w}. Num w => w
testsuite/tests/partial-sigs/should_fail/InstantiatedNamedWildcardsInConstraints.hs:4:foo :: (Enum _a, _) => _a -> (String, b)
testsuite/tests/partial-sigs/should_fail/T12039.hs:5:class Num _ => B a
testsuite/tests/partial-sigs/should_fail/T14479.hs:5:foo :: Num a => a -> a
testsuite/tests/partial-sigs/should_fail/T14479.hs:8:    g :: forall b. Num b => _ -> b
testsuite/tests/partial-sigs/should_fail/WildcardInInstanceSig.hs:4:instance Num Bool where
testsuite/tests/partial-sigs/should_fail/WildcardInstantiations.stderr:5:               the inferred type of foo :: (Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_fail/WildcardInstantiations.stderr:11:    • Found extra-constraints wildcard standing for ‘Enum a’
testsuite/tests/partial-sigs/should_fail/WildcardInstantiations.stderr:13:               the inferred type of foo :: (Show a, Enum a) => a -> String
testsuite/tests/partial-sigs/should_fail/InstantiatedNamedWildcardsInConstraints.stderr:5:               the inferred type of foo :: (Enum b, Show b) => b -> (String, b)
testsuite/tests/partial-sigs/should_fail/InstantiatedNamedWildcardsInConstraints.stderr:8:    • In the type signature: foo :: (Enum _a, _) => _a -> (String, b)
testsuite/tests/partial-sigs/should_fail/InstantiatedNamedWildcardsInConstraints.stderr:13:               the inferred type of foo :: (Enum b, Show b) => b -> (String, b)
testsuite/tests/partial-sigs/should_fail/InstantiatedNamedWildcardsInConstraints.stderr:16:    • In the type signature: foo :: (Enum _a, _) => _a -> (String, b)
testsuite/tests/partial-sigs/should_fail/T14479.stderr:4:        bound by the partial type signature: g :: forall b. Num b => _ -> b
testsuite/tests/partial-sigs/should_fail/T14479.stderr:9:                g :: forall b. Num b => _ -> b
testsuite/tests/polykinds/MonoidsFD.hs:36:instance Num a ⇒ Monoidy (→) (,) () (Sum a) where
testsuite/tests/polykinds/MonoidsFD.hs:39:instance Num a ⇒ Monoidy (→) (,) () (Product a) where
testsuite/tests/polykinds/T6002.hs:74:instance Enum (Hidden Nat') where
testsuite/tests/polykinds/T6002.hs:75:  toEnum = toEnum . fromIntegral
testsuite/tests/polykinds/T6002.hs:76:  fromEnum = fromIntegral
testsuite/tests/polykinds/T6002.hs:78:instance Num (Hidden Nat') where
testsuite/tests/polykinds/T6002.hs:80:  signum (Hide Z) = 0
testsuite/tests/polykinds/T6002.hs:81:  signum _ = 1
testsuite/tests/polykinds/T12718.hs:11:class XNum (a :: TYPE rep) where
testsuite/tests/polykinds/T12718.hs:15:instance P.Num a => XNum a where
testsuite/tests/polykinds/T12718.hs:19:instance XNum Int# where
testsuite/tests/polykinds/T12718.hs:27:    v_ :: forall rep (a :: TYPE rep). XNum a => a
testsuite/tests/polykinds/MonoidsTF.hs:39:instance Num a ⇒ Monoidy (→) (Sum a) where
testsuite/tests/polykinds/MonoidsTF.hs:45:instance Num a ⇒ Monoidy (→) (Product a) where
testsuite/tests/dependent/should_compile/dynamic-paper.hs:353:data TypeEnum = IntType | FloatType | BoolType | DateType | StringType
testsuite/tests/dependent/should_compile/dynamic-paper.hs:355:              Field TypeEnum |
testsuite/tests/rebindable/T19167.hs:11:fromInteger :: P.Integer -> forall a. P.Num a => a
testsuite/tests/rebindable/DoParamM.hs:93: vsm1 :: (Monadish (VST m), IdM.Monad m, Prelude.Enum si) =>
testsuite/tests/rebindable/DoParamM.hs:105:vsm2 () = vsget >>= (\v -> vsput ((toEnum (65+v))::Char) >>
testsuite/tests/rebindable/DoParamM.hs:117:             vsput ((toEnum (65+v))::Char)
testsuite/tests/rebindable/DoParamM.hs:135:vsm3 () = vsget >>= (\v -> vsput ((toEnum (65+v))::Char) >>
testsuite/tests/rebindable/DoParamM.hs:144:             vsput ((toEnum (65+v))::Char)
testsuite/tests/rebindable/DoParamM.hs:153:crec1 :: (Prelude.Enum si, Prelude.Monad m) => VST m si si Int
testsuite/tests/rebindable/DoParamM.hs:154:crec1 = vsget >>= (\s1 -> case fromEnum s1 of
testsuite/tests/rebindable/DoParamM.hs:163:crec1_do :: (Prelude.Enum si, Prelude.Monad m) => VST m si si Int
testsuite/tests/rebindable/DoParamM.hs:166:        case fromEnum s1 of
testsuite/tests/rebindable/rebindable7.hs:25:return :: Num a => a -> T a
testsuite/tests/profiling/should_compile/T2410.hs:7: instance  (RealFloat a) => Num (Complex a)  where
testsuite/tests/profiling/should_compile/T2410.hs:8:     {-# SPECIALISE instance Num (Complex Float) #-}
testsuite/tests/profiling/should_compile/T2410.hs:9:     {-# SPECIALISE instance Num (Complex Double) #-}
testsuite/tests/profiling/should_compile/T19894/Operations.hs:91:    :: forall m a b. (MonadIO m, Storable a, Enum a, Eq a)
testsuite/tests/profiling/should_compile/T19894/Operations.hs:115:    addToWord wd a = (wd `shiftL` elemBits) .|. fromIntegral (fromEnum a)
testsuite/tests/profiling/should_compile/T19894/Operations.hs:159:        r <- fstep fs (toEnum $ fromIntegral old)
testsuite/tests/profiling/should_compile/T19894/Operations.hs:207:                    r <- fstep fs (toEnum $ fromIntegral old)
testsuite/tests/profiling/should_compile/T19894/Operations.hs:219:    :: (IsStream t, MonadIO m, Storable a, Enum a, Eq a)
testsuite/tests/profiling/should_compile/T19894/Fold.hs:159:sum :: (Monad m, Num a) => Fold m a a
testsuite/tests/profiling/should_run/all.T:155:                  # Slow bignum implementations timeout
testsuite/tests/profiling/should_run/T12962.hs:11:foo :: Num a => a -> a -> a -> a
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:14:instance Num      X where
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:16:instance Enum     X where
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:31:invoke2 :: (forall a. (Show a, Num a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:35:invoke3 :: (forall a. (Show a, Num a, Eq a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:39:invoke4 :: (forall a. (Show a, Num a, Eq a, Enum a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:43:invoke5 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:47:invoke6 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a, Real a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded-calls002.hs:51:invoke7 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a, Real a, Integral a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:14:instance Num      X where
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:16:instance Enum     X where
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:31:invoke2 :: (forall a. (Show a, Num a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:35:invoke3 :: (forall a. (Show a, Num a, Eq a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:39:invoke4 :: (forall a. (Show a, Num a, Eq a, Enum a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:43:invoke5 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:47:invoke6 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a, Real a) => a -> a -> String) -> X -> String
testsuite/tests/profiling/should_run/scc-prof-overloaded002.hs:51:invoke7 :: (forall a. (Show a, Num a, Eq a, Enum a, Ord a, Real a, Integral a) => a -> a -> String) -> X -> String
testsuite/tests/array/should_run/arr010.hs:9:hist :: (Ix a, Num b) => (a,a) -> [a] -> Array a b
testsuite/tests/array/should_run/arr011.hs:9:hist :: (Ix a, Num b) => (a,a) -> [a] -> Array a b
testsuite/tests/gadt/ubx-records.hs:20:-- h :: Num a => T a any -> a
testsuite/tests/gadt/records.hs:17:-- h :: Num a => T a any -> a
testsuite/tests/gadt/Session.hs:17:class TyNum a where
testsuite/tests/gadt/Session.hs:18:instance TyNum Zero where
testsuite/tests/gadt/Session.hs:19:instance (TyNum p) => TyNum (Succ p) where
testsuite/tests/gadt/Session.hs:23:             Cons :: (TyNum p) => a -> List a p -> List a (Succ p)
testsuite/tests/gadt/nbe.hs:121:enumV (Arr s t) = mkEnum (questionsV s) (enumV t)
testsuite/tests/gadt/nbe.hs:123:   mkEnum [] t = tmap const t
testsuite/tests/gadt/nbe.hs:124:   mkEnum (q:qs) es = do
testsuite/tests/gadt/nbe.hs:125:                   f1 <- mkEnum qs es
testsuite/tests/gadt/nbe.hs:126:                   f2 <- mkEnum qs es
testsuite/tests/programs/lex/lex.stdin:11:fromInt :: Num a => Int -> a
testsuite/tests/programs/jl_defaults/Main.hs:23:ord = (fromEnum :: Char -> Int)
testsuite/tests/programs/jl_defaults/Main.hs:24:chr = (toEnum   :: Int  -> Char)
testsuite/tests/programs/andy_cherry/Main.hs:140:       printMoveNumber _     mvnum = userFormat mvnum ++ " "
testsuite/tests/programs/andy_cherry/PrintTEX.hs:92:       endText True = case getMoveColour last_mv_num of
testsuite/tests/programs/andy_cherry/DataTypes.hs:90: userFormatRank r = [toEnum (r + 48)]
testsuite/tests/programs/andy_cherry/DataTypes.hs:91: userFormatFile f = [toEnum (f + 96)]
testsuite/tests/programs/andy_cherry/DataTypes.hs:252:    = getOpenName ((fromEnum a - fromEnum 'A') * 100 
testsuite/tests/programs/andy_cherry/DataTypes.hs:253:               + (fromEnum b - fromEnum '0') * 10 
testsuite/tests/programs/andy_cherry/DataTypes.hs:254:               + (fromEnum c - fromEnum '0')) ++ " " ++ eco
testsuite/tests/programs/jtod_circint/Signal.hs:5:class (Eq a, Show{-was:Text-} a, Num a) => Signal a where
testsuite/tests/programs/jtod_circint/Signal.hs:138:instance (Static a) => Num (Stream a) where
testsuite/tests/programs/jtod_circint/Signal.hs:144:  signum = error "signum not defined for Signals"
testsuite/tests/programs/jtod_circint/Bit.hs:175:instance Num Bit where
testsuite/tests/programs/jtod_circint/Bit.hs:181:  signum = error "signum not defined for Signals"
testsuite/tests/programs/thurston-modular-arith/Main.hs:57:instance (TypeVal a s, Integral a) => Num (Mod s a) where
testsuite/tests/programs/barton-mangler-bug/TypesettingTricks.hs:12:realmul:: Num a => a -> a -> a
testsuite/tests/programs/barton-mangler-bug/TypesettingTricks.hs:15:dotmul:: Num a => a -> a -> a
testsuite/tests/programs/barton-mangler-bug/Plot.lhs:50:> createRange:: (Num a, Ord a) => a -> a -> a -> [a]
testsuite/tests/programs/barton-mangler-bug/Basic.hs:42:instance (Physical a, Physical b) => Num (SignalRep a b) where
testsuite/tests/programs/barton-mangler-bug/Basic.hs:47:  signum f = FunctionRep (unop abs (mapSignal f))
testsuite/tests/programs/cholewo-eval/Arr.lhs:62:instance Num b => Num (Vector b) where
testsuite/tests/programs/cholewo-eval/Arr.lhs:67:  signum = fmap signum
testsuite/tests/programs/cholewo-eval/Arr.lhs:90:scaleVector :: Num a => a -> Vector a -> Vector a
testsuite/tests/programs/cholewo-eval/Arr.lhs:93:sumVector :: Num a => Vector a -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:96:vectorNorm2 :: Num a => Vector a -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:133:instance Num b => Num (Matrix b) where
testsuite/tests/programs/cholewo-eval/Arr.lhs:138:  signum = fmap signum
testsuite/tests/programs/cholewo-eval/Arr.lhs:161:scaleMatrix :: Num a => a -> Matrix a -> Matrix a
testsuite/tests/programs/cholewo-eval/Arr.lhs:164:sumMatrix :: Num a => Matrix a -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:204:instance Num a => Num [a] where
testsuite/tests/programs/cholewo-eval/Arr.lhs:209:  signum = fmap signum
testsuite/tests/programs/cholewo-eval/Arr.lhs:215:sum1 :: (Num a) => [a] -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:260:instance (Ix a, Show a, Num b) => Num (Array a b) where
testsuite/tests/programs/cholewo-eval/Arr.lhs:265:  signum = fmap signum
testsuite/tests/programs/cholewo-eval/Arr.lhs:271:scaleArr :: (Ix i, Num a) => a -> Array i a -> Array i a
testsuite/tests/programs/cholewo-eval/Arr.lhs:274:sumArr :: (Ix i, Num a) => Array i a -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:284:matMult         :: (Ix a, Ix b, Ix c, Num d) =>
testsuite/tests/programs/cholewo-eval/Arr.lhs:301:inner :: Num a => Vector a -> Vector a -> a
testsuite/tests/programs/cholewo-eval/Arr.lhs:311:outerVector :: Num b => Vector b -> Vector b -> Matrix b
testsuite/tests/programs/cholewo-eval/Arr.lhs:319:outerArr :: (Ix a, Num b) => Array a b -> Array a b -> Array (a,a) b
testsuite/tests/programs/cholewo-eval/Arr.lhs:329:matvec :: (Ix a, Num b) => Array (a,a) b -> Array a b -> Array a b
testsuite/tests/programs/cholewo-eval/Arr.lhs:340:augment :: (Num a) => Vector a -> a -> Vector a
testsuite/tests/programs/launchbury/Main.hs:11:k=co.map(map(toEnum       .fromIntegral    ).w.p(d,n).   read).lines
testsuite/tests/programs/galois_raytrace/Parse.hs:46:     ; ls <- many (satisfy (\x -> isAlphaNum x || x == '-' || x == '_'))
testsuite/tests/programs/fast2haskell/Main.hs:41:        if (((==) :: (Int -> Int -> Bool)) (fromEnum a_ok) (fromEnum a_try))
testsuite/tests/programs/fast2haskell/Main.hs:132:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum '0') (fromEnum a_x))
testsuite/tests/programs/fast2haskell/Main.hs:133:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_x) (fromEnum '9'))
testsuite/tests/programs/fast2haskell/Main.hs:181:            if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'a') (fromEnum a_c))
testsuite/tests/programs/fast2haskell/Main.hs:182:            then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'z'))
testsuite/tests/programs/fast2haskell/Main.hs:187:        if (((<=) :: (Int -> Int -> Bool)) (fromEnum 'A') (fromEnum a_c))
testsuite/tests/programs/fast2haskell/Main.hs:188:        then (((<=) :: (Int -> Int -> Bool)) (fromEnum a_c) (fromEnum 'Z'))
testsuite/tests/programs/fast2haskell/Main.hs:205:            if (((==) :: (Int -> Int -> Bool)) (fromEnum a_a) (fromEnum '\o012'))
testsuite/tests/programs/jules_xref2/Main.hs:31:                   then (toEnum (fromEnum x + (32::Int)):ys, zs)
testsuite/tests/programs/jules_xref2/jules_xref2.stdin:24:        mapAnnExpr' (ANum n) = ANum n
testsuite/tests/programs/jules_xref2/jules_xref2.stdin:61:        t2e' (ANum n) = []
testsuite/tests/programs/jules_xref2/jules_xref2.stdin:514:tc tds gamma ns (ENum n) 
testsuite/tests/programs/jules_xref2/jules_xref2.stdin:515:   = Ok (tcId_subst, TCons "int" [], (TCons "int" [], ANum n))
testsuite/tests/programs/fun_insts/Main.hs:11:instance (Num a, Num b) => Num (a->b) where
testsuite/tests/programs/jules_xref/Main.hs:102:        let (word, rest) = span isAlphaNum cs
testsuite/tests/programs/jules_xref/jules_xref.stdin:24:        mapAnnExpr' (ANum n) = ANum n
testsuite/tests/programs/jules_xref/jules_xref.stdin:61:        t2e' (ANum n) = []
testsuite/tests/programs/jules_xref/jules_xref.stdin:514:tc tds gamma ns (ENum n) 
testsuite/tests/programs/jules_xref/jules_xref.stdin:515:   = Ok (tcId_subst, TCons "int" [], (TCons "int" [], ANum n))
testsuite/tests/numeric/should_run/arith011.hs:34:  testEnum     zero
testsuite/tests/numeric/should_run/arith011.hs:38:  testNum      zero
testsuite/tests/numeric/should_run/arith011.hs:49:  testEnum     zero
testsuite/tests/numeric/should_run/arith011.hs:53:  testNum      zero
testsuite/tests/numeric/should_run/arith011.hs:63:  testEnum     zero
testsuite/tests/numeric/should_run/arith011.hs:67:  testNum      zero
testsuite/tests/numeric/should_run/arith011.hs:80:testEnum zero = do
testsuite/tests/numeric/should_run/arith011.hs:83:  print $ take 10 [zero, toEnum 2 .. ] -- enumFromThen
testsuite/tests/numeric/should_run/arith011.hs:84:  print [zero .. toEnum 20]            -- enumFromTo
testsuite/tests/numeric/should_run/arith011.hs:85:  print [zero, toEnum 2 .. toEnum 20]  -- enumFromThenTo
testsuite/tests/numeric/should_run/arith011.hs:104:samples :: (Bits a, Num a) => a -> [a]
testsuite/tests/numeric/should_run/arith011.hs:153:testNum zero = do
testsuite/tests/numeric/should_run/T19931.hs:12:instance Num T where
testsuite/tests/numeric/should_run/foundation.hs:230:testAdditive :: forall a . (Show a, Eq a, Num a, Arbitrary a, Typeable a)
testsuite/tests/numeric/should_run/foundation.hs:247:testDividible :: forall a . (Show a, Eq a, Integral a, Num a, Arbitrary a, Typeable a)
testsuite/tests/numeric/should_run/foundation.hs:255:testOperatorPrecedence :: forall a . (Show a, Eq a, Prelude.Num a, Integral a, Num a,  Arbitrary a, Typeable a)
testsuite/tests/numeric/should_run/foundation.hs:269:testNumber :: (Show a, Eq a, Prelude.Num a, Integral a, Num a, Arbitrary a, Typeable a)
testsuite/tests/numeric/should_run/T22671.hs:8:              (error "Incorrect result for bignum calculation")
testsuite/tests/numeric/should_run/T8726.hs:67:    divMod' x y = if signum r == negate (signum y) then (q-1, r+y) else qr
testsuite/tests/numeric/should_run/T20291.hs:11:ok n | fromEnum n == i = putStrLn "OK"
testsuite/tests/numeric/should_run/T20291.hs:15:    errmsg = ("fromEnum " ++) . shows n . (" == " ++) . shows i $ ": BAD"
testsuite/tests/numeric/should_run/T20291.hs:19:  r <- try @ErrorCall . evaluate $ fromEnum n
testsuite/tests/numeric/should_run/T20291.hs:25:        ("fromEnum " ++) . shows n $ ": Exception not thrown when expected."
testsuite/tests/typecheck/no_skolem_info/T20969.stderr:14:                 glumber :: forall a. Num a => a -> Seq a
testsuite/tests/typecheck/no_skolem_info/T20969.hs:9:glumber :: forall a. Num a => a -> Seq a
testsuite/tests/typecheck/should_compile/T18529.hs:11:-- foo :: (C a b0, Num b0) => a -> ()
testsuite/tests/typecheck/should_compile/abstract_refinement_hole_fits.stderr:15:        product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/typecheck/should_compile/abstract_refinement_hole_fits.stderr:16:        sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:83:        fromInteger :: forall a. Num a => Integer -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:84:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:86:        negate :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:87:        fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/typecheck/should_compile/holes3.stderr:126:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:128:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:165:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:166:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:167:        abs :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/holes3.stderr:168:        signum :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/tc137.hs:28:g :: Num a => [X a] -> [X a]
testsuite/tests/typecheck/should_compile/T9151.hs:9:type PEnum :: KProxy a -> Constraint
testsuite/tests/typecheck/should_compile/T9151.hs:10:class PEnum @a kproxy where
testsuite/tests/typecheck/should_compile/T9151.hs:11:  type ToEnum (x :: a) :: Bool
testsuite/tests/typecheck/should_compile/T9151.hs:12:  type ToEnum x = TEHelper
testsuite/tests/typecheck/should_compile/T9151.hs:14:type TEHelper = ToEnum Int
testsuite/tests/typecheck/should_compile/T7173.hs:8:-- so sb :: Num a => ...type not involving a...
testsuite/tests/typecheck/should_compile/T5490.hs:127:  show n = show (peanoNum n ∷ Int)
testsuite/tests/typecheck/should_compile/T5490.hs:129:peanoNum ∷ Num n ⇒ Peano p → n
testsuite/tests/typecheck/should_compile/T5490.hs:130:peanoNum PZero     = 0
testsuite/tests/typecheck/should_compile/T5490.hs:131:peanoNum (PSucc p) = 1 + peanoNum p
testsuite/tests/typecheck/should_compile/valid_hole_fits.stderr:143:        enumFrom :: forall a. Enum a => a -> [a]
testsuite/tests/typecheck/should_compile/valid_hole_fits.stderr:162:        fromEnum :: forall a. Enum a => a -> Int
testsuite/tests/typecheck/should_compile/valid_hole_fits.stderr:163:          with fromEnum @Bool
testsuite/tests/typecheck/should_compile/valid_hole_fits.stderr:166:        pred :: forall a. Enum a => a -> a
testsuite/tests/typecheck/should_compile/valid_hole_fits.stderr:170:        succ :: forall a. Enum a => a -> a
testsuite/tests/typecheck/should_compile/refinement_hole_fits.stderr:26:        product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/typecheck/should_compile/refinement_hole_fits.stderr:30:        sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:80:        fromInteger :: forall a. Num a => Integer -> a
testsuite/tests/typecheck/should_compile/holes.stderr:81:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:83:        negate :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:84:        fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/typecheck/should_compile/holes.stderr:123:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:125:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/holes.stderr:162:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:163:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:164:        abs :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/holes.stderr:165:        signum :: forall a. Num a => a -> a
testsuite/tests/typecheck/should_compile/tc077.hs:5:data NUM = ONE | TWO
testsuite/tests/typecheck/should_compile/tc077.hs:6:class (Num a) => ORD a
testsuite/tests/typecheck/should_compile/tc157.hs:12:bar :: Num u => u
testsuite/tests/typecheck/should_compile/tc157.hs:14:-- The (Num u) should not get trapped inside the
testsuite/tests/typecheck/should_compile/tc157.hs:16:-- the arg to foo.  But it might because it's Num (C u a)!
testsuite/tests/typecheck/should_compile/T2846.hs:4:x = [1,2,3] :: [Num a => a]
testsuite/tests/typecheck/should_compile/DfltProb1.hs:10:-- WORKS with signature test :: Num a => [a]
testsuite/tests/typecheck/should_compile/T13050.stderr:14:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:26:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:30:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:42:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:46:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:99:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:111:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:115:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:127:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:131:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:185:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:197:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:201:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:213:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T13050.stderr:217:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T10390.hs:6:  apPair :: (forall a . (ApPair a, Num a) => Maybe a) -> Maybe r
testsuite/tests/typecheck/should_compile/T10390.hs:12:        => (forall a . (Num a, ApPair a) => Maybe a) -> Maybe (b,c)
testsuite/tests/typecheck/should_compile/tc236.hs:7:f :: forall a. (Num a) => forall b. (Ord b) => a -> b -> b -> a
testsuite/tests/typecheck/should_compile/tc236.hs:10:g :: (Num a) => (Ord b) => a -> b -> b -> a
testsuite/tests/typecheck/should_compile/tc087.hs:29:out                             :: (Eq a, Num a) => [a] -> IO ()
testsuite/tests/typecheck/should_compile/tc084.hs:13:g :: Num a => Bool -> a -> b -> a
testsuite/tests/typecheck/should_compile/tc084.hs:18:-- f :: Num a => a -> b -> a
testsuite/tests/typecheck/should_compile/tc217.hs:19:instance (Num a, Monad m, Eq (m a), Show (m a)) => Num (m a) where
testsuite/tests/typecheck/should_compile/TcLambdaCase.hs:10:f2 :: Num a => a -> a
testsuite/tests/typecheck/should_compile/DfltProb2.hs:12:            [untch=beta] forall a. 0 => Num beta
testsuite/tests/typecheck/should_compile/T11397.hs:37:   (Num t, Ord t) =>
testsuite/tests/typecheck/should_compile/tc088.hs:13:        -- Since Eval is a superclass of Num this fails
testsuite/tests/typecheck/should_compile/tc088.hs:15:instance (Num b) => Num (a -> b) where
testsuite/tests/typecheck/should_compile/tc088.hs:21:    signum f                  =  \a -> signum (f a)
testsuite/tests/typecheck/should_compile/T18529.stderr:2:  foo :: forall {a} {b}. (C a b, Num b) => a -> ()
testsuite/tests/typecheck/should_compile/T18529.stderr:42:   Exported types: foo :: forall {a} {b}. (C a b, Num b) => a -> ()
testsuite/tests/typecheck/should_compile/T18529.stderr:46:                      [W] $dNum = $dNum}]}
testsuite/tests/typecheck/should_compile/T17594f.hs:26:doubleOrInt ::  Bool -> forall r. (forall a. (Num a, Show a) => a -> r) -> r
testsuite/tests/typecheck/should_compile/T17594f.hs:27:doubleOrInt True  f = wrap [Num, Show] @Double 4.15 \ @a -> f -- hack to convert (Num a, (Show a, ())) into (Num a, Show a)
testsuite/tests/typecheck/should_compile/T10195.hs:22:getDict :: a -> Dict (Num a)
testsuite/tests/typecheck/should_compile/T14590.stderr:16:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:28:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:32:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:44:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:48:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:104:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:116:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:120:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:132:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:136:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:190:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:202:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:206:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:218:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:222:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:277:        (-) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:289:        subtract :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:293:        (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:305:        (*) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T14590.stderr:309:        (+) :: forall a. Num a => a -> a -> a
testsuite/tests/typecheck/should_compile/T12987.hs:7:class NUM (a :: TYPE rep) where add :: a -> a -> a
testsuite/tests/typecheck/should_compile/T22985b.hs:5:addExpr :: Num a => Phase a -> a
testsuite/tests/typecheck/should_compile/Vta1.hs:57:pairnum :: forall a. Num a => forall b. b -> (a, b)
testsuite/tests/typecheck/should_compile/Vta1.hs:58:pairnum = pair 3
testsuite/tests/typecheck/should_compile/Vta1.hs:60:e = (pair 3 :: forall a. Num a => forall b. b -> (a, b)) @Int @Bool True
testsuite/tests/typecheck/should_compile/Vta1.hs:61:h = pairnum @Int @Bool True
testsuite/tests/typecheck/should_compile/tc114.hs:15:bad:: Num e => Maybe e
testsuite/tests/typecheck/should_compile/tc142.hs:6:data NUM = ONE | TWO
testsuite/tests/typecheck/should_compile/tc142.hs:10:instance EQ NUM where
testsuite/tests/typecheck/should_run/T17594e.hs:5:higherRank :: (forall a. (Num a, Bounded a) => a -> a) -> (Int8, Int16)
testsuite/tests/typecheck/should_run/T5759.hs:14:instance (Container a b, Show a, Eq a, Num b) => Num a where
testsuite/tests/typecheck/should_run/church.hs:17:instance Num Ch where
testsuite/tests/typecheck/should_run/tcrun043.hs:20:type instance Indexed F b = Num b
testsuite/tests/typecheck/should_run/tcrun043.hs:27:type TwoConstraints a = (Show a, Num a)
testsuite/tests/typecheck/should_run/IPRun.hs:14:   -- Inferred type: Num a => () -> () -> a
testsuite/tests/typecheck/should_run/tcrun039.hs:8:  MkT :: Num a => a -> T a
testsuite/tests/typecheck/should_run/tcrun039.hs:15:  MkG :: Num a => a -> GADT [a]
testsuite/tests/typecheck/should_run/StrictPats.hs:26:  where x :: Num a => a
testsuite/tests/typecheck/should_fail/tcfail196.stderr:4:    • In the type signature: bar :: Num (forall a. a) => Int -> Int
testsuite/tests/typecheck/should_fail/tcfail018.stderr:3:    • No instance for ‘Num [a0]’ arising from the literal ‘1’
testsuite/tests/typecheck/should_fail/VtaFail.hs:9:addOne :: Num a => a -> a
testsuite/tests/typecheck/should_fail/T12083a.stderr:3:    • Illegal qualified type: Num a => a
testsuite/tests/typecheck/should_fail/tcfail117.hs:6:newtype N1 = N1 Int deriving ( Enum )
testsuite/tests/typecheck/should_fail/tcfail117.hs:7:data    N2 = N2 Int deriving ( Enum )
testsuite/tests/typecheck/should_fail/T5689.stderr:3:    • No instance for ‘Num Bool’ arising from the literal ‘1234’
testsuite/tests/typecheck/should_fail/tcfail036.stderr:4:      instance Num NUM -- Defined at tcfail036.hs:8:10
testsuite/tests/typecheck/should_fail/tcfail036.stderr:5:      instance Num NUM -- Defined at tcfail036.hs:10:10
testsuite/tests/typecheck/should_fail/tcfail127.hs:3:foo :: IO (Num a => a -> a)
testsuite/tests/typecheck/should_fail/tcfail127.hs:6:-- baz :: (Num a => a -> a) -> Int
testsuite/tests/typecheck/should_fail/tcfail117.stderr:3:    • Can't make a derived instance of ‘Enum N1’:
testsuite/tests/typecheck/should_fail/tcfail117.stderr:12:    • Can't make a derived instance of ‘Enum N2’:
testsuite/tests/typecheck/should_fail/T6001.hs:7:instance Num DayKind where
testsuite/tests/typecheck/should_fail/tcfail067.stderr:42:      from the context: Num a
testsuite/tests/typecheck/should_fail/tcfail067.stderr:48:      In the instance declaration for ‘Num (SubRange a)’
testsuite/tests/typecheck/should_fail/tcfail067.stderr:52:      from the context: Num a
testsuite/tests/typecheck/should_fail/tcfail067.stderr:61:      In the instance declaration for ‘Num (SubRange a)’
testsuite/tests/typecheck/should_fail/tcfail067.stderr:65:      from the context: Num a
testsuite/tests/typecheck/should_fail/tcfail067.stderr:68:                                       Num a =>
testsuite/tests/typecheck/should_fail/tcfail067.stderr:75:                                Num a =>
testsuite/tests/typecheck/should_fail/T17284.stderr:4:      [partial signature] f :: Num a => a -> _
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:3:    • No instance for ‘Num String’ arising from the literal ‘1’
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:10:    • No instance for ‘Num String’ arising from the literal ‘2’
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:17:    • No instance for ‘Num String’ arising from the literal ‘3’
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:24:    • No instance for ‘Num String’ arising from the literal ‘1’
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:33:    • No instance for ‘Num String’ arising from the literal ‘2’
testsuite/tests/typecheck/should_fail/DoExpansion1.stderr:42:    • No instance for ‘Num String’ arising from the literal ‘3’
testsuite/tests/typecheck/should_fail/tcfail067.hs:60:instance Num a => Num (SubRange a) where
testsuite/tests/typecheck/should_fail/tcfail067.hs:67:numSubRangeNegate :: (Ord a, Show a, Num a) => SubRange a -> SubRange a
testsuite/tests/typecheck/should_fail/tcfail067.hs:71:numSubRangeBinOp :: Num a => (a -> a -> a) -> 
testsuite/tests/typecheck/should_fail/tcfail067.hs:79:numSubRangeAdd, numSubRangeSubtract, numSubRangeMultiply :: Num a => SubRange a -> SubRange a -> SubRange a
testsuite/tests/typecheck/should_fail/tcfail038.hs:5:data NUM = ONE | TWO
testsuite/tests/typecheck/should_fail/tcfail038.hs:6:instance Eq NUM where
testsuite/tests/typecheck/should_fail/T23308.stderr:35:      B5 :: forall a. Num a => B5 (a, a)
testsuite/tests/typecheck/should_fail/T23308.stderr:41:      B5 :: forall a. Num a => B5 (a, a)
testsuite/tests/typecheck/should_fail/T23308.stderr:48:      B5 :: forall a. Num a => B5 (a, a)
testsuite/tests/typecheck/should_fail/tcfail209a.stderr:3:    • Illegal tuple constraint: (Show a, Num a)
testsuite/tests/typecheck/should_fail/tcfail209a.stderr:4:    • In the type signature: g :: ((Show a, Num a), Eq a) => a -> a
testsuite/tests/typecheck/should_fail/T17563.hs:8:blah :: (forall x. Num (T a x)) => T a b
testsuite/tests/typecheck/should_fail/tcfail042.hs:10:instance Num a => Foo [a] where
testsuite/tests/typecheck/should_fail/tcfail042.hs:27:instance Num a => Bar2 [a]
testsuite/tests/typecheck/should_fail/tcfail034.stderr:4:      from the context: (Num a, Eq a)
testsuite/tests/typecheck/should_fail/tcfail034.stderr:6:                   test :: forall a. (Num a, Eq a) => a -> Bool
testsuite/tests/typecheck/should_fail/tcfail034.stderr:11:            test :: forall a. (Num a, Eq a) => a -> Bool
testsuite/tests/typecheck/should_fail/tcfail007.stderr:3:    • No instance for ‘Num Bool’ arising from a use of ‘+’
testsuite/tests/typecheck/should_fail/tcfail037.hs:5:data NUM = ONE | TWO
testsuite/tests/typecheck/should_fail/tcfail037.hs:8:f :: NUM -> NUM -> NUM
testsuite/tests/typecheck/should_fail/T23427.stderr:22:    from the context: Num a
testsuite/tests/typecheck/should_fail/T23427.stderr:24:                 forall a. Num a => a
testsuite/tests/typecheck/should_fail/tcfail044.stderr:11:    • Illegal instance declaration for ‘Num (a -> a)’:
testsuite/tests/typecheck/should_fail/tcfail044.stderr:15:    • In the instance declaration for ‘Num (a -> a)’
testsuite/tests/typecheck/should_fail/tcfail196.hs:5:bar :: Num (forall a. a) => Int -> Int
testsuite/tests/typecheck/should_fail/T7778.hs:3:v :: ((Num Int => Num) ()) => ()
testsuite/tests/typecheck/should_fail/tcfail036.hs:7:data NUM = ONE | TWO
testsuite/tests/typecheck/should_fail/tcfail036.hs:8:instance Num NUM
testsuite/tests/typecheck/should_fail/tcfail036.hs:10:instance Num NUM
testsuite/tests/typecheck/should_fail/tcfail133.hs:23:class PrettyNum a where
testsuite/tests/typecheck/should_fail/tcfail133.hs:24:    prettyNum   :: a -> String
testsuite/tests/typecheck/should_fail/tcfail133.hs:26:instance PrettyNum Zero where
testsuite/tests/typecheck/should_fail/tcfail133.hs:27:    prettyNum _ = "0"
testsuite/tests/typecheck/should_fail/tcfail133.hs:29:instance PrettyNum One where
testsuite/tests/typecheck/should_fail/tcfail133.hs:30:    prettyNum _ = "1"
testsuite/tests/typecheck/should_fail/tcfail133.hs:32:instance (Number a, Digit b, PrettyNum a, PrettyNum b)
testsuite/tests/typecheck/should_fail/tcfail133.hs:33:      => PrettyNum (a :@ b) where
testsuite/tests/typecheck/should_fail/tcfail133.hs:34:    prettyNum ~(a:@b)
testsuite/tests/typecheck/should_fail/tcfail133.hs:35:                = prettyNum a ++ prettyNum b
testsuite/tests/typecheck/should_fail/tcfail034.hs:16:test::(Num a, Eq a) => a -> Bool
testsuite/tests/typecheck/should_fail/tcfail034.hs:26:   "<built-in>", line : dict.87 :: <Num a>
testsuite/tests/typecheck/should_fail/tcfail034.hs:29:   "<built-in>", line : dict.87 :: <Num a>
testsuite/tests/typecheck/should_fail/tcfail034.hs:32:   "<built-in>", line : dict.87 :: <Num a>
testsuite/tests/typecheck/should_fail/T23308.hs:38:newtype B5 a where { B5 :: Num a => B5 (a, a) }
testsuite/tests/typecheck/should_fail/T21130.hs:7:f :: Enum (Item l) => l
testsuite/tests/typecheck/should_fail/T12083a.hs:6:type Constrd a = Num a ⇒ a
testsuite/tests/typecheck/should_fail/tcfail042.stderr:3:    • Could not deduce ‘Num a’
testsuite/tests/typecheck/should_fail/tcfail042.stderr:8:        add (Num a) to the context of the instance declaration
testsuite/tests/typecheck/should_fail/tcfail042.stderr:12:    • Could not deduce ‘Num a’ arising from a use of ‘foo’
testsuite/tests/typecheck/should_fail/tcfail042.stderr:16:        add (Num a) to the context of the instance declaration
testsuite/tests/typecheck/should_fail/tcfail178.hs:5:a :: Num a => (Bool -> [a]) -> [a]
testsuite/tests/typecheck/should_fail/tcfail209a.hs:4:g :: ((Show a, Num a), Eq a) => a -> a
testsuite/tests/typecheck/should_fail/T2846b.stderr:4:                  with actual type ‘[Num a0 => a0]’
testsuite/tests/typecheck/should_fail/T2846b.stderr:6:      with a type involving polytypes: [Num a0 => a0]
testsuite/tests/typecheck/should_fail/T2846b.stderr:8:        ‘([1, 2, 3] :: [Num a => a])’
testsuite/tests/typecheck/should_fail/T2846b.stderr:9:      In the expression: show ([1, 2, 3] :: [Num a => a])
testsuite/tests/typecheck/should_fail/T2846b.stderr:10:      In an equation for ‘f’: f = show ([1, 2, 3] :: [Num a => a])
testsuite/tests/typecheck/should_fail/T17563.stderr:3:    • Non type-variable argument in the constraint: Num (T a x)
testsuite/tests/typecheck/should_fail/T17563.stderr:4:    • In the quantified constraint ‘forall x. Num (T a x)’
testsuite/tests/typecheck/should_fail/T17563.stderr:5:      In the type signature: blah :: (forall x. Num (T a x)) => T a b
testsuite/tests/typecheck/should_fail/tcfail131.stderr:6:          g :: forall b. Num b => b -> b
testsuite/tests/typecheck/should_fail/tcfail006.stderr:3:    • No instance for ‘Num Bool’ arising from the literal ‘1’
testsuite/tests/typecheck/should_fail/tcfail035.hs:5:data NUM = ONE | TWO
testsuite/tests/typecheck/should_fail/tcfail035.hs:6:instance Num NUM
testsuite/tests/typecheck/should_fail/tcfail035.hs:7:instance Num NUM
testsuite/tests/typecheck/should_fail/tcfail008.stderr:4:      prevents the constraint ‘(Num a0)’ from being solved.
testsuite/tests/typecheck/should_fail/tcfail008.stderr:8:        instance Num Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/typecheck/should_fail/tcfail008.stderr:9:        instance Num Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/typecheck/should_fail/tcfail008.stderr:18:    • No instance for ‘Num [a0]’ arising from the literal ‘2’
testsuite/tests/typecheck/should_fail/T18851.hs:26:  .  ( Show c, Num int
testsuite/tests/typecheck/should_fail/T2846b.hs:5:f = show ([1,2,3] :: [Num a => a])
testsuite/tests/typecheck/should_fail/T2846b.hs:8:-- And the actual arg has type (forall a. [Num a => a]), which is polymorphic
testsuite/tests/typecheck/should_fail/tcfail127.stderr:3:    • Illegal qualified type: Num a => a -> a
testsuite/tests/typecheck/should_fail/tcfail127.stderr:4:    • In the type signature: foo :: IO (Num a => a -> a)
testsuite/tests/typecheck/should_fail/tcfail224.stderr:3:    • No instance for ‘Num Int’ arising from the literal ‘3’
testsuite/tests/typecheck/should_fail/tcfail224.stderr:5:        instance Num GHC.Types.Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/typecheck/should_fail/tcfail063.stderr:5:    • In the type signature: moby :: Num => Int -> a -> Int
testsuite/tests/typecheck/should_fail/tcfail131.hs:6:  g :: Num b => b -> b
testsuite/tests/typecheck/should_fail/T23427.hs:14:x :: Num a => a
testsuite/tests/typecheck/should_fail/tcfail063.hs:6:moby :: Num => Int -> a -> Int
testsuite/tests/typecheck/should_fail/T21130.stderr:24:      prevents the constraint ‘(Enum (Item t0))’ from being solved.
testsuite/tests/typecheck/should_fail/T21130.stderr:27:        instance Enum Ordering -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/typecheck/should_fail/T21130.stderr:28:        instance Enum Integer -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/typecheck/should_fail/CustomTypeErrors02.hs:14:convert :: Num (IntRep a) => a -> IntRep a
testsuite/tests/typecheck/should_fail/tcfail015.stderr:3:    • No instance for ‘Num Bool’ arising from the literal ‘2’
testsuite/tests/typecheck/should_fail/tcfail044.hs:9:instance (Num a) => Num (a->a) where
testsuite/tests/typecheck/should_fail/MissingDefaultMethodBinding.hs:7:  default meth :: Num a => a
testsuite/tests/typecheck/should_fail/IPFail.stderr:3:    • Could not deduce ‘Num Bool’ arising from the literal ‘5’
testsuite/tests/typecheck/should_fail/tcfail035.stderr:4:      instance Num NUM -- Defined at tcfail035.hs:6:10
testsuite/tests/typecheck/should_fail/tcfail035.stderr:5:      instance Num NUM -- Defined at tcfail035.hs:7:10
testsuite/tests/typecheck/should_fail/T7778.stderr:4:        but ‘Num Int => Num’ has kind ‘*’
testsuite/tests/typecheck/should_fail/T7778.stderr:5:    • In the type signature: v :: ((Num Int => Num) ()) => ()
testsuite/tests/typecheck/should_fail/T7778.stderr:10:    • In the type signature: v :: ((Num Int => Num) ()) => ()
testsuite/tests/typecheck/should_fail/tcfail003.stderr:3:    • No instance for ‘Num Char’ arising from the literal ‘1’
testsuite/tests/typecheck/should_fail/tcfail040.hs:5:data NUM = ONE | TWO
testsuite/tests/typecheck/should_fail/tcfail040.hs:20:--f :: (EQ a,Num a) => a -> a -> Bool
testsuite/tests/typecheck/should_fail/tcfail040.hs:24:instance EQ NUM where
testsuite/tests/typecheck/should_fail/T17284.hs:6:f :: Num a => a -> _
testsuite/tests/typecheck/should_fail/T6001.stderr:10:      In the instance declaration for ‘Num DayKind’
testsuite/tests/typecheck/should_fail/tcfail010.stderr:3:    • No instance for ‘Num [a0]’ arising from a use of ‘+’
testsuite/tests/wasm/should_run/control-flow/ControlTestMonad.hs:20:  evalEnum      :: expr -> (Integer,Integer) -> m Integer
testsuite/tests/wasm/should_run/control-flow/BitConsumer.hs:84:  evalEnum lbl range =
testsuite/tests/wasm/should_run/control-flow/RunCmm.hs:42:                      i <- evalEnum @stmt @exp (exp label e) $
testsuite/tests/wasm/should_run/control-flow/RunWasm.hs:58:               evalEnum @s @e e (bti_lo range, bti_lo range + bti_count range)
testsuite/tests/safeHaskell/ghci/p14.stderr:3:    • No instance for ‘Num a’ arising from a use of ‘f’
testsuite/tests/safeHaskell/ghci/p14.stderr:4:      Possible fix: add (Num a) to the context of the RULE "id/Int"
testsuite/tests/printer/Test20243.hs:35:(^^^^)          :: (Num a, Integral b) => a -> b -> a
testsuite/tests/printer/PprArrows.hs:40:total :: Num a => Circuit a a
testsuite/tests/printer/Test10309.hs:5:  C3 :: (Num a) => { field :: a -- ^ hello docs
testsuite/tests/printer/Ppr026.hs:6:n :: Num a => a
testsuite/tests/printer/Ppr024.hs:36:instance (Num a, Num b) => Num (a,b)
testsuite/tests/printer/Ppr024.hs:38:   {-# Specialise instance Num (Int,Int) #-}
testsuite/tests/printer/Ppr002a.hs:39:total :: Num a => Circuit a a
testsuite/tests/printer/Ppr053.hs:8:pattern LL :: Num a => a -> a
testsuite/tests/printer/Test11430.hs:14:x :: (Num a, Integral b) => a -> b -> a
testsuite/tests/printer/Test11430.hs:22:y :: (Num a, Integral b) => a -> b -> a
testsuite/tests/printer/PprDynamic.hs:336:data TypeEnum = IntType | FloatType | BoolType | DateType | StringType
testsuite/tests/printer/PprDynamic.hs:338:              Field TypeEnum |
testsuite/tests/printer/PprTypeBrackets.hs:33:  data (((INum (S n)))) = S_I CVar
testsuite/tests/printer/Test23885.hs:21:instance Num a ⇒ Monoidy (→) (,) () (Sum a) where
testsuite/tests/printer/Ppr032.hs:6:f :: Num a => a -> a
testsuite/tests/printer/Ppr031.hs:20:  | otherwise = ite (pos + (toEnum $ minLen ?pat) .> strLen) __FAIL__ $ case ?pat of
testsuite/tests/printer/Ppr002.hs:40:total :: Num a => Circuit a a
testsuite/tests/ghci.debugger/HappyTest.hs:230:	| isDigit c = lexNum (c:cs)
testsuite/tests/ghci.debugger/HappyTest.hs:239:lexNum cs = TokenInt (read num) : lexer rest
testsuite/tests/ghci.debugger/scripts/TupleN.hs:10:                      | num <- [0..(n - 1)]]
testsuite/tests/ghci.debugger/scripts/print027.stdout:1:+ = (_t1::Num a => a -> a -> a)
testsuite/tests/ghci.debugger/GADT.hs:16:        DictN :: Num x => x -> Dict x
testsuite/tests/vdq-rta/should_compile/T23739_th_dump1.hs:6:$([d| f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T22326_th_dump1.hs:7:$([d| f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T22326_th_pprint1.stderr:2:       forall a_1 -> GHC.Internal.Num.Num a_1 => a_1
testsuite/tests/vdq-rta/should_compile/T23739_th_pprint1.stderr:2:       forall a_1 -> GHC.Internal.Num.Num a_1 => a_1
testsuite/tests/vdq-rta/should_compile/T23739_th_dump1.stderr:2:    [d| f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T23739_th_dump1.stderr:5:    f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T22326_th_dump1.stderr:2:    [d| f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T22326_th_dump1.stderr:5:    f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T22326_th_pprint1.hs:13:         f :: Integer -> forall a -> Num a => a
testsuite/tests/vdq-rta/should_compile/T23739_th_pprint1.hs:12:         f :: Integer -> forall a -> Num a => a
testsuite/tests/primops/should_run/T4442.hs:95:testIntArray :: (Eq a, Show a, Integral a, Num a)
testsuite/tests/primops/should_run/UnalignedAddrPrimOps.hs:96:testIntArray :: (Eq a, Show a, Integral a, Num a)
testsuite/tests/primops/should_run/FMA_Primops.hs:61:zero, one, two, three, five, seven :: Num a => a
testsuite/tests/parser/should_compile/read014.stderr:4:      ng1 :: Num a => p -> a -> a
testsuite/tests/parser/should_compile/read014.stderr:12:    • In the instance declaration for ‘Num (a, b)’
testsuite/tests/parser/should_compile/T515.stderr:7:        Num a0 arising from the literal ‘1’
testsuite/tests/parser/should_compile/T515.stderr:16:        Num a0 arising from the literal ‘2’
testsuite/tests/parser/should_compile/T2245.stderr:7:    • In the instance declaration for ‘Num T’
testsuite/tests/parser/should_compile/T2245.hs:4:instance Num T
testsuite/tests/parser/should_compile/OpaqueParseWarn1.hs:3:f :: Num a => a -> a
testsuite/tests/parser/should_compile/read014.hs:6:instance (Num a, Num b) => Num (a,b)
testsuite/tests/parser/should_run/LexNegLit.hs:7:  | FreeNum `Subtract` FreeNum
testsuite/tests/parser/should_run/LexNegLit.hs:10:instance Num FreeNum where
testsuite/tests/parser/should_run/LexNegLit.hs:15:instance Fractional FreeNum where
testsuite/tests/parser/should_run/RecordDotSyntax5.hs:8:instance Num t => HasField "sum" (Pair t) t where
testsuite/tests/parser/should_fail/readFail001.stdout:13:g :: (Num a, Eq b) => Foo a -> [b] -> (a, a, a) -> b
testsuite/tests/parser/should_fail/readFail001.stdout:44:	      (((((((y + [1, 2, 3, 4]) + (4, 3, 2, 1)) + (4 :: (Num a) => a))
testsuite/tests/parser/should_fail/readFail001.hs:99:  + (4 :: Num a => a)
testsuite/tests/parser/should_fail/readFail001.hs:112:g :: (Num a, Eq b) => Foo a -> [b] -> (a,a,a) -> b
testsuite/tests/parser/should_fail/T16270.hs:16:data Num a => D a
testsuite/tests/parser/should_fail/NumericUnderscoresFail0.stderr:18:    • No instance for ‘Num (t0 -> a0)’
testsuite/tests/parser/should_fail/OpaqueParseFail4.hs:3:f :: Num a => a -> a
testsuite/tests/codeGen/should_compile/T23002.hs:47:        charsToWord32s (k:ks) = (fromIntegral $ fromEnum k) : charsToWord32s ks
testsuite/tests/codeGen/should_run/cgrun027.hs:4:class (Num a, Integral a) => Foo a
testsuite/tests/codeGen/should_run/cgrun077.hs:76:test :: (Show a, Num a) => String -> (a -> Word) -> (a -> Word) -> String
testsuite/tests/codeGen/should_run/T15892.hs:32:w2c = toEnum . fromEnum
testsuite/tests/codeGen/should_run/T24264run.hs:30:  go $ noinline map (toEnum @Ordering . flip mod 3) ints
testsuite/tests/codeGen/should_run/cgrun071.hs:51:test :: (Show a, Num a) => (a -> Word) -> (a -> Word) -> String
testsuite/tests/codeGen/should_run/cgrun055.hs:19:{-instance Enum Digit where
testsuite/tests/codeGen/should_run/cgrun055.hs:20:    fromEnum Five = 5
testsuite/tests/codeGen/should_run/cgrun055.hs:21:    fromEnum _ = undefined
testsuite/tests/codeGen/should_run/cgrun055.hs:22:    toEnum 6 = Six
testsuite/tests/codeGen/should_run/cgrun055.hs:23:    toEnum _ = undefined-}
testsuite/tests/codeGen/should_run/T10870.hs:5:unsafeShift32R :: (Bits a, Num a) => a -> a
testsuite/tests/codeGen/should_run/cgrun075.hs:93:test :: (Show a, Num a, Eq a) => a -> (a -> a -> a) -> (a -> a -> a) -> String
testsuite/tests/codeGen/should_run/cgrun072.hs:78:test :: (Eq a, Show a, Num a) => [a] -> (a -> a) -> (a -> a) -> String
testsuite/tests/codeGen/should_run/cgrun072.hs:91:test' :: (Eq a, Show a, Num a) => [a] -> (a -> a) -> (a -> a) -> String
testsuite/tests/codeGen/should_run/cgrun076.hs:93:test :: (Show a, Num a, Eq a) => a -> (a -> a -> a) -> (a -> a -> a) -> String
testsuite/tests/determinism/determ016/A.hs:10:extractMinX ∷ (Ord a, Eq b, Num b) ⇒ PSum a b → ((a,b), PSum a b)
testsuite/tests/determinism/determ016/A.hs:14:toListX ∷ (Ord a, Eq b, Num b) ⇒ PSum a b → [(a,b)]
testsuite/tests/determinism/determ011/A.hs:9:--            forall ($dOrd_a1sc :: Ord Int) ($dNum_a1sd :: Num Int).
testsuite/tests/determinism/determ011/A.hs:15:--            forall ($dNum_a18n42 :: Num Int) ($dOrd_a18n43 :: Ord Int).
testsuite/tests/determinism/determ011/A.hs:22:instance (Ord a, Num a) => Size [a] where
testsuite/tests/determinism/determ022/A.hs:4:test1 :: Num a => a -> a -> a
testsuite/tests/determinism/determ003/A.hs:5:-- Consider succ from Enum, it requires Num Int and Eq Int. The order of
testsuite/tests/determinism/determ003/A.hs:9:--  let $$dNum = GHC.Num.$fNumInt in ...
testsuite/tests/determinism/determ003/A.hs:13:--  let $dNum = GHC.Num.$fNumInt in
testsuite/tests/determinism/determ021/determ021.stdout:5:    (Applicative f, Num t, Num b) =>
testsuite/tests/determinism/determ021/determ021.stdout:13:    (Applicative f, Num t, Num b) =>
testsuite/tests/ghci/prog008/ghci.prog008.stdout:3:  c1 :: Num b => a -> b
testsuite/tests/ghci/prog008/ghci.prog008.stdout:4:  c2 :: (Num b, Show b) => a -> b
testsuite/tests/ghci/prog008/ghci.prog008.stdout:9:  c1 :: Num b => a -> b
testsuite/tests/ghci/prog008/ghci.prog008.stdout:10:  c2 :: (Num b, Show b) => a -> b
testsuite/tests/ghci/prog008/A.hs:13:  c1 :: Num b => a -> b
testsuite/tests/ghci/prog008/A.hs:14:  c2 :: (Num b,Show b) => a -> b
testsuite/tests/ghci/T16793/T16793.stdout:3:instance Enum Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/T16793/T16793.stdout:5:instance Num Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/ghci/should_run/T16096.stdout:7:        $dEnum :: GHC.Internal.Enum.Enum GHC.Types.Int
testsuite/tests/ghci/should_run/T16096.stdout:9:        $dEnum = GHC.Internal.Enum.$fEnumInt } in
testsuite/tests/ghci/should_run/T16096.stdout:14:              @GHC.Types.Int $dEnum (GHC.Types.I# 1#); } in
testsuite/tests/ghci/should_run/T16096.stdout:35:        $dEnum :: GHC.Internal.Enum.Enum GHC.Types.Int
testsuite/tests/ghci/should_run/T16096.stdout:37:        $dEnum = GHC.Internal.Enum.$fEnumInt } in
testsuite/tests/ghci/should_run/T16096.stdout:42:              @GHC.Types.Int $dEnum (GHC.Types.I# 1#); } in
testsuite/tests/ghci/should_run/T23229.hs:1:instance Num Bool
testsuite/tests/ghci/should_fail/GHCiErrorIndexLinks.stderr:3:    • No instance for ‘Num String’ arising from the literal ‘1729’
testsuite/tests/ghci/scripts/T14969.stderr:4:        in the constraint: Num (t2 -> t1 -> t3)
testsuite/tests/ghci/scripts/T14969.stderr:6:        it :: forall {t1} {t2} {t3}. (Num t1, Num (t2 -> t1 -> t3)) => t3
testsuite/tests/ghci/scripts/ghci001.stdout:1:(+) :: Num a => a -> a -> a
testsuite/tests/ghci/scripts/ghci001.stdout:2:enumFromTo :: Enum a => a -> a -> [a]
testsuite/tests/ghci/scripts/T7627.stdout:8:instance Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/ghci064.stdout:53:instance Enum Bool -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/Defer02.stderr:91:    • No instance for ‘Num (a -> a)’ arising from the literal ‘1’
testsuite/tests/ghci/scripts/ghci011.stdout:25:instance Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/T8469.stdout:6:instance Enum Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/T8469.stdout:8:instance Num Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/ghci/scripts/ghci016.hs:10:instance Num T where
testsuite/tests/ghci/scripts/ghci016.hs:15:    signum = error "urk"
testsuite/tests/ghci/scripts/T11975.script:3:let foo :: (Show a, Num b) => a -> b; foo = undefined
testsuite/tests/ghci/scripts/T11975.stdout:5:foo @Int :: forall b. (Show Int, Num b) => Int -> b
testsuite/tests/ghci/scripts/T10963.script:4:let foo :: (Num a, Monoid a) => a -> a; foo = undefined
testsuite/tests/ghci/scripts/T8776.stdout:1:pattern P :: () => (Num x, Eq y) => A x y
testsuite/tests/ghci/scripts/T10321.stdout:1:3 :> 4 :> 5 :> Nil :: Num b => Vec 3 b
testsuite/tests/ghci/scripts/ListTuplePunsPpr.stdout:8:instance Enum Unit -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/ListTuplePunsPpr.stdout:30:instance Enum a => Enum (Solo a) -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/T15325.stderr:9:      prevents the constraint ‘(Num e0)’ from being solved.
testsuite/tests/ghci/scripts/T15325.stderr:12:        instance Num Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/ghci/scripts/T15325.stderr:13:        instance Num Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/ghci/scripts/ghci008.stdout:1:type Num :: * -> Constraint
testsuite/tests/ghci/scripts/ghci008.stdout:2:class Num a where
testsuite/tests/ghci/scripts/ghci008.stdout:7:type Num :: * -> Constraint
testsuite/tests/ghci/scripts/ghci008.stdout:8:class Num a where
testsuite/tests/ghci/scripts/T11208.stdout:1:f :: P.Num a => a -> a
testsuite/tests/ghci/scripts/T8776.hs:2:data A x y = (Num x, Eq y) => B
testsuite/tests/ghci/scripts/ghci025.stdout:46:(+) :: GHC.Internal.Num.Num a => a -> a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:91:g :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:94:f :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:97:g :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:99:f :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:102:g :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:105:f :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:108:Ghci025C.g :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/ghci025.stdout:111:f :: forall {a}. Num a => a -> a
testsuite/tests/ghci/scripts/T10963.stderr:4:      prevents the constraint ‘(Num a0)’ from being solved.
testsuite/tests/ghci/scripts/T10963.stderr:7:        instance Num Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/ghci/scripts/T10963.stderr:8:        instance Num Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/ghci/scripts/T11524a.stdout:7:pattern Pur :: (Eq a, Num a) => a -> [a]
testsuite/tests/ghci/scripts/T11524a.stdout:10:  :: (Eq a1, Num a1) => Show a2 => a1 -> a2 -> ([a1], UnivProv a2)
testsuite/tests/ghci/scripts/T11524a.stdout:12:pattern Pure :: (Eq a, Num a) => a -> a1 -> ([a], Ex)
testsuite/tests/ghci/scripts/T11524a.stdout:15:  :: (Eq a, Num a) => Show a1 => a -> a1 -> ([a], ExProv)
testsuite/tests/ghci/scripts/T11524a.stdout:32:pattern Pur :: forall {a}. (Eq a, Num a) => a -> [a]
testsuite/tests/ghci/scripts/T11524a.stdout:36:     (Eq a1, Num a1) =>
testsuite/tests/ghci/scripts/T11524a.stdout:41:  :: forall {a}. (Eq a, Num a) => forall {a1}. a -> a1 -> ([a], Ex)
testsuite/tests/ghci/scripts/T11524a.stdout:45:     (Eq a, Num a) =>
testsuite/tests/ghci/scripts/T4175.stdout:32:instance Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/T4175.stdout:67:instance Enum Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/ghci/scripts/T4175.stdout:69:instance Num Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/arityanal/should_compile/Arity01.stderr:47:s :: forall {t1} {t2}. Num t1 => (t1 -> t2) -> t2
testsuite/tests/arityanal/should_compile/Arity01.stderr:49:s = \ (@t) (@t1) ($dNum :: Num t) (f :: t -> t1) -> f (fromInteger @t $dNum F1.s1)
testsuite/tests/arityanal/should_compile/Arity11.stderr:55:fib :: forall {t} {a}. (Eq t, Num t, Num a) => t -> a
testsuite/tests/arityanal/should_compile/Arity11.stderr:58:  = \ (@t) (@a) ($dEq :: Eq t) ($dNum :: Num t) ($dNum1 :: Num a) (eta :: t) ->
testsuite/tests/arityanal/should_compile/Arity11.stderr:62:        lvl = fromInteger @t $dNum F11.fib3 } in
testsuite/tests/arityanal/should_compile/Arity11.stderr:66:        lvl1 = fromInteger @t $dNum F11.fib2 } in
testsuite/tests/arityanal/should_compile/Arity11.stderr:74:        lvl3 = fromInteger @t $dNum F11.fib1 } in
testsuite/tests/arityanal/should_compile/Arity11.stderr:83:                    False -> + @a $dNum1 (fib4 (- @t $dNum ds lvl)) (fib4 (- @t $dNum ds lvl1));
testsuite/tests/arityanal/should_compile/Arity11.stderr:137:"SPEC fib @Integer @Integer" forall ($dEq :: Eq Integer) ($dNum :: Num Integer) ($dNum1 :: Num Integer). fib @Integer @Integer $dEq $dNum $dNum1 = F11.f11_fib
testsuite/tests/arityanal/should_compile/Arity14.stderr:16:f14 :: forall {t}. (Ord t, Num t) => t -> t -> t -> t
testsuite/tests/arityanal/should_compile/Arity14.stderr:19:  = \ (@t) ($dOrd :: Ord t) ($dNum :: Num t) (eta :: t) (eta1 :: t) ->
testsuite/tests/arityanal/should_compile/Arity14.stderr:23:        lvl = fromInteger @t $dNum F14.f2 } in
testsuite/tests/arityanal/should_compile/Arity14.stderr:35:                    v = f3 n (+ @t $dNum x lvl) } in
testsuite/tests/arityanal/should_compile/Arity14.stderr:36:                  \ (y :: t) -> v (+ @t $dNum x y)
testsuite/tests/arityanal/should_compile/Arity05.stderr:11:f5g :: forall {a} {t}. Num a => (t -> a) -> t -> a
testsuite/tests/arityanal/should_compile/Arity05.stderr:13:f5g = \ (@a) (@t) ($dNum :: Num a) (h :: t -> a) (z :: t) -> + @a $dNum (h z) (fromInteger @a $dNum F5.f5g1)
testsuite/tests/arityanal/should_compile/Arity05.stderr:16:f5h :: forall {a} {t}. Num a => (t -> a) -> t -> (t -> a) -> a
testsuite/tests/arityanal/should_compile/Arity05.stderr:18:f5h = \ (@a) (@t) ($dNum :: Num a) (f :: t -> a) (x :: t) (g :: t -> a) -> + @a $dNum (f x) (+ @a $dNum (g x) (fromInteger @a $dNum F5.f5g1))
testsuite/tests/arityanal/should_compile/Arity08.stderr:6:f8f :: forall {p}. Num p => Bool -> p -> p -> p
testsuite/tests/arityanal/should_compile/Arity08.stderr:9:  = \ (@p) ($dNum :: Num p) (b :: Bool) (x :: p) (y :: p) ->
testsuite/tests/arityanal/should_compile/Arity08.stderr:11:        False -> + @p $dNum (+ @p $dNum x y) (* @p $dNum x x);
testsuite/tests/hiefile/should_compile/hie005.hs:7:num :: Num a => a
testsuite/tests/hiefile/should_compile/hie005.hs:8:num = 0 + 1 + 1010011 * 41231 + 12131
testsuite/tests/hiefile/should_compile/Scopes.hs:11:pattern LL :: Num a => a -> a
testsuite/tests/hiefile/should_compile/hie007.hs:33:num :: Num a => a -> a -> a
testsuite/tests/hiefile/should_compile/hie007.hs:34:num = undefined
testsuite/tests/hiefile/should_compile/hie007.hs:36:num' :: forall a. Num a => a -> a -> a
testsuite/tests/hiefile/should_run/T23540.hs:10:instance Num Modulo1 where
testsuite/tests/hiefile/should_run/T23540.stdout:5:│ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:13:   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:21:      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:70:│ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:78:   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:86:      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:100:│ $dEnum at T23540.hs:1:1, of type: Enum (Item [Letter])
testsuite/tests/hiefile/should_run/T23540.stdout:108:   │ $dEnum at T23540.hs:1:1, of type: Enum Letter
testsuite/tests/hiefile/should_run/T23540.stdout:116:      │ $fEnumLetter at T23540.hs:46:34-37, of type: Enum Letter
testsuite/tests/hiefile/should_run/T23540.stdout:178:│ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:186:   │ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:194:      │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:205:│ $dNum at T23540.hs:1:1, of type: Num Modulo1
testsuite/tests/hiefile/should_run/T23540.stdout:213:   │ $fNumModulo1 at T23540.hs:10:10-20, of type: Num Modulo1
testsuite/tests/deSugar/should_compile/T14546d.stderr:5:    • In the instance declaration for ‘Num D’
testsuite/tests/deSugar/should_compile/T14546d.hs:3:instance Num D where
testsuite/tests/deSugar/should_compile/ds040.hs:11:(^^^^)          :: (Num a, Integral b) => a -> b -> a
testsuite/tests/deSugar/should_compile/T12944.hs:22:instance Num a => AdditiveGroup (Poly1 a) where
testsuite/tests/deSugar/should_compile/T12944.hs:28:instance (AdditiveGroup (poly a), Num a) => AdditiveGroup (IntOfLog poly a) where
testsuite/tests/deSugar/should_compile/T12944.hs:33:    {-# SPECIALISE instance Num a => AdditiveGroup (IntOfLog Poly1 a) #-}
testsuite/tests/deSugar/should_compile/T12944.hs:36:instance (VectorSpace (poly a), Scalar (poly a) ~ a, Num a) => VectorSpace (IntOfLog poly a) where
testsuite/tests/deSugar/should_compile/T19883.hs:13:class Num (a :: TYPE r) where
testsuite/tests/deSugar/should_compile/T19883.hs:16:roundDef :: forall (a :: TYPE IntRep) . (Eq a, Num a) => a -> ()
testsuite/tests/deSugar/should_run/dsrun009.hs:14:instance Num N where
testsuite/tests/deSugar/should_run/dsrun011.hs:7:a1 :: (Num a, Eq a) => a -> a
testsuite/tests/deSugar/should_run/T3126.hs:6:-- {{{ Num literals
testsuite/tests/deSugar/should_run/T3126.hs:9:instance Num N where
testsuite/tests/deSugar/should_run/T3126.hs:24:testNum = do
testsuite/tests/ado/ado004.stderr:12:    (Applicative f, Num t, Num b) =>
testsuite/tests/ado/ado004.stderr:16:    (Functor f, Num t, Num b) =>
testsuite/tests/ado/ado004.stderr:20:    (Applicative f, Num t) =>
testsuite/tests/ado/ado004.stderr:24:    (Functor f, Num t, Num b) =>
testsuite/tests/ado/ado004.stderr:28:    (Functor f, Num t, Num b) =>
testsuite/tests/ado/ado004.stderr:32:    (Monad m, Num t1) =>
testsuite/tests/ado/ado004.stderr:36:    (Monad m, Num t) =>
testsuite/tests/ado/ado004.stderr:40:    (Monad m, Num t) =>
testsuite/tests/ado/ado004.stderr:44:    (Monad m, Num (m a)) =>
testsuite/tests/th/T16976.stderr:1:T16976.aNumber :: forall {a_0 :: *} . GHC.Internal.Num.Num a_0 =>
testsuite/tests/th/TH_pragma.hs:10:$( [d| bar :: Num a => a -> a
testsuite/tests/th/T7021a.hs:31:    [t| forall a. (Show a, (Read a, Num a)) => a -> a |]
testsuite/tests/th/T8761.stderr:77:        pattern Pur :: forall a. (Num a, Eq a) => a -> [a]
testsuite/tests/th/T8761.stderr:80:                  forall a b. (Num a, Eq a) => Show b => a -> b -> ([a], UnivProv b)
testsuite/tests/th/T8761.stderr:83:                  forall a. (Num a, Eq a) => forall b. a -> b -> ([a], Ex)
testsuite/tests/th/T8761.stderr:86:                  forall a. (Num a, Eq a) =>
testsuite/tests/th/T8761.stderr:105:    pattern Pur :: forall a. (Num a, Eq a) => a -> [a]
testsuite/tests/th/T8761.stderr:108:              forall a b. (Num a, Eq a) => Show b => a -> b -> ([a], UnivProv b)
testsuite/tests/th/T8761.stderr:111:              forall a. (Num a, Eq a) => forall b. a -> b -> ([a], Ex)
testsuite/tests/th/T8761.stderr:114:              forall a. (Num a, Eq a) =>
testsuite/tests/th/T8761.stderr:129:pattern T8761.Pur :: forall (a_0 :: *) . (GHC.Internal.Num.Num a_0,
testsuite/tests/th/T8761.stderr:132:pattern T8761.Purp :: forall (a_0 :: *) (b_1 :: *) . (GHC.Internal.Num.Num a_0,
testsuite/tests/th/T8761.stderr:136:pattern T8761.Pure :: forall (a_0 :: *) . (GHC.Internal.Num.Num a_0,
testsuite/tests/th/T8761.stderr:139:pattern T8761.Purep :: forall (a_0 :: *) . (GHC.Internal.Num.Num a_0,
testsuite/tests/th/TH_pragma.stderr:10:    [d| bar :: Num a => a -> a
testsuite/tests/th/TH_pragma.stderr:14:    bar :: Num a => a -> a
testsuite/tests/th/T8761.hs:84: pattern Pur :: forall a. (Num a, Eq a) => a -> [a]
testsuite/tests/th/T8761.hs:87: pattern Purp :: forall a b. (Num a, Eq a) =>
testsuite/tests/th/T8761.hs:91: pattern Pure :: forall a. (Num a, Eq a) => forall b. a -> b -> ([a], Ex)
testsuite/tests/th/T8761.hs:94: pattern Purep :: forall a. (Num a, Eq a) =>
testsuite/tests/quantified-constraints/T22216e.hs:15:foo :: ( forall a b. ( Eq a, Num b, C a b  ) => D a b
testsuite/tests/module/mod47.stderr:3:    • Could not deduce ‘Num a’
testsuite/tests/module/mod47.stderr:5:      from the context: (Eq a, Enum a)
testsuite/tests/module/mod47.stderr:8:        add (Num a) to the context of the instance declaration
testsuite/tests/module/mod55.hs:1:-- !!! Illegal deriving Enum 
testsuite/tests/module/mod71.stderr:5:               the inferred type of f :: Num t1 => (t2 -> t1 -> t3) -> t3
testsuite/tests/module/mod71.stderr:13:      Constraints include Num t1 (from mod71.hs:4:1-11)
testsuite/tests/module/mod55.stderr:3:    • Can't make a derived instance of ‘Enum T’:
testsuite/tests/module/mod47.hs:5:instance Num a => Foo [a]
testsuite/tests/module/mod47.hs:6:instance (Eq a, Enum a) => Bar [a]
testsuite/tests/plugins/test-hole-plugin.stderr:32:        sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/plugins/test-hole-plugin.stderr:33:        product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/plugins/test-hole-plugin.stderr:60:        product :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/plugins/test-hole-plugin.stderr:61:        sum :: forall (t :: * -> *) a. (Foldable t, Num a) => t a -> a
testsuite/tests/rep-poly/T12973.hs:8:class Num (a :: TYPE r) where
testsuite/tests/rep-poly/T12973.hs:12:foo :: forall r (a :: TYPE r). Num a => a
testsuite/tests/rep-poly/EtaExpandStupid2.hs:13:data (Eq b, Num c) => D4 a b c = MkD4 a b c
testsuite/tests/rep-poly/EtaExpandStupid2.hs:18:  -- should fail: no evidence for Num c,
testsuite/tests/rep-poly/EtaExpandStupid1.hs:33:data (Ord b, Typeable c, Num c) => D4 a b c = forall d. Eq d => MkD4 a b c d
testsuite/tests/rep-poly/EtaExpandStupid1.hs:35:foo4 :: (Num c, Typeable c, Eq d) => [Maybe Int] -> c -> d -> D4 Float# [Maybe Int] c
testsuite/tests/rep-poly/T12709.stderr:13:          u :: Num (a :: TYPE rep) => a
testsuite/tests/rep-poly/EtaExpandStupid2.stderr:3:    • No instance for ‘Num c’ arising from a use of ‘MkD4’
testsuite/tests/rep-poly/EtaExpandStupid2.stderr:5:        add (Num c) to the context of
testsuite/tests/rep-poly/T12709.hs:7:import Prelude hiding (Num (..))
testsuite/tests/rep-poly/T12709.hs:13:class Num (a :: TYPE rep) where
testsuite/tests/rep-poly/T12709.hs:18:instance Num Int where
testsuite/tests/rep-poly/T12709.hs:22:instance Num Int# where
testsuite/tests/rep-poly/T12709.hs:27:a = let u :: Num (a :: TYPE rep) => a
testsuite/tests/ghc-api/apirecomp001/apirecomp001.stderr:8:        (Num a0) arising from the literal ‘1’ at B.hs:5:13
testsuite/tests/ghc-api/apirecomp001/apirecomp001.stderr:9:        (Enum a0)
testsuite/tests/ghc-api/apirecomp001/apirecomp001.stderr:24:        (Num a0) arising from the literal ‘1’ at B.hs:5:13
testsuite/tests/ghc-api/apirecomp001/apirecomp001.stderr:25:        (Enum a0)
testsuite/tests/pmcheck/should_compile/T19384.hs:22:instance Num T where
testsuite/tests/pmcheck/should_compile/T322.hs:5:instance (Num a) => Num (Maybe a) where
testsuite/tests/pmcheck/should_compile/T322.hs:21:  signum (Just a) = Just (signum a)
testsuite/tests/pmcheck/should_compile/T322.hs:22:  signum _ = Nothing
testsuite/tests/pmcheck/should_compile/T11374.hs:15:data TC     = TCNum Integer
testsuite/tests/pmcheck/should_compile/T11374.hs:39:    TCon (TC (TCNum _)) _ -> Just []
testsuite/tests/pmcheck/should_compile/T16289.hs:6:instance Num Value where
testsuite/tests/pmcheck/should_compile/T16289.hs:10:  signum      = undefined
testsuite/tests/dmdanal/should_compile/str001.hs:6:newtype Num a => Point2 a     = Point2 (a,a)
testsuite/tests/dmdanal/should_compile/str001.hs:8:area2 :: Num a => Point2 a -> Point2 a -> Point2 a -> a
testsuite/tests/dmdanal/should_run/T14285a.hs:15:sfromList :: (Enum a, Foldable c) => c a -> Set a
testsuite/tests/dmdanal/should_run/T14285a.hs:16:sfromList xs = Set $ IS.fromList $ Prelude.map fromEnum $ F.toList xs
testsuite/tests/dmdanal/should_run/T14285a.hs:19:fromList :: Enum k => [(k,v)] -> Map k v
testsuite/tests/dmdanal/should_run/T14285a.hs:21:  Map $ IM.fromList $ Prelude.map (\(k,v) -> (fromEnum k, v)) kvs
testsuite/tests/dmdanal/should_run/T14285a.hs:27:findWithDefault d k (Map m) = IM.findWithDefault d (fromEnum k) m
testsuite/tests/dmdanal/sigs/T21888.hs:47:unbit :: Num t => Bool -> t
testsuite/tests/dmdanal/sigs/T21888.hs:51:unbits :: (Num t, Bits t) => [Bool] -> t
testsuite/tests/dmdanal/sigs/T21888.hs:59:unbitsZ :: (Num n, Bits n) => (Bool,[Bool]) -> n
testsuite/tests/dmdanal/sigs/T5075.hs:7:-- f :: (Ord a, Num a) => a -> Either a b
testsuite/tests/driver/T4437.hs:17:        cabalExtensions = map show [ toEnum 0 :: KnownExtension .. ]
testsuite/tests/driver/json_dump.stderr:2:{"span":{"file":"json_dump.hs","startLine":6,"startCol":7,"endLine":6,"endCol":8},"doc":"\u2022 No instance for \u2018Num (a -> a)\u2019 arising from the literal \u20185\u2019\n    (maybe you haven't applied a function to enough arguments?)\n\u2022 In the expression: 5\n  In an equation for \u2018id1\u2019: id1 = 5","messageClass":"MCDiagnostic SevError ErrorWithoutFlag Just GHC-39999"}
testsuite/tests/driver/t22391/t22391j.stderr:10:        Num a0 arising from the literal ‘1’
testsuite/tests/driver/t22391/t22391j.stderr:19:        Num a0 arising from the literal ‘4’
testsuite/tests/driver/t22391/t22391j.stderr:41:        Num a0 arising from the literal ‘3’
testsuite/tests/driver/t22391/t22391.stderr:10:        Num a0 arising from the literal ‘1’
testsuite/tests/driver/t22391/t22391.stderr:19:        Num a0 arising from the literal ‘4’
testsuite/tests/driver/t22391/t22391.stderr:41:        Num a0 arising from the literal ‘3’
testsuite/tests/impredicative/T17372.hs:6:x1 = () :: ((Show a => Num a => Int) ~ ((Show a, Num a) => Int)) => ()
testsuite/tests/impredicative/T17372.hs:8:-- -> replace `Num a` with `(Eq a, Ord a)`
testsuite/tests/impredicative/T17372.hs:23:-- -> replace `Num a` with `A a` instead
testsuite/tests/impredicative/T17372.hs:32:x6 = () :: C (Num a) a => ()
testsuite/tests/impredicative/T17372.hs:43:x10 = () :: B (Show a) (Num a) => ()
testsuite/tests/concurrent/should_run/hs_try_putmvar003.hs:81:    bracket (mkCallbackQueue (fromEnum use_foreign_export) (z*y))
testsuite/tests/concurrent/T13615/Memo.hs:20:bits :: (Num a, Ord a, Bits a) => Memo a
testsuite/tests/concurrent/T13615/Memo.hs:36:apply :: (Ord b, Num b, Bits b) => IntTrie a -> b -> a
testsuite/tests/concurrent/T13615/Memo.hs:43:applyPositive :: (Num b, Bits b) => BitTrie a -> b -> a
testsuite/tests/concurrent/T13615/Memo.hs:49:identity :: (Num a, Bits a) => IntTrie a
testsuite/tests/concurrent/T13615/Memo.hs:54:identityPositive :: (Num a, Bits a) => BitTrie a
testsuite/tests/mdo/should_fail/mdofail001.stderr:3:    • No instance for ‘Num Char’ arising from the literal ‘1’
testsuite/tests/ffi/should_run/IncallAffinity_c.c:22:  int threadNum = *(int*)(info);
testsuite/tests/ffi/should_run/IncallAffinity_c.c:25:  cap = (threadNum % 2) % enabled_capabilities;
testsuite/tests/hpc/raytrace/Parse.hs:46:     ; ls <- many (satisfy (\x -> isAlphaNum x || x == '-' || x == '_'))
testsuite/tests/hpc/raytrace/tixs/hpc_raytrace.stdout:222:<span class="lineno">   46 </span><span class="spaces">     </span><span class="istickedoff">; ls &lt;- many (satisfy (\x -&gt; isAlphaNum x || x == '-' || x == '_'))</span>
testsuite/tests/annotations/should_fail/annfail10.stderr:21:      prevents the constraint ‘(Num a0)’ from being solved.
testsuite/tests/annotations/should_fail/annfail10.stderr:24:        instance Num Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/annotations/should_fail/annfail10.stderr:25:        instance Num Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/annotations/should_fail/annfail08.stderr:9:    • No instance for ‘Num (a0 -> a0)’ arising from a use of ‘+’
testsuite/tests/indexed-types/should_compile/T14680.hs:10:data instance TyFamilyEnum = TyFamilyEnum1 | TyFamilyEnum2 | TyFamilyEnum3
testsuite/tests/indexed-types/should_compile/T14680.hs:12:suc :: TyFamilyEnum -> TyFamilyEnum
testsuite/tests/indexed-types/should_compile/T8011.hs:9:clean = filter isAlphaNum . show . toURL
testsuite/tests/indexed-types/should_compile/T4497.hs:14:class (Num (RealOf t)) => Normed t
testsuite/tests/indexed-types/should_compile/T10634.hs:27:[WD] Num alpha
testsuite/tests/indexed-types/should_compile/T7837.stderr:1:Rule fired: Class op signum (BUILTIN)
testsuite/tests/indexed-types/should_compile/T2715.hs:14:   Intv :: (Ord v, Enum v) => (v,v) -> Interval v
testsuite/tests/indexed-types/should_compile/T2715.hs:22:   empty   :: (Ord (Value d), Enum (Value d)) => Domain d (Value d)
testsuite/tests/indexed-types/should_compile/T2715.hs:31:   empty = Intv (toEnum 1, toEnum 0)
testsuite/tests/indexed-types/should_compile/T3017.stderr:7:    (Elem c ~ (a, b), Coll c, Num a, Num b) =>
testsuite/tests/indexed-types/should_run/T2985.hs:9:instance (Num a, Num b, a ~ b) => Num (a,b) where
testsuite/tests/indexed-types/should_run/T4235.hs:6:-- Deriving Enum with phantom type parameter
testsuite/tests/indexed-types/should_fail/T7862.hs:15:class (Num (Scalar t), Num t) => Mode t where
testsuite/tests/indexed-types/should_fail/T7862.hs:18:instance Num a => Mode (Tower s a) where
testsuite/tests/indexed-types/should_fail/T7862.hs:23:instance Num a => Num (Tower s a) where
testsuite/tests/indexed-types/should_fail/T5439.hs:98:  show n = show (peanoNum n ∷ Int)
testsuite/tests/indexed-types/should_fail/T5439.hs:100:peanoNum ∷ Num n ⇒ Peano p → n
testsuite/tests/indexed-types/should_fail/T5439.hs:101:peanoNum PZero     = 0
testsuite/tests/indexed-types/should_fail/T5439.hs:102:peanoNum (PSucc p) = 1 + peanoNum p
testsuite/tests/indexed-types/should_fail/T8155.stderr:5:      from the context: Num a
testsuite/tests/indexed-types/should_fail/T8155.hs:25:instance (Num a) => Build (a->a) where
testsuite/tests/indexed-types/should_fail/T8155.hs:29:buildV :: (Integral a, Num b) => a -> (b -> c) -> Vector c
testsuite/tests/indexed-types/should_fail/T7862.stderr:7:    • In the instance declaration for ‘Num (Tower s a)’
testsuite/tests/patsyn/should_compile/T11213.stderr:19:      pattern Pur :: forall {a}. (Eq a, Num a) => a -> [a]
testsuite/tests/patsyn/should_compile/T11213.stderr:24:                      (Eq a1, Num a1) =>
testsuite/tests/patsyn/should_compile/T11213.stderr:30:                      (Eq a, Num a) =>
testsuite/tests/patsyn/should_compile/T11213.stderr:36:                       (Eq a, Num a) =>
testsuite/tests/patsyn/should_compile/T9857.hs:155:instance Num Half where
testsuite/tests/patsyn/should_compile/T9857.hs:161:  signum = toHalf . signum . fromHalf
testsuite/tests/patsyn/should_fail/T11667.stderr:3:    • Could not deduce ‘Num a’ arising from the literal ‘42’
testsuite/tests/patsyn/should_fail/T11667.stderr:8:        add (Num a) to the "required" context of
testsuite/tests/patsyn/should_fail/T11667.stderr:34:    • Could not deduce ‘Num a’ arising from a use of ‘MkS’
testsuite/tests/patsyn/should_fail/T11667.stderr:39:        add (Num a) to the "required" context of
testsuite/tests/patsyn/should_fail/T11667.hs:27:-- constraint (Num a) when the bidirectional pattern synonym is used
testsuite/tests/patsyn/should_fail/T11667.hs:29:data S a where MkS :: (Num a, Show a) => a -> S a
testsuite/tests/patsyn/should_fail/T10873.hs:9:pattern Pat2 :: (Enum a) => Show a => a -> T a
testsuite/tests/arrows/should_compile/arrowapply5.hs:9:f :: (Num b, Arrow a) => a b b
testsuite/tests/arrows/should_compile/arrowapply5.hs:12:g :: (Num b, Arrow a) => a b b
testsuite/tests/arrows/should_run/arrowrun001.hs:11:data Val a = Num Int | Bl Bool | Fun (a (Val a) (Val a))
testsuite/tests/arrows/should_run/arrowrun001.hs:18:                ~(Num u) <- eval e1 -< env
testsuite/tests/arrows/should_run/arrowrun001.hs:19:                ~(Num v) <- eval e2 -< env
testsuite/tests/arrows/should_run/arrowrun001.hs:20:                returnA -< Num (u + v)
testsuite/tests/arrows/should_run/arrowrun001.hs:44:unNum (Num n) = n
testsuite/tests/arrows/should_run/arrowrun001.hs:47:        print (unNum (eval text_exp [("b", Bl True), ("x", Num 5)]))
testsuite/tests/arrows/should_run/arrowrun001.hs:48:        print (unNum (eval text_exp [("b", Bl False), ("x", Num 5)]))
testsuite/tests/arrows/should_fail/T20768_arrow_fail.stderr:55:    • Could not deduce ‘Num (Maybe Int)’ arising from the literal ‘100’
testsuite/tests/unboxedsums/unpack_sums_8.stdout:1:BoxEnum L
testsuite/tests/unboxedsums/unpack_sums_8.stdout:2:BoxEnum R
testsuite/tests/unboxedsums/unpack_sums_8.hs:11:data BoxEnum = BoxEnum {-# UNPACK #-} !EnumT
testsuite/tests/unboxedsums/unpack_sums_8.hs:14:l = BoxEnum L
testsuite/tests/unboxedsums/unpack_sums_8.hs:15:r = BoxEnum R
testsuite/tests/unboxedsums/ManyUbxSums_Addr.hs:21:instance Num Addr where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:644:  biproduct :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:647:  bisum :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:729:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:731:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:732:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:756:  isAlphaNum :: Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:798:  conjugate :: forall a. GHC.Internal.Num.Num a => Complex a -> Complex a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:947:module Data.Enum where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:954:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-ws-32:955:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:958:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:959:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:964:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-ws-32:1035:    sum :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:1036:    product :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:1324:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-ws-32:1363:  product :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:1380:  sum :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2018:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2047:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2092:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2099:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2101:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2102:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2105:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2314:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2315:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2316:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2317:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2318:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2319:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2330:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2331:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2457:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2458:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2459:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2460:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2461:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2462:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2473:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2474:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2595:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2630:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2631:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2634:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2686:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2687:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2731:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2766:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2767:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2770:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2788:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2794:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2932:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:2961:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:3006:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:3013:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:3015:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:3016:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-ws-32:3019:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5006:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5007:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5008:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5208:module GHC.Enum where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5215:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5216:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5219:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5220:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5225:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5226:  boundedEnumFrom :: forall a. (Enum a, Bounded a) => a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-ws-32:5227:  boundedEnumFromThen :: forall a. (Enum a, Bounded a) => a -> a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8280:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8291:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8361:module GHC.Num where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8367:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8368:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8374:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8453:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8539:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8559:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8784:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8875:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8929:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8967:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:8984:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9179:  readNumber :: forall a. GHC.Internal.Num.Num a => (GHC.Internal.Text.Read.Lex.Lexeme -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a) -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9187:  class GHC.Internal.Num.Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9195:  class (Real a, GHC.Internal.Enum.Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9209:  class (GHC.Internal.Num.Num a, GHC.Classes.Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9220:  (^) :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9227:  fromIntegral :: forall a b. (Integral a, GHC.Internal.Num.Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9246:  powImpl :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9247:  powImplAcc :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9734:  isAlphaNum :: GHC.Types.Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9856:  readBin :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9857:  readDec :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9859:  readHex :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9860:  readInt :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9861:  readOct :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9914:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9915:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9918:    toEnum :: Int -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9919:    fromEnum :: a -> Int
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9924:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9973:    sum :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9974:    product :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9977:  class Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:9996:  class (Real a, Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10023:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10024:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10030:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10056:  class (Num a, Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10108:  (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10129:  fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10181:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10783:  readBinP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10784:  readDecP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10785:  readHexP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10786:  readIntP :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:10787:  readOctP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11197:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11198:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11253:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11254:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11608:instance forall a k (b :: k). GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11609:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.And a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11610:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Iff a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11611:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Ior a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11612:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Xor a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11613:instance GHC.Internal.Enum.Enum GHC.Internal.Unicode.GeneralCategory -- Defined in ‘GHC.Internal.Unicode’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11614:instance forall k (a :: k) (b :: k). (a ~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11615:instance forall k1 k2 (a :: k1) (b :: k2). (a ~~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11616:instance forall k (s :: k). GHC.Internal.Enum.Enum (GHC.Internal.Data.Proxy.Proxy s) -- Defined in ‘GHC.Internal.Data.Proxy’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11617:instance GHC.Internal.Enum.Enum GHC.Types.Bool -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11618:instance GHC.Internal.Enum.Enum GHC.Types.Char -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11619:instance GHC.Internal.Enum.Enum GHC.Types.Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11620:instance GHC.Internal.Enum.Enum GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11621:instance GHC.Internal.Enum.Enum GHC.Types.Levity -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11622:instance GHC.Internal.Enum.Enum GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11623:instance GHC.Internal.Enum.Enum GHC.Types.Ordering -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11624:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Solo a) -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11625:instance GHC.Internal.Enum.Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11626:instance GHC.Internal.Enum.Enum GHC.Types.VecCount -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11627:instance GHC.Internal.Enum.Enum GHC.Types.VecElem -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11628:instance GHC.Internal.Enum.Enum GHC.Types.Word -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11629:instance forall k (a :: k). GHC.Internal.Enum.Enum (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11630:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Enum.Enum (f (g a)) => GHC.Internal.Enum.Enum (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11631:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11632:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11633:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11634:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11635:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11636:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11637:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Monoid.Ap f a) -- Defined in ‘GHC.Internal.Data.Monoid’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11638:instance forall a. (GHC.Internal.Enum.Enum a, GHC.Internal.Enum.Bounded a, GHC.Classes.Eq a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11639:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Enum.Enum (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11640:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.First a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11641:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Last a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11642:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11643:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11644:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.WrappedMonoid a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11645:instance forall k (a :: k) (b :: k). Coercible a b => GHC.Internal.Enum.Enum (GHC.Internal.Data.Type.Coercion.Coercion a b) -- Defined in ‘GHC.Internal.Data.Type.Coercion’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11646:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11647:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11648:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11649:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11650:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11651:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11652:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11653:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11654:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11655:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11656:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11657:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11658:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11659:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11660:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11661:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11662:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11663:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11664:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11665:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11666:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11667:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11668:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11669:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11670:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11671:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11672:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11673:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11674:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11675:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11676:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11677:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11678:instance GHC.Internal.Enum.Enum GHC.Internal.ByteOrder.ByteOrder -- Defined in ‘GHC.Internal.ByteOrder’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11679:instance GHC.Internal.Enum.Enum GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11680:instance GHC.Internal.Enum.Enum GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11681:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.Associativity -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11682:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.DecidedStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11683:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11684:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceUnpackedness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11685:instance GHC.Internal.Enum.Enum GHC.Internal.IO.Device.SeekMode -- Defined in ‘GHC.Internal.IO.Device’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11686:instance GHC.Internal.Enum.Enum GHC.Internal.IO.IOMode.IOMode -- Defined in ‘GHC.Internal.IO.IOMode’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11687:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoCostCentres -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11688:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoHeapProfile -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11689:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoTrace -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11690:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.GiveGCStats -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:11691:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.IoManagerFlag -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12014:instance forall a k (b :: k). GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12015:instance forall a. GHC.Internal.Float.RealFloat a => GHC.Internal.Num.Num (Data.Complex.Complex a) -- Defined in ‘Data.Complex’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12016:instance forall k (a :: k). Data.Fixed.HasResolution a => GHC.Internal.Num.Num (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12017:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Num.Num (f (g a)) => GHC.Internal.Num.Num (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12018:instance forall a b. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Functor.Contravariant.Op a b) -- Defined in ‘Data.Functor.Contravariant’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12019:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12020:instance GHC.Internal.Num.Num GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12021:instance GHC.Internal.Num.Num GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12022:instance GHC.Internal.Num.Num GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12023:instance GHC.Internal.Num.Num GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12024:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Num.Num (f a) => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12025:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12026:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12027:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12028:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Num.Num (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12029:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12030:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12031:instance GHC.Internal.Num.Num GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12032:instance GHC.Internal.Num.Num GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12033:instance GHC.Internal.Num.Num GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12034:instance GHC.Internal.Num.Num GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12035:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12036:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12037:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12038:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12039:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12040:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12041:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12042:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12043:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12044:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12045:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12046:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12047:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12048:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12049:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12050:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12051:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12052:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12053:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12054:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12055:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12056:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12057:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12058:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12059:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12060:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12061:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12062:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12063:instance GHC.Internal.Num.Num GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12064:instance GHC.Internal.Num.Num GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12065:instance GHC.Internal.Num.Num GHC.Types.Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12066:instance GHC.Internal.Num.Num GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12067:instance GHC.Internal.Num.Num GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-ws-32:12068:instance GHC.Internal.Num.Num GHC.Types.Word -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:644:  biproduct :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:647:  bisum :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:729:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:731:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:732:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:756:  isAlphaNum :: Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:798:  conjugate :: forall a. GHC.Internal.Num.Num a => Complex a -> Complex a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:947:module Data.Enum where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:954:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-mingw32:955:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:958:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:959:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:964:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-mingw32:1035:    sum :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:1036:    product :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:1324:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-mingw32:1363:  product :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:1380:  sum :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2018:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2047:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2092:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2099:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2101:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2102:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2105:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2314:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2315:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2316:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2317:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2318:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2319:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2330:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2331:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2457:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2458:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2459:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2460:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2461:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2462:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2473:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2474:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2595:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2630:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2631:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2634:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2686:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2687:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2731:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2766:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2767:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2770:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2788:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2794:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2932:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:2961:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:3006:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:3013:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:3015:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:3016:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-mingw32:3019:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5009:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5010:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5011:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5101:  toWin32ConsoleEvent :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Internal.Maybe.Maybe ConsoleEvent
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5219:  toWin32ConsoleEvent :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Internal.Maybe.Maybe ConsoleEvent
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5253:module GHC.Enum where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5260:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5261:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5264:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5265:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5270:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5271:  boundedEnumFrom :: forall a. (Enum a, Bounded a) => a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5272:  boundedEnumFromThen :: forall a. (Enum a, Bounded a) => a -> a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5340:  toWin32ConsoleEvent :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Internal.Maybe.Maybe ConsoleEvent
testsuite/tests/interface-stability/base-exports.stdout-mingw32:5366:  toWin32ConsoleEvent :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Internal.Maybe.Maybe ConsoleEvent
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8504:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8515:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8585:module GHC.Num where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8591:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8592:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8598:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8677:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8763:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-mingw32:8783:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9008:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9099:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9153:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9191:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9208:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9403:  readNumber :: forall a. GHC.Internal.Num.Num a => (GHC.Internal.Text.Read.Lex.Lexeme -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a) -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9411:  class GHC.Internal.Num.Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9419:  class (Real a, GHC.Internal.Enum.Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9433:  class (GHC.Internal.Num.Num a, GHC.Classes.Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9444:  (^) :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9451:  fromIntegral :: forall a b. (Integral a, GHC.Internal.Num.Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9470:  powImpl :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9471:  powImplAcc :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:9958:  isAlphaNum :: GHC.Types.Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10048:  failIfZero :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10142:  readBin :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10143:  readDec :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10145:  readHex :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10146:  readInt :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10147:  readOct :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10200:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10201:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10204:    toEnum :: Int -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10205:    fromEnum :: a -> Int
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10210:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10259:    sum :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10260:    product :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10263:  class Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10282:  class (Real a, Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10309:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10310:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10316:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10342:  class (Num a, Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10394:  (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10415:  fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-mingw32:10467:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11051:  readBinP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11052:  readDecP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11053:  readHexP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11054:  readIntP :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11055:  readOctP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11465:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11466:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11519:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11520:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11872:instance forall a k (b :: k). GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11873:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.And a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11874:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Iff a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11875:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Ior a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11876:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Xor a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11877:instance GHC.Internal.Enum.Enum GHC.Internal.Unicode.GeneralCategory -- Defined in ‘GHC.Internal.Unicode’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11878:instance forall k (a :: k) (b :: k). (a ~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11879:instance forall k1 k2 (a :: k1) (b :: k2). (a ~~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11880:instance forall k (s :: k). GHC.Internal.Enum.Enum (GHC.Internal.Data.Proxy.Proxy s) -- Defined in ‘GHC.Internal.Data.Proxy’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11881:instance GHC.Internal.Enum.Enum GHC.Types.Bool -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11882:instance GHC.Internal.Enum.Enum GHC.Types.Char -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11883:instance GHC.Internal.Enum.Enum GHC.Types.Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11884:instance GHC.Internal.Enum.Enum GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11885:instance GHC.Internal.Enum.Enum GHC.Types.Levity -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11886:instance GHC.Internal.Enum.Enum GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11887:instance GHC.Internal.Enum.Enum GHC.Types.Ordering -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11888:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Solo a) -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11889:instance GHC.Internal.Enum.Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11890:instance GHC.Internal.Enum.Enum GHC.Types.VecCount -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11891:instance GHC.Internal.Enum.Enum GHC.Types.VecElem -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11892:instance GHC.Internal.Enum.Enum GHC.Types.Word -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11893:instance forall k (a :: k). GHC.Internal.Enum.Enum (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11894:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Enum.Enum (f (g a)) => GHC.Internal.Enum.Enum (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11895:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11896:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11897:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11898:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11899:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11900:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11901:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Monoid.Ap f a) -- Defined in ‘GHC.Internal.Data.Monoid’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11902:instance forall a. (GHC.Internal.Enum.Enum a, GHC.Internal.Enum.Bounded a, GHC.Classes.Eq a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11903:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Enum.Enum (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11904:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.First a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11905:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Last a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11906:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11907:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11908:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.WrappedMonoid a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11909:instance forall k (a :: k) (b :: k). Coercible a b => GHC.Internal.Enum.Enum (GHC.Internal.Data.Type.Coercion.Coercion a b) -- Defined in ‘GHC.Internal.Data.Type.Coercion’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11910:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11911:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11912:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11913:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11914:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11915:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11916:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11917:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11918:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11919:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11920:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11921:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11922:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11923:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11924:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11925:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11926:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11927:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11928:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11929:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11930:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11931:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11932:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11933:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11934:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11935:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11936:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11937:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11938:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11939:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11940:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11941:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11942:instance GHC.Internal.Enum.Enum GHC.Internal.ByteOrder.ByteOrder -- Defined in ‘GHC.Internal.ByteOrder’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11943:instance GHC.Internal.Enum.Enum GHC.Internal.Event.Windows.ConsoleEvent.ConsoleEvent -- Defined in ‘GHC.Internal.Event.Windows.ConsoleEvent’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11944:instance GHC.Internal.Enum.Enum GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11945:instance GHC.Internal.Enum.Enum GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11946:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.Associativity -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11947:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.DecidedStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11948:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11949:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceUnpackedness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11950:instance GHC.Internal.Enum.Enum GHC.Internal.IO.Device.SeekMode -- Defined in ‘GHC.Internal.IO.Device’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11951:instance GHC.Internal.Enum.Enum GHC.Internal.IO.IOMode.IOMode -- Defined in ‘GHC.Internal.IO.IOMode’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11952:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoCostCentres -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11953:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoHeapProfile -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11954:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoTrace -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11955:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.GiveGCStats -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:11956:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.IoManagerFlag -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12291:instance forall a k (b :: k). GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12292:instance forall a. GHC.Internal.Float.RealFloat a => GHC.Internal.Num.Num (Data.Complex.Complex a) -- Defined in ‘Data.Complex’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12293:instance forall k (a :: k). Data.Fixed.HasResolution a => GHC.Internal.Num.Num (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12294:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Num.Num (f (g a)) => GHC.Internal.Num.Num (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12295:instance forall a b. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Functor.Contravariant.Op a b) -- Defined in ‘Data.Functor.Contravariant’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12296:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12297:instance GHC.Internal.Num.Num GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12298:instance GHC.Internal.Num.Num GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12299:instance GHC.Internal.Num.Num GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12300:instance GHC.Internal.Num.Num GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12301:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Num.Num (f a) => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12302:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12303:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12304:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12305:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Num.Num (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12306:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12307:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12308:instance GHC.Internal.Num.Num GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12309:instance GHC.Internal.Num.Num GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12310:instance GHC.Internal.Num.Num GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12311:instance GHC.Internal.Num.Num GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12312:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12313:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12314:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12315:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12316:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12317:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12318:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12319:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12320:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12321:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12322:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12323:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12324:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12325:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12326:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12327:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12328:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12329:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12330:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12331:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12332:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12333:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12334:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12335:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12336:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12337:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12338:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12339:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12340:instance GHC.Internal.Num.Num GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12341:instance GHC.Internal.Num.Num GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12342:instance GHC.Internal.Num.Num GHC.Types.Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12343:instance GHC.Internal.Num.Num GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12344:instance GHC.Internal.Num.Num GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-mingw32:12345:instance GHC.Internal.Num.Num GHC.Types.Word -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/template-haskell-exports.stdout:2779:instance [safe] GHC.Internal.Enum.Enum GHC.LanguageExtensions.Type.Extension -- Defined in ‘GHC.LanguageExtensions.Type’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:644:  biproduct :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:647:  bisum :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:729:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:731:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:732:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:756:  isAlphaNum :: Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:798:  conjugate :: forall a. GHC.Internal.Num.Num a => Complex a -> Complex a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:947:module Data.Enum where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:954:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:955:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:958:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:959:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:964:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:1035:    sum :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:1036:    product :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:1324:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:1363:  product :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:1380:  sum :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2018:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2047:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2092:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2099:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2101:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2102:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2105:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2314:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2315:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2316:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2317:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2318:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2319:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2330:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2331:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2457:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2458:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2459:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2460:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2461:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2462:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2473:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2474:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2595:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2630:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2631:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2634:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2686:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2687:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2731:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2766:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2767:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2770:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2788:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2794:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2932:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:2961:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:3006:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:3013:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:3015:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:3016:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:3019:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5006:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5007:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5008:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5208:module GHC.Enum where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5215:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5216:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5219:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5220:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5225:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5226:  boundedEnumFrom :: forall a. (Enum a, Bounded a) => a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:5227:  boundedEnumFromThen :: forall a. (Enum a, Bounded a) => a -> a -> [a]
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11322:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11333:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11403:module GHC.Num where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11409:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11410:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11416:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11495:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11581:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11601:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11826:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11917:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:11971:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12009:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12026:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12221:  readNumber :: forall a. GHC.Internal.Num.Num a => (GHC.Internal.Text.Read.Lex.Lexeme -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a) -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12229:  class GHC.Internal.Num.Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12237:  class (Real a, GHC.Internal.Enum.Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12251:  class (GHC.Internal.Num.Num a, GHC.Classes.Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12262:  (^) :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12269:  fromIntegral :: forall a b. (Integral a, GHC.Internal.Num.Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12288:  powImpl :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12289:  powImplAcc :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12776:  isAlphaNum :: GHC.Types.Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12898:  readBin :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12899:  readDec :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12901:  readHex :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12902:  readInt :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12903:  readOct :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12956:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12957:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12960:    toEnum :: Int -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12961:    fromEnum :: a -> Int
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:12966:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13015:    sum :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13016:    product :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13019:  class Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13038:  class (Real a, Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13065:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13066:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13072:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13098:  class (Num a, Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13150:  (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13171:  fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13223:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13824:  readBinP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13825:  readDecP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13826:  readHexP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13827:  readIntP :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:13828:  readOctP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14238:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14239:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14291:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14292:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14643:instance forall a k (b :: k). GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14644:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.And a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14645:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Iff a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14646:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Ior a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14647:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Xor a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14648:instance GHC.Internal.Enum.Enum GHC.Internal.Unicode.GeneralCategory -- Defined in ‘GHC.Internal.Unicode’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14649:instance forall k (a :: k) (b :: k). (a ~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14650:instance forall k1 k2 (a :: k1) (b :: k2). (a ~~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14651:instance forall k (s :: k). GHC.Internal.Enum.Enum (GHC.Internal.Data.Proxy.Proxy s) -- Defined in ‘GHC.Internal.Data.Proxy’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14652:instance GHC.Internal.Enum.Enum GHC.Types.Bool -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14653:instance GHC.Internal.Enum.Enum GHC.Types.Char -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14654:instance GHC.Internal.Enum.Enum GHC.Types.Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14655:instance GHC.Internal.Enum.Enum GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14656:instance GHC.Internal.Enum.Enum GHC.Types.Levity -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14657:instance GHC.Internal.Enum.Enum GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14658:instance GHC.Internal.Enum.Enum GHC.Types.Ordering -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14659:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Solo a) -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14660:instance GHC.Internal.Enum.Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14661:instance GHC.Internal.Enum.Enum GHC.Types.VecCount -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14662:instance GHC.Internal.Enum.Enum GHC.Types.VecElem -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14663:instance GHC.Internal.Enum.Enum GHC.Types.Word -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14664:instance forall k (a :: k). GHC.Internal.Enum.Enum (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14665:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Enum.Enum (f (g a)) => GHC.Internal.Enum.Enum (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14666:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14667:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14668:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14669:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14670:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14671:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14672:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Monoid.Ap f a) -- Defined in ‘GHC.Internal.Data.Monoid’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14673:instance forall a. (GHC.Internal.Enum.Enum a, GHC.Internal.Enum.Bounded a, GHC.Classes.Eq a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14674:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Enum.Enum (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14675:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.First a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14676:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Last a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14677:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14678:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14679:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.WrappedMonoid a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14680:instance forall k (a :: k) (b :: k). Coercible a b => GHC.Internal.Enum.Enum (GHC.Internal.Data.Type.Coercion.Coercion a b) -- Defined in ‘GHC.Internal.Data.Type.Coercion’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14681:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14682:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14683:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14684:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14685:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14686:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14687:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14688:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14689:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14690:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14691:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14692:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14693:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14694:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14695:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14696:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14697:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14698:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14699:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14700:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14701:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14702:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14703:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14704:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14705:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14706:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14707:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14708:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14709:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14710:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14711:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14712:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14713:instance GHC.Internal.Enum.Enum GHC.Internal.ByteOrder.ByteOrder -- Defined in ‘GHC.Internal.ByteOrder’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14714:instance GHC.Internal.Enum.Enum GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14715:instance GHC.Internal.Enum.Enum GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14716:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.Associativity -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14717:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.DecidedStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14718:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14719:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceUnpackedness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14720:instance GHC.Internal.Enum.Enum GHC.Internal.IO.Device.SeekMode -- Defined in ‘GHC.Internal.IO.Device’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14721:instance GHC.Internal.Enum.Enum GHC.Internal.IO.IOMode.IOMode -- Defined in ‘GHC.Internal.IO.IOMode’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14722:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoCostCentres -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14723:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoHeapProfile -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14724:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoTrace -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14725:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.GiveGCStats -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:14726:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.IoManagerFlag -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15051:instance forall a k (b :: k). GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15052:instance forall a. GHC.Internal.Float.RealFloat a => GHC.Internal.Num.Num (Data.Complex.Complex a) -- Defined in ‘Data.Complex’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15053:instance forall k (a :: k). Data.Fixed.HasResolution a => GHC.Internal.Num.Num (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15054:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Num.Num (f (g a)) => GHC.Internal.Num.Num (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15055:instance forall a b. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Functor.Contravariant.Op a b) -- Defined in ‘Data.Functor.Contravariant’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15056:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15057:instance GHC.Internal.Num.Num GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15058:instance GHC.Internal.Num.Num GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15059:instance GHC.Internal.Num.Num GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15060:instance GHC.Internal.Num.Num GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15061:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Num.Num (f a) => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15062:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15063:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15064:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15065:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Num.Num (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15066:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15067:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15068:instance GHC.Internal.Num.Num GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15069:instance GHC.Internal.Num.Num GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15070:instance GHC.Internal.Num.Num GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15071:instance GHC.Internal.Num.Num GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15072:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15073:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15074:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15075:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15076:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15077:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15078:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15079:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15080:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15081:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15082:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15083:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15084:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15085:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15086:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15087:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15088:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15089:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15090:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15091:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15092:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15093:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15094:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15095:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15096:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15097:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15098:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15099:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15100:instance GHC.Internal.Num.Num GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15101:instance GHC.Internal.Num.Num GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15102:instance GHC.Internal.Num.Num GHC.Types.Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15103:instance GHC.Internal.Num.Num GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15104:instance GHC.Internal.Num.Num GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout-javascript-unknown-ghcjs:15105:instance GHC.Internal.Num.Num GHC.Types.Word -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout:644:  biproduct :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout:647:  bisum :: forall (t :: * -> * -> *) a. (Bifoldable t, GHC.Internal.Num.Num a) => t a a -> a
testsuite/tests/interface-stability/base-exports.stdout:729:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout:731:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout:732:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:756:  isAlphaNum :: Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:798:  conjugate :: forall a. GHC.Internal.Num.Num a => Complex a -> Complex a
testsuite/tests/interface-stability/base-exports.stdout:947:module Data.Enum where
testsuite/tests/interface-stability/base-exports.stdout:954:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout:955:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout:958:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout:959:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout:964:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout:1035:    sum :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:1036:    product :: forall a. GHC.Internal.Num.Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:1324:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout:1363:  product :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:1380:  sum :: forall (t :: * -> *) a. (GHC.Internal.Data.Foldable.Foldable t, GHC.Internal.Num.Num a) => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:2018:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout:2047:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout:2092:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout:2099:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:2101:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2102:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2105:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:2314:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2315:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2316:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2317:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2318:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2319:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2330:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2331:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2457:  throwErrnoIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2458:  throwErrnoIfMinus1Retry :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2459:  throwErrnoIfMinus1RetryMayBlock :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2460:  throwErrnoIfMinus1RetryMayBlock_ :: forall a b. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO b -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2461:  throwErrnoIfMinus1Retry_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2462:  throwErrnoIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2473:  throwErrnoPathIfMinus1 :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2474:  throwErrnoPathIfMinus1_ :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Base.String -> GHC.Internal.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2595:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout:2630:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2631:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2634:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:2686:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2687:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2731:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout:2766:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:2767:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:2770:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:2788:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout:2794:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:2932:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => Int -> a
testsuite/tests/interface-stability/base-exports.stdout:2961:  fromBool :: forall a. GHC.Internal.Num.Num a => GHC.Types.Bool -> a
testsuite/tests/interface-stability/base-exports.stdout:3006:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int
testsuite/tests/interface-stability/base-exports.stdout:3013:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:3015:  throwIfNeg :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO a
testsuite/tests/interface-stability/base-exports.stdout:3016:  throwIfNeg_ :: forall a. (GHC.Classes.Ord a, GHC.Internal.Num.Num a) => (a -> GHC.Internal.Base.String) -> GHC.Types.IO a -> GHC.Types.IO ()
testsuite/tests/interface-stability/base-exports.stdout:3019:  toBool :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => a -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:5006:  bitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout:5007:  popCountDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout:5008:  testBitDefault :: forall a. (Bits a, GHC.Internal.Num.Num a) => a -> GHC.Types.Int -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:5208:module GHC.Enum where
testsuite/tests/interface-stability/base-exports.stdout:5215:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout:5216:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout:5219:    toEnum :: GHC.Types.Int -> a
testsuite/tests/interface-stability/base-exports.stdout:5220:    fromEnum :: a -> GHC.Types.Int
testsuite/tests/interface-stability/base-exports.stdout:5225:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout:5226:  boundedEnumFrom :: forall a. (Enum a, Bounded a) => a -> [a]
testsuite/tests/interface-stability/base-exports.stdout:5227:  boundedEnumFromThen :: forall a. (Enum a, Bounded a) => a -> a -> [a]
testsuite/tests/interface-stability/base-exports.stdout:8280:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout:8291:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout:8361:module GHC.Num where
testsuite/tests/interface-stability/base-exports.stdout:8367:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout:8368:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout:8374:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout:8453:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout:8539:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout:8559:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout:8784:  integerSignum :: Integer -> Integer
testsuite/tests/interface-stability/base-exports.stdout:8875:  naturalSignum :: Natural -> Natural
testsuite/tests/interface-stability/base-exports.stdout:8929:  genericLength :: forall i a. GHC.Internal.Num.Num i => [a] -> i
testsuite/tests/interface-stability/base-exports.stdout:8967:  product :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout:8984:  sum :: forall a. GHC.Internal.Num.Num a => [a] -> a
testsuite/tests/interface-stability/base-exports.stdout:9179:  readNumber :: forall a. GHC.Internal.Num.Num a => (GHC.Internal.Text.Read.Lex.Lexeme -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a) -> GHC.Internal.Text.ParserCombinators.ReadPrec.ReadPrec a
testsuite/tests/interface-stability/base-exports.stdout:9187:  class GHC.Internal.Num.Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout:9195:  class (Real a, GHC.Internal.Enum.Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout:9209:  class (GHC.Internal.Num.Num a, GHC.Classes.Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout:9220:  (^) :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout:9227:  fromIntegral :: forall a b. (Integral a, GHC.Internal.Num.Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout:9246:  powImpl :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout:9247:  powImplAcc :: forall a b. (GHC.Internal.Num.Num a, Integral b) => a -> b -> a -> a
testsuite/tests/interface-stability/base-exports.stdout:9734:  isAlphaNum :: GHC.Types.Char -> GHC.Types.Bool
testsuite/tests/interface-stability/base-exports.stdout:9856:  readBin :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout:9857:  readDec :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout:9859:  readHex :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout:9860:  readInt :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout:9861:  readOct :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadS a
testsuite/tests/interface-stability/base-exports.stdout:9914:  type Enum :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout:9915:  class Enum a where
testsuite/tests/interface-stability/base-exports.stdout:9918:    toEnum :: Int -> a
testsuite/tests/interface-stability/base-exports.stdout:9919:    fromEnum :: a -> Int
testsuite/tests/interface-stability/base-exports.stdout:9924:    {-# MINIMAL toEnum, fromEnum #-}
testsuite/tests/interface-stability/base-exports.stdout:9973:    sum :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:9974:    product :: forall a. Num a => t a -> a
testsuite/tests/interface-stability/base-exports.stdout:9977:  class Num a => Fractional a where
testsuite/tests/interface-stability/base-exports.stdout:9996:  class (Real a, Enum a) => Integral a where
testsuite/tests/interface-stability/base-exports.stdout:10023:  type Num :: * -> Constraint
testsuite/tests/interface-stability/base-exports.stdout:10024:  class Num a where
testsuite/tests/interface-stability/base-exports.stdout:10030:    signum :: a -> a
testsuite/tests/interface-stability/base-exports.stdout:10056:  class (Num a, Ord a) => Real a where
testsuite/tests/interface-stability/base-exports.stdout:10108:  (^) :: forall a b. (Num a, Integral b) => a -> b -> a
testsuite/tests/interface-stability/base-exports.stdout:10129:  fromIntegral :: forall a b. (Integral a, Num b) => a -> b
testsuite/tests/interface-stability/base-exports.stdout:10181:  subtract :: forall a. Num a => a -> a -> a
testsuite/tests/interface-stability/base-exports.stdout:10783:  readBinP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout:10784:  readDecP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout:10785:  readHexP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout:10786:  readIntP :: forall a. GHC.Internal.Num.Num a => a -> (GHC.Types.Char -> GHC.Types.Bool) -> (GHC.Types.Char -> GHC.Types.Int) -> GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout:10787:  readOctP :: forall a. (GHC.Classes.Eq a, GHC.Internal.Num.Num a) => GHC.Internal.Text.ParserCombinators.ReadP.ReadP a
testsuite/tests/interface-stability/base-exports.stdout:11197:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:11198:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Monoid (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:11253:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:11254:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Base.Semigroup (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:11608:instance forall a k (b :: k). GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout:11609:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.And a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout:11610:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Iff a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout:11611:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Ior a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout:11612:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Bits.Xor a) -- Defined in ‘GHC.Internal.Data.Bits’
testsuite/tests/interface-stability/base-exports.stdout:11613:instance GHC.Internal.Enum.Enum GHC.Internal.Unicode.GeneralCategory -- Defined in ‘GHC.Internal.Unicode’
testsuite/tests/interface-stability/base-exports.stdout:11614:instance forall k (a :: k) (b :: k). (a ~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout:11615:instance forall k1 k2 (a :: k1) (b :: k2). (a ~~ b) => GHC.Internal.Enum.Enum (a GHC.Internal.Data.Type.Equality.:~~: b) -- Defined in ‘GHC.Internal.Data.Type.Equality’
testsuite/tests/interface-stability/base-exports.stdout:11616:instance forall k (s :: k). GHC.Internal.Enum.Enum (GHC.Internal.Data.Proxy.Proxy s) -- Defined in ‘GHC.Internal.Data.Proxy’
testsuite/tests/interface-stability/base-exports.stdout:11617:instance GHC.Internal.Enum.Enum GHC.Types.Bool -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11618:instance GHC.Internal.Enum.Enum GHC.Types.Char -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11619:instance GHC.Internal.Enum.Enum GHC.Types.Int -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11620:instance GHC.Internal.Enum.Enum GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11621:instance GHC.Internal.Enum.Enum GHC.Types.Levity -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11622:instance GHC.Internal.Enum.Enum GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11623:instance GHC.Internal.Enum.Enum GHC.Types.Ordering -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11624:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Solo a) -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11625:instance GHC.Internal.Enum.Enum () -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11626:instance GHC.Internal.Enum.Enum GHC.Types.VecCount -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11627:instance GHC.Internal.Enum.Enum GHC.Types.VecElem -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11628:instance GHC.Internal.Enum.Enum GHC.Types.Word -- Defined in ‘GHC.Internal.Enum’
testsuite/tests/interface-stability/base-exports.stdout:11629:instance forall k (a :: k). GHC.Internal.Enum.Enum (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout:11630:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Enum.Enum (f (g a)) => GHC.Internal.Enum.Enum (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout:11631:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout:11632:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:11633:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:11634:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:11635:instance GHC.Internal.Enum.Enum GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:11636:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:11637:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Enum.Enum (f a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Monoid.Ap f a) -- Defined in ‘GHC.Internal.Data.Monoid’
testsuite/tests/interface-stability/base-exports.stdout:11638:instance forall a. (GHC.Internal.Enum.Enum a, GHC.Internal.Enum.Bounded a, GHC.Classes.Eq a) => GHC.Internal.Enum.Enum (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout:11639:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Enum.Enum (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout:11640:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.First a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:11641:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Last a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:11642:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:11643:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:11644:instance forall a. GHC.Internal.Enum.Enum a => GHC.Internal.Enum.Enum (Data.Semigroup.WrappedMonoid a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:11645:instance forall k (a :: k) (b :: k). Coercible a b => GHC.Internal.Enum.Enum (GHC.Internal.Data.Type.Coercion.Coercion a b) -- Defined in ‘GHC.Internal.Data.Type.Coercion’
testsuite/tests/interface-stability/base-exports.stdout:11646:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:11647:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:11648:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:11649:instance GHC.Internal.Enum.Enum GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:11650:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout:11651:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout:11652:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11653:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11654:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11655:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11656:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11657:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11658:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11659:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11660:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11661:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11662:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11663:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11664:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11665:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11666:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11667:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11668:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11669:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11670:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11671:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11672:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11673:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11674:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11675:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11676:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11677:instance GHC.Internal.Enum.Enum GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:11678:instance GHC.Internal.Enum.Enum GHC.Internal.ByteOrder.ByteOrder -- Defined in ‘GHC.Internal.ByteOrder’
testsuite/tests/interface-stability/base-exports.stdout:11679:instance GHC.Internal.Enum.Enum GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout:11680:instance GHC.Internal.Enum.Enum GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout:11681:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.Associativity -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout:11682:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.DecidedStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout:11683:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceStrictness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout:11684:instance GHC.Internal.Enum.Enum GHC.Internal.Generics.SourceUnpackedness -- Defined in ‘GHC.Internal.Generics’
testsuite/tests/interface-stability/base-exports.stdout:11685:instance GHC.Internal.Enum.Enum GHC.Internal.IO.Device.SeekMode -- Defined in ‘GHC.Internal.IO.Device’
testsuite/tests/interface-stability/base-exports.stdout:11686:instance GHC.Internal.Enum.Enum GHC.Internal.IO.IOMode.IOMode -- Defined in ‘GHC.Internal.IO.IOMode’
testsuite/tests/interface-stability/base-exports.stdout:11687:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoCostCentres -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout:11688:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoHeapProfile -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout:11689:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.DoTrace -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout:11690:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.GiveGCStats -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout:11691:instance GHC.Internal.Enum.Enum GHC.Internal.RTS.Flags.IoManagerFlag -- Defined in ‘GHC.Internal.RTS.Flags’
testsuite/tests/interface-stability/base-exports.stdout:12014:instance forall a k (b :: k). GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Const.Const a b) -- Defined in ‘GHC.Internal.Data.Functor.Const’
testsuite/tests/interface-stability/base-exports.stdout:12015:instance forall a. GHC.Internal.Float.RealFloat a => GHC.Internal.Num.Num (Data.Complex.Complex a) -- Defined in ‘Data.Complex’
testsuite/tests/interface-stability/base-exports.stdout:12016:instance forall k (a :: k). Data.Fixed.HasResolution a => GHC.Internal.Num.Num (Data.Fixed.Fixed a) -- Defined in ‘Data.Fixed’
testsuite/tests/interface-stability/base-exports.stdout:12017:instance forall k1 k2 (f :: k1 -> *) (g :: k2 -> k1) (a :: k2). GHC.Internal.Num.Num (f (g a)) => GHC.Internal.Num.Num (Data.Functor.Compose.Compose f g a) -- Defined in ‘Data.Functor.Compose’
testsuite/tests/interface-stability/base-exports.stdout:12018:instance forall a b. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Functor.Contravariant.Op a b) -- Defined in ‘Data.Functor.Contravariant’
testsuite/tests/interface-stability/base-exports.stdout:12019:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Functor.Identity.Identity a) -- Defined in ‘GHC.Internal.Data.Functor.Identity’
testsuite/tests/interface-stability/base-exports.stdout:12020:instance GHC.Internal.Num.Num GHC.Internal.Int.Int16 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:12021:instance GHC.Internal.Num.Num GHC.Internal.Int.Int32 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:12022:instance GHC.Internal.Num.Num GHC.Internal.Int.Int64 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:12023:instance GHC.Internal.Num.Num GHC.Internal.Int.Int8 -- Defined in ‘GHC.Internal.Int’
testsuite/tests/interface-stability/base-exports.stdout:12024:instance forall k (f :: k -> *) (a :: k). GHC.Internal.Num.Num (f a) => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Alt f a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:12025:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Product a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:12026:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Semigroup.Internal.Sum a) -- Defined in ‘GHC.Internal.Data.Semigroup.Internal’
testsuite/tests/interface-stability/base-exports.stdout:12027:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (GHC.Internal.Data.Ord.Down a) -- Defined in ‘GHC.Internal.Data.Ord’
testsuite/tests/interface-stability/base-exports.stdout:12028:instance forall a. GHC.Internal.Real.Integral a => GHC.Internal.Num.Num (GHC.Internal.Real.Ratio a) -- Defined in ‘GHC.Internal.Real’
testsuite/tests/interface-stability/base-exports.stdout:12029:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Max a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:12030:instance forall a. GHC.Internal.Num.Num a => GHC.Internal.Num.Num (Data.Semigroup.Min a) -- Defined in ‘Data.Semigroup’
testsuite/tests/interface-stability/base-exports.stdout:12031:instance GHC.Internal.Num.Num GHC.Internal.Word.Word16 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:12032:instance GHC.Internal.Num.Num GHC.Internal.Word.Word32 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:12033:instance GHC.Internal.Num.Num GHC.Internal.Word.Word64 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:12034:instance GHC.Internal.Num.Num GHC.Internal.Word.Word8 -- Defined in ‘GHC.Internal.Word’
testsuite/tests/interface-stability/base-exports.stdout:12035:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.IntPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout:12036:instance GHC.Internal.Num.Num GHC.Internal.Foreign.Ptr.WordPtr -- Defined in ‘GHC.Internal.Foreign.Ptr’
testsuite/tests/interface-stability/base-exports.stdout:12037:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CBool -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12038:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12039:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CClock -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12040:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CDouble -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12041:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CFloat -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12042:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12043:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12044:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12045:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12046:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12047:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CPtrdiff -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12048:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12049:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12050:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12051:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSigAtomic -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12052:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CSize -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12053:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CTime -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12054:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUChar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12055:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUInt -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12056:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntMax -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12057:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUIntPtr -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12058:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULLong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12059:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CULong -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12060:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUSeconds -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12061:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CUShort -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12062:instance GHC.Internal.Num.Num GHC.Internal.Foreign.C.Types.CWchar -- Defined in ‘GHC.Internal.Foreign.C.Types’
testsuite/tests/interface-stability/base-exports.stdout:12063:instance GHC.Internal.Num.Num GHC.Types.Double -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout:12064:instance GHC.Internal.Num.Num GHC.Types.Float -- Defined in ‘GHC.Internal.Float’
testsuite/tests/interface-stability/base-exports.stdout:12065:instance GHC.Internal.Num.Num GHC.Types.Int -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout:12066:instance GHC.Internal.Num.Num GHC.Num.Integer.Integer -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout:12067:instance GHC.Internal.Num.Num GHC.Num.Natural.Natural -- Defined in ‘GHC.Internal.Num’
testsuite/tests/interface-stability/base-exports.stdout:12068:instance GHC.Internal.Num.Num GHC.Types.Word -- Defined in ‘GHC.Internal.Num’
testsuite/tests/llvm/should_compile/T5486.hs:16:newtype BigNum = BigNum (Ptr BIGNUM)
testsuite/tests/llvm/should_compile/T5486.hs:23:        _free :: Ptr BIGNUM -> IO ()
testsuite/tests/llvm/should_compile/T5486.hs:26:        _bn2mpi :: Ptr BIGNUM -> Ptr CChar -> IO CInt
testsuite/tests/llvm/should_compile/T5486.hs:34:unwrapBN :: BigNum -> Ptr BIGNUM
testsuite/tests/llvm/should_compile/T5486.hs:35:unwrapBN (BigNum p) = p
testsuite/tests/llvm/should_compile/T5486.hs:37:wrapBN :: Ptr BIGNUM -> BigNum
testsuite/tests/llvm/should_compile/T5486.hs:40:bnToInteger :: BigNum -> IO Integer
testsuite/tests/llvm/should_compile/T5486.hs:118:bnToMPI :: BigNum -> IO BS.ByteString
testsuite/tests/quotes/T20893.hs:21:         let num = case day of
testsuite/tests/quotes/T4169.hs:7:    fromIntegerNum :: a
testsuite/tests/quotes/T4169.hs:8:    fromIntegerNum = undefined
testsuite/tests/perf/compiler/T15304.hs:38:instance Num Cl3 where
testsuite/tests/perf/compiler/T15304.hs:663:  -- |'signum' satisfies the Law "abs x * signum x == x"
testsuite/tests/perf/compiler/T15304.hs:664:  -- kind of cool: signum of a vector is the unit vector.
testsuite/tests/perf/compiler/T15304.hs:665:  signum cliffor = let (R mag) = abs cliffor in cliffor * R (recip mag)
testsuite/tests/perf/compiler/T21839c.hs:5:-- for a Enum, and then deriving a Binary instance for that Enum via Generics.
testsuite/tests/perf/compiler/T17516.hs:157:p_atext = pPred (\c -> isAsciiAlphaNum c || c `elem` "!#$%&'+-/=?^_`{|}~")
testsuite/tests/perf/compiler/T17516.hs:330:isAsciiAlphaNum :: Char -> Bool
testsuite/tests/perf/compiler/T17516.hs:331:isAsciiAlphaNum c = isAscii c && isAlphaNum c
testsuite/tests/perf/should_run/T7797a.hs:7:instance (Ord a, Num a) => Size [a] where
testsuite/tests/perf/should_run/T21839r.hs:5:-- for a Enum, and then deriving a Binary instance for that Enum via Generics.
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:10:instance (Ord a, Eq b, Num b) ⇒ Sum PSum a b where
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:18:insertX ∷ (Ord a, Eq b, Num b) ⇒ a → b → PSum a b → PSum a b
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:21:unionX ∷ (Ord a, Eq b, Num b) ⇒ PSum a b → PSum a b → PSum a b
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:33:unionsX ∷ (Ord a, Eq b, Num b) ⇒ [PSum a b] → PSum a b
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:38:extractMinX ∷ (Ord a, Eq b, Num b) ⇒ PSum a b → ((a,b), PSum a b)
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:42:fromListX ∷ (Ord a, Eq b, Num b) ⇒ [(a,b)] → PSum a b
testsuite/tests/perf/should_run/T2902_A_PairingSum.hs:46:toListX ∷ (Ord a, Eq b, Num b) ⇒ PSum a b → [(a,b)]
testsuite/tests/perf/should_run/T2902_B_PairingSum.hs:10:instance (Ord a, Eq b, Num b) ⇒ Sum PSum a b where
testsuite/tests/perf/should_run/T3736.hs:47:saw :: Num a => a -> a
testsuite/tests/perf/should_run/T3736.hs:63:   (Num y) =>
testsuite/tests/perf/should_run/T3736.hs:90:   (Num y) =>
testsuite/tests/perf/should_run/T3738a.hs:5:foo :: Num a => a -> [a]
testsuite/tests/perf/should_run/T10359.hs:24:do_step :: (Numerical num) => num -> Box a -> Box a
testsuite/tests/perf/should_run/T10359.hs:46:    { func2 :: forall num. (Fractional num, Real num) => num -> a -> a
testsuite/tests/perf/should_run/T10359.hs:49:do_step2 :: (Fractional num, Real num) => num -> Box2 a -> Box2 a
testsuite/tests/perf/should_run/T10359.hs:62:do_step3 :: (Numerical num) => num -> Box a -> Box a
testsuite/tests/perf/should_run/T10359.hs:71:do_step4 :: (Numerical num) => num -> Box a -> Box a
testsuite/tests/perf/should_run/T10359.hs:84:do_step4 :: (Numerical num) => num -> Box a -> Box a
testsuite/tests/perf/should_run/T13623.hs:43:senumFromStepN :: (Num a, Monad m) => a -> a -> Int -> Stream m a
testsuite/tests/rename/should_compile/T3103/test.T:5:      '-v0 -hide-all-packages -package ghc-prim -package ghc-bignum -this-unit-id base'])
testsuite/tests/rename/should_compile/T3103/GHC/Base.lhs:14:class Num a  where
testsuite/tests/rename/should_compile/T3103/GHC/Base.lhs:15:    signum    :: a -> a
testsuite/tests/rename/should_compile/T3103/GHC/Word.hs:9:import GHC.Num ()
testsuite/tests/rename/should_compile/T3103/GHC/Word.hs:13:instance Num Word where
testsuite/tests/rename/should_compile/T3103/GHC/Word.hs:14:    signum 0               = 0
testsuite/tests/rename/should_compile/T3103/GHC/Word.hs:15:    signum _               = 1
testsuite/tests/rename/should_compile/T3103/GHC/Num.hs:3:module GHC.Num (fromInteger) where
testsuite/tests/rename/should_compile/T3103/GHC/Num.hs:8:fromInteger :: Num a => Integer -> a
testsuite/tests/rename/should_compile/T22478a.hs:36:fQualTy :: T ((Ord a, Num a) => a) -> (P (Ord a), P (Num a), P a)
testsuite/tests/rename/should_fail/T5001b.hs:4:class GEnum a where
testsuite/tests/rename/should_fail/T5001b.hs:5:     genum :: [a]
testsuite/tests/rename/should_fail/T5001b.hs:6:     default genum :: [a]
testsuite/tests/rename/should_fail/T5001b.hs:7:     genum = undefined
testsuite/tests/rename/should_fail/T5001b.hs:9:instance GEnum Int where
testsuite/tests/rename/should_fail/T5001b.hs:10:     {-# INLINE genum #-}
testsuite/tests/rename/should_fail/RnDefaultSigFail.stderr:3:    Unexpected default signature: default m :: Num a => a
testsuite/tests/rename/should_fail/RnDefaultSigFail.hs:5:  default m :: Num a => a
testsuite/tests/type-data/should_fail/TDTagToEnum.hs:3:module TDTagToEnum where
testsuite/driver/testlib.py:2766:    # Error messages sometimes contain ghc-bignum implementation package
testsuite/driver/testglobals.py:165:        # Do we use a fast backend for bignum (e.g. GMP)
testsuite/driver/testglobals.py:166:        self.have_fast_bignum = True
testsuite/driver/perf_notes.py:12:from enum import Enum
testsuite/driver/term_color.py:1:from enum import Enum
testsuite/mk/test.mk:113:BIGNUM_GMP := $(shell "$(GHC_PKG)" field ghc-bignum exposed-modules | grep GMP)
utils/hsc2hs/src/HSCParser.hs:154:            manySatisfy_ (\c' -> isAlphaNum c' || c' == '_' || c' == '\'')
utils/hsc2hs/src/HSCParser.hs:174:          manySatisfy_ (\c' -> isAlphaNum c' || c' == '_' || c' == '\'')
utils/hsc2hs/src/HSCParser.hs:178:          manySatisfy_ (\c' -> isAlphaNum c' || c' == '_' || c' == '\'')
utils/hsc2hs/src/HSCParser.hs:377:    cs <- manySatisfyC (\c' -> isAlphaNum c' || c' == '_')
utils/hsc2hs/src/C.hs:91:        "enum"              -> outCLine pos++outEnum arg
utils/hsc2hs/src/C.hs:140:parseEnum :: String -> Maybe (String,String,[(Maybe String,String)])
utils/hsc2hs/src/C.hs:141:parseEnum arg =
utils/hsc2hs/src/C.hs:149:                        this = case break (== '=') $ dropWhile isSpace enum of
utils/hsc2hs/src/C.hs:155:outEnum :: String -> String
utils/hsc2hs/src/C.hs:156:outEnum arg = case parseEnum arg of
utils/hsc2hs/src/C.hs:162:                    "    hsc_enum ("++t++", "++f++", " ++
utils/hsc2hs/src/C.hs:166:                    "    hsc_enum ("++t++", "++f++", " ++
utils/hsc2hs/src/DirectCodegen.hs:59:            fixChar c | isAlphaNum c = toUpper c
utils/hsc2hs/src/CrossCodegen.hs:232:       "enum" -> computeEnum z >>= output >> return False
utils/hsc2hs/src/CrossCodegen.hs:306:    checkValidEnum =
utils/hsc2hs/src/CrossCodegen.hs:307:        case parseEnum value of
utils/hsc2hs/src/CrossCodegen.hs:448:-- For #{enum} codegen; in normal hsc2hs, any whitespace in the enum types &
utils/hsc2hs/src/CrossCodegen.hs:466:computeEnum :: ZCursor Token -> TestMonad String
utils/hsc2hs/src/CrossCodegen.hs:467:computeEnum z@(ZCursor (Special _ _ enumText) _ _) =
utils/hsc2hs/src/CrossCodegen.hs:468:    case parseEnum enumText of
utils/hsc2hs/src/CrossCodegen.hs:478:computeEnum _ = error "computeEnum argument isn't a Special"
utils/hsc2hs/README.rst:199:``#enum ⟨type⟩, ⟨constructor⟩, ⟨value⟩, ⟨value⟩, ...``
utils/haddock/haddock-library/src/Documentation/Haddock/Parser.hs:169:    num = hex <|> decimal
utils/haddock/haddock-library/src/Documentation/Haddock/Parser.hs:264:    conChar = Parsec.alphaNum <|> Parsec.char '_'
utils/haddock/haddock-library/src/Documentation/Haddock/Parser.hs:541:    package = Parsec.many1 $ Parsec.alphaNum <|> Parsec.oneOf "_-"
utils/haddock/haddock-library/src/Documentation/Haddock/Parser/Identifier.hs:146:      = let !(idt, rest) = T.span (\c -> isAlphaNum c || c == '_') t
utils/haddock/html-test/ref/BundledPatterns.html:229:		    >x :: Num a =&gt; Vec 3 a
utils/haddock/html-test/ref/BundledPatterns.html:248:		    >f :: Num a =&gt; Vec ((n + 1) + 1) a -&gt; a
utils/haddock/html-test/ref/BundledPatterns.html:277:		    >g :: Num a =&gt; Vec ((((n + 1) + 1) + 1) + 1) a -&gt; a
utils/haddock/html-test/ref/BundledPatterns.html:358:		    >x :: Num a =&gt; RTree 0 a
utils/haddock/html-test/ref/BundledPatterns.html:377:		    >f :: Num a =&gt; RTree 0 a -&gt; RTree 0 a -&gt; a
utils/haddock/html-test/ref/BundledPatterns.html:430:		    >x :: Num a =&gt; RTree 1 a
utils/haddock/html-test/ref/BundledPatterns.html:449:		    >f :: Num a =&gt; RTree 1 a -&gt; RTree 0 a
utils/haddock/html-test/ref/BundledPatterns2.html:211:		    >x :: Num a =&gt; Vec 3 a
utils/haddock/html-test/ref/BundledPatterns2.html:230:		    >f :: Num a =&gt; Vec ((n + 1) + 1) a -&gt; a
utils/haddock/html-test/ref/BundledPatterns2.html:259:		    >g :: Num a =&gt; Vec ((((n + 1) + 1) + 1) + 1) a -&gt; a
utils/haddock/html-test/ref/BundledPatterns2.html:352:		    >x :: Num a =&gt; RTree 0 a
utils/haddock/html-test/ref/BundledPatterns2.html:371:		    >f :: Num a =&gt; RTree 0 a -&gt; RTree 0 a -&gt; a
utils/haddock/html-test/ref/BundledPatterns2.html:424:		    >x :: Num a =&gt; RTree 1 a
utils/haddock/html-test/ref/BundledPatterns2.html:443:		    >f :: Num a =&gt; RTree 1 a -&gt; RTree 0 a
utils/haddock/html-test/src/HiddenInstances.hs:24:instance Num VisibleData
utils/haddock/html-test/src/BundledPatterns.hs:29:-- x :: Num a => Vec 3 a
utils/haddock/html-test/src/BundledPatterns.hs:35:-- f :: Num a => Vec ((n + 1) + 1) a -> a
utils/haddock/html-test/src/BundledPatterns.hs:43:-- g :: Num a => Vec ((((n + 1) + 1) + 1) + 1) a -> a
utils/haddock/html-test/src/BundledPatterns.hs:81:-- x :: Num a => RTree 0 a
utils/haddock/html-test/src/BundledPatterns.hs:87:-- f :: Num a => RTree 0 a -> RTree 0 a -> a
utils/haddock/html-test/src/BundledPatterns.hs:101:-- x :: Num a => RTree 1 a
utils/haddock/html-test/src/BundledPatterns.hs:107:-- f :: Num a => RTree 1 a -> RTree 0 a
utils/haddock/haddock-api/src/Haddock/Convert.hs:587:  --   (e.g. adding @forall a. Num a =>@ to @(+) :: a -> a -> a@)
utils/haddock/haddock-api/src/Haddock/Utils.hs:203:    isLegal c = isAscii c && isAlphaNum c
utils/haddock/haddock-api/src/Haddock/Utils/Json.hs:484:    isIdentifierKey (x:xs) = isAlpha x && all isAlphaNum xs
utils/haddock/haddock-api/src/Haddock/Utils/Json/Parser.hs:79:        check x | code <= max_char = return (toEnum code)
utils/haddock/haddock-api/src/Haddock/Utils/Json/Parser.hs:82:                max_char  = fromEnum (maxBound :: Char)
utils/haddock/haddock-api/src/Haddock/InterfaceFile.hs:636:    put_ bh (fromEnum <$> hmi_language hmi)
utils/haddock/haddock-api/src/Haddock/InterfaceFile.hs:637:    put_ bh (map fromEnum $ hmi_extensions hmi)
utils/haddock/haddock-api/src/Haddock/InterfaceFile.hs:647:    langu <- fmap toEnum <$> get bh
utils/haddock/haddock-api/src/Haddock/InterfaceFile.hs:648:    exten <- map toEnum <$> get bh
utils/haddock/haddock-api/src/Haddock/Backends/Hoogle.hs:132:operator (x:xs) | not (isAlphaNum x) && x `notElem` "_' ([{" = '(' : x:xs ++ ")"
utils/haddock/haddock-api/resources/html/js-src/details-helper.tsx:65:enum DefaultState { Closed, Open }
utils/haddock/hypsrc-test/ref/src/Polymorphism.html:1154:	  >num :: forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Polymorphism.html:1270:	  >num' :: forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/LinkingIdentifiers.html:193:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/LinkingIdentifiers.html:306:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/LinkingIdentifiers.html:470:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/LinkingIdentifiers.html:583:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Literals.html:146:	  >num :: forall a. Num a =&gt; a
utils/haddock/hypsrc-test/ref/src/Literals.html:172:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Literals.html:191:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Literals.html:210:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Literals.html:229:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Classes.html:724:forall a. Num a =&gt; [a] -&gt; a
utils/haddock/hypsrc-test/ref/src/Classes.html:725:forall (t :: * -&gt; *) a. (Foldable t, Num a) =&gt; t a -&gt; a
utils/haddock/hypsrc-test/ref/src/Classes.html:822:forall a. Num a =&gt; [a] -&gt; a
utils/haddock/hypsrc-test/ref/src/Classes.html:823:forall (t :: * -&gt; *) a. (Foldable t, Num a) =&gt; t a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:163:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:184:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:227:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:248:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:326:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:347:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:390:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:411:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:489:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:510:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:531:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Identifiers.html:552:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:498:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:519:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:540:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:682:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:703:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Records.html:724:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:551:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:572:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1079:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1100:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1132:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1230:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1262:forall a. Num a =&gt; a -&gt; a -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1316:forall a. Num a =&gt; [a] -&gt; a
utils/haddock/hypsrc-test/ref/src/Constructors.html:1317:forall (t :: * -&gt; *) a. (Foldable t, Num a) =&gt; t a -&gt; a
utils/haddock/hypsrc-test/src/Polymorphism.hs:34:num :: Num a => a -> a -> a
utils/haddock/hypsrc-test/src/Polymorphism.hs:35:num = undefined
utils/haddock/hypsrc-test/src/Polymorphism.hs:37:num' :: forall a. Num a => a -> a -> a
utils/haddock/hypsrc-test/src/Literals.hs:8:num :: Num a => a
utils/haddock/hypsrc-test/src/Literals.hs:9:num = 0 + 1 + 1010011 * 41231 + 12131
utils/hp2ps/HpFile.h:3:typedef enum {
utils/hp2ps/Main.c:192:typedef enum {POINTS, INCHES, MILLIMETRES} pim;
utils/hp2ps/Axes.c:13:typedef enum {MEGABYTE, KILOBYTE, BYTE} mkb; 
utils/hp2ps/Axes.c:108:	CommaPrint(psfp, (intish) (num / 1e6 + 0.5));
utils/hp2ps/Axes.c:113:	CommaPrint(psfp, (intish) (num / 1e3 + 0.5));
utils/hp2ps/Axes.c:118:	CommaPrint(psfp, (intish) (num + 0.5));
utils/hp2ps/HpFile.c:79:    linenum = 1;
utils/hp2ps/AuxFile.c:22:    linenum = 1;
utils/check-exact/Preprocess.hs:268:         start = GHC.mkSrcLoc (GHC.mkFastString srcFile) lineNum 1
utils/check-exact/Preprocess.hs:269:         end   = GHC.mkSrcLoc (GHC.mkFastString srcFile) lineNum (length line)
utils/deriveConstants/Main.hs:1080:            GetBool        name (Snd v)  -> "#define " ++ name ++ " " ++ show (fromEnum v)
utils/unlit/unlit.c:74:typedef enum { START, BLANK, TEXT, DEFN, BEGIN, END, /*PSEUDO,*/ ENDFILE, HASH, SHEBANG } line;
utils/hpc/src/Trace/Hpc/Utils.hs:154:        escapeChar c | isControl c || fromEnum c >= 0x7f = uni_esc c
utils/hpc/src/Trace/Hpc/Utils.hs:157:        uni_esc c = "\\u" ++ pad 4 (showHex (fromEnum c) "")
utils/hpc/src/Trace/Hpc/Markup.hs:395:  "<span class=\"funcount\">-- entered " ++ showBigNum n0 ++ " times</span>" ++ openTopDecl
utils/hpc/src/Trace/Hpc/Markup.hs:397:    showBigNum n
utils/ghc-pkg/Main.hs:346:-- | Enum flag representing argument type
